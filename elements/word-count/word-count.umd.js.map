{"version":3,"file":"word-count.umd.js","sources":["word-count.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport { FlattenedNodesObserver } from \"@polymer/polymer/lib/utils/flattened-nodes-observer.js\";\n/**\n * `word-count`\n * `Count the words on whatever this wraps`\n *\n * @demo demo/index.html\n */\nlet WordCount = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        --word-count-color: #888888;\n        --word-count-color-hover: #000000;\n      }\n      :host:after{\n        content: attr(words-text);\n        font-size: 10px;\n        position: relative;\n        transition: .3s font-size,color ease;\n        display: flex;\n        line-height: 16px;\n        flex-direction: row-reverse;\n        margin: 12px;\n        color: var(--word-count-color);\n        @apply --word-count-text;\n      }\n      :host(:hover):after {\n        font-size: 12px;\n        font-weight: bold;\n        color: var(--word-count-color-hover);\n        @apply --word-count-text-hover;\n      }\n      :host(:focus):after {\n        font-size: 12px;\n        font-weight: bold;\n        color: var(--word-count-color-hover);\n        @apply --word-count-text-hover;\n      }\n      :host(:active):after {\n        font-size: 12px;\n        font-weight: bold;\n        color: var(--word-count-color-hover);\n        @apply --word-count-text-hover;\n      }\n    </style>\n    <slot></slot>\n`,\n\n  is: \"word-count\",\n\n  hostAttributes: {\n    tabindex: \"0\"\n  },\n\n  properties: {\n    /**\n     * Words\n     */\n    words: {\n      type: Number\n    },\n    /**\n     * Prefix text.\n     */\n    wordsPrefix: {\n      type: String,\n      value: \"Words:\"\n    },\n    /**\n     * Text to output\n     */\n    wordsText: {\n      type: String,\n      computed: \"_computeWordsText(words, wordsPrefix)\",\n      reflectToAttribute: true\n    }\n  },\n\n  /**\n   * Ready life cycle\n   */\n  ready: function() {\n    // mutation observer that ensures state applied correctly\n    this._observer = new FlattenedNodesObserver(this, info => {\n      if (info.addedNodes.length > 0 || info.removedNodes.length > 0) {\n        this._updateWords();\n      }\n    });\n  },\n\n  /**\n   * Update words based on data in the slot.\n   */\n  _updateWords: function() {\n    if (dom(this).textContent !== \"\") {\n      this.words = parseInt(dom(this).textContent.split(/\\s+/g).length - 1);\n    } else {\n      this.words = 0;\n    }\n  },\n\n  /**\n   * Computer the text to output for words\n   */\n  _computeWordsText: function(words, prefix) {\n    return prefix + \" \" + words;\n  }\n});\nexport { WordCount };\n"],"names":["WordCount","Polymer","_template","html","is","hostAttributes","tabindex","properties","words","type","Number","wordsPrefix","String","value","wordsText","computed","reflectToAttribute","ready","_observer","FlattenedNodesObserver","this","info","addedNodes","length","removedNodes","_this","_updateWords","dom","textContent","parseInt","split","_computeWordsText","prefix"],"mappings":"swDASIA,EAAYC,UAAQ,CACtBC,UAAWC,YAyCXC,GAAI,aAEJC,eAAgB,CACdC,SAAU,KAGZC,WAAY,CAIVC,MAAO,CACLC,KAAMC,QAKRC,YAAa,CACXF,KAAMG,OACNC,MAAO,UAKTC,UAAW,CACTL,KAAMG,OACNG,SAAU,wCACVC,oBAAoB,IAOxBC,MAAO,2BAEAC,UAAY,IAAIC,yBAAuBC,KAAM,SAAAC,IAC5CA,EAAKC,WAAWC,OAAS,GAAKF,EAAKG,aAAaD,OAAS,IAC3DE,EAAKC,kBAQXA,aAAc,WACkB,KAA1BC,MAAIP,MAAMQ,iBACPpB,MAAQqB,SAASF,MAAIP,MAAMQ,YAAYE,MAAM,QAAQP,OAAS,QAE9Df,MAAQ,GAOjBuB,kBAAmB,SAASvB,EAAOwB,UAC1BA,EAAS,IAAMxB"}