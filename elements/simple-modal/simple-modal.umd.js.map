{"version":3,"file":"simple-modal.umd.js","sources":["simple-modal.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@polymer/paper-dialog/paper-dialog.js\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"@polymer/iron-icon/iron-icon.js\";\nimport \"@polymer/neon-animation/animations/scale-up-animation.js\";\nimport \"@polymer/neon-animation/animations/fade-out-animation.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom\";\nexport { SimpleModal };\n/**\n * `simple-modal`\n * `A simple modal that ensures accessibility and stack order context appropriately`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass SimpleModal extends PolymerElement {\n  \n  // render function\n  static get template() {\n    return html`\n<style>:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n#close {\n  float: right;\n  top: 0;\n  font-size: 12px;\n  text-transform: none;\n  right: 0;\n  position: absolute;\n  padding: 4px;\n  margin: 0;\n  color: var(--simple-modal-color, black);\n  background-color: transparent;\n  min-width: unset;\n}\n\n#close iron-icon {\n  display: inline-block;\n  width: 16px;\n  height: 16px;\n  margin-right: 2px;\n}</style>\n<paper-dialog entry-animation=\"scale-up-animation\"\nexit-animation=\"fade-out-animation\" opened=\"{{opened}}\" with-backdrop always-on-top>\n  <h2 hidden$=\"[[!title]]\">[[title]]</h2>\n  <slot name=\"header\"></slot>\n  <paper-dialog-scrollable>\n    <slot name=\"content\"></slot>\n  </paper-dialog-scrollable>\n  <div class=\"buttons\">\n    <slot name=\"buttons\"></slot>\n  </div>\n  <paper-button id=\"close\" on-tap=\"close\"><iron-icon icon=\"[[closeIcon]]\"></iron-icon> [[closeLabel]]</paper-button>\n</paper-dialog>`;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n  /**\n   * heading / label of the modal\n   */\n  \"title\": {\n    \"name\": \"title\",\n    \"type\": String,\n    \"value\": \"\"\n  },\n  /**\n   * open state\n   */\n  \"opened\": {\n    \"name\": \"opened\",\n    \"type\": Boolean,\n    \"value\": false,\n    \"reflectToAttribute\": true,\n    \"observer\": \"_openedChanged\"\n  },\n  /**\n   * Close label\n   */\n  \"closeLabel\": {\n    \"name\": \"closeLabel\",\n    \"type\": String,\n    \"value\": \"Close\"\n  },\n  /**\n   * Close icon\n   */\n    \"closeIcon\": {\n      \"name\": \"closeIcon\",\n      \"type\": String,\n      \"value\": \"cancel\"\n    },\n  /**\n   * The element that invoked this. This way we can track our way back accessibly\n   */\n  \"invokedBy\": {\n    \"name\": \"invokedBy\",\n    \"type\": Object\n  }\n}\n;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"simple-modal\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('simple-modal-show', this.showEvent.bind(this));\n    this.addEventListener('transitionend', this.animationEnded.bind(this));\n  }\n  /**\n   * show event call to open the modal and display it's content\n   */\n  showEvent (e) {\n    this.show(e.detail.title, e.detail.elements, e.detail.invokedBy);\n  }\n  /**\n   * Show the modal and display the material\n   */\n  show (title, elements, invokedBy) {\n    this.set('invokedBy', invokedBy);\n    this.title = title;\n    // append element areas into the appropriate slots\n    // ensuring they are set if it wasn't previously\n    let slots = [\"header\", \"content\", \"buttons\"];\n    for (var i in slots) {\n      if (elements[slots[i]]) {\n        let element = elements[slots[i]].cloneNode(true);\n        element.setAttribute('slot', slots[i]);\n        dom(this).appendChild(element);\n      }\n    }\n    // minor delay to help the above happen prior to opening\n    setTimeout(() => {\n      this.opened = true;\n    }, 100);\n  }\n  /**\n   * check state and if we should clean up on close.\n   * This keeps the DOM tiddy and allows animation to happen gracefully.\n   */\n  animationEnded(e) {\n    if (!this.opened) {\n      if (this.invokedBy) {\n        this.invokedBy.focus();\n      }\n      this.title = '';\n      // wipe the slot of our modal\n      while (dom(this).firstChild !== null) {\n        dom(this).removeChild(dom(this).firstChild);\n      }\n    }\n  }\n  /**\n   * Close the modal and do some clean up\n   */\n  close() {\n    this.opened = false;\n  }\n  // Observer opened for changes\n  _openedChanged(newValue, oldValue) {\n    if (typeof newValue !== typeof undefined && !newValue) {\n      this.close();\n    }\n  }\n  /**\n   * life cycle, element is removed from the DOM\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener('simple-modal-show', this.showEvent.bind(this));\n    this.removeEventListener('transitionend', this.animationEnded.bind(this));\n  }\n}\nwindow.customElements.define(SimpleModal.tag, SimpleModal);\n// register globally so we can make sure there is only one\nwindow.simpleModal = window.simpleModal || {};\n// request if this exists. This helps invoke the element existing in the dom\n// as well as that there is only one of them. That way we can ensure everything\n// is rendered through the same modal\nwindow.simpleModal.requestAvailability = () => {\n  if (!window.simpleModal.instance) {\n    window.simpleModal.instance = document.createElement(\"simple-modal\");\n    document.body.appendChild(window.simpleModal.instance);\n  }\n  return window.simpleModal.instance;\n};\n"],"names":["SimpleModal","PolymerElement","html","String","Boolean","Object","window","addEventListener","this","showEvent","bind","animationEnded","e","show","detail","title","elements","invokedBy","set","slots","i","element","cloneNode","setAttribute","dom","appendChild","setTimeout","_this","opened","focus","firstChild","removeChild","newValue","oldValue","_typeof","close","removeEventListener","customElements","define","tag","simpleModal","requestAvailability","instance","document","createElement","body"],"mappings":"u0GAyBMA,gaAAoBC,+DAIfC,qDA6CA,OAIA,MACC,aACAC,aACC,WAKD,MACA,cACAC,eACC,sBACa,WACV,6BAKA,MACJ,kBACAD,aACC,mBAKI,MACH,iBACAA,aACC,oBAKA,MACH,iBACAE,2CAWD,sHAOPC,OAAOC,iBAAiB,oBAAqBC,KAAKC,UAAUC,KAAKF,YAC5DD,iBAAiB,gBAAiBC,KAAKG,eAAeD,KAAKF,yCAKvDI,QACJC,KAAKD,EAAEE,OAAOC,MAAOH,EAAEE,OAAOE,SAAUJ,EAAEE,OAAOG,wCAKlDF,EAAOC,EAAUC,mBAChBC,IAAI,YAAaD,QACjBF,MAAQA,MAGTI,EAAQ,CAAC,SAAU,UAAW,eAC7B,IAAIC,KAAKD,KACRH,EAASG,EAAMC,IAAK,KAClBC,EAAUL,EAASG,EAAMC,IAAIE,WAAU,GAC3CD,EAAQE,aAAa,OAAQJ,EAAMC,IACnCI,MAAIhB,MAAMiB,YAAYJ,GAI1BK,WAAW,WACTC,EAAKC,QAAS,GACb,4CAMUhB,OACRJ,KAAKoB,WACJpB,KAAKS,gBACFA,UAAUY,aAEZd,MAAQ,GAEmB,OAAzBS,MAAIhB,MAAMsB,YACfN,MAAIhB,MAAMuB,YAAYP,MAAIhB,MAAMsB,iDAQ/BF,QAAS,yCAGDI,EAAUC,iBACnBC,EAAOF,IAAkCA,QACtCG,gHAQP7B,OAAO8B,oBAAoB,oBAAqB5B,KAAKC,UAAUC,KAAKF,YAC/D4B,oBAAoB,gBAAiB5B,KAAKG,eAAeD,KAAKF,4CAGvEF,OAAO+B,eAAeC,OAAOtC,EAAYuC,IAAKvC,GAE9CM,OAAOkC,YAAclC,OAAOkC,aAAe,GAI3ClC,OAAOkC,YAAYC,oBAAsB,kBAClCnC,OAAOkC,YAAYE,WACtBpC,OAAOkC,YAAYE,SAAWC,SAASC,cAAc,gBACrDD,SAASE,KAAKpB,YAAYnB,OAAOkC,YAAYE,WAExCpC,OAAOkC,YAAYE"}