{"version":3,"file":"progress-donut.umd.js","sources":["progress-donut.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport \"@lrnwebcomponents/materializecss-styles/materializecss-styles.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/hax-body-behaviors.js\";\nimport \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\nimport \"@lrnwebcomponents/chartist-render/chartist-render.js\";\nimport \"@lrnwebcomponents/simple-colors/simple-colors.js\";\n/**\n`progress-donut`\nA LRN element\n\n@demo demo/index.html\n\n@microcopy - the mental model for this element\n -\n\n*/\nPolymer({\n  _template: html`\n    <style is=\"custom-style\">\n      :host {\n        background-color: var(--simple-colors-background1, #ffffff);\n        overflow: visible;\n        display: block;\n      }\n      :host #wrapper {\n        margin: 0 auto;\n        position: relative;\n      }\n      :host #wrapper > * {\n        position: absolute;\n      }\n      :host #wrapper #chart {\n        left: 0;\n        top: 0;\n      }\n      :host #wrapper,\n      :host #wrapper #chart {\n        width: 250px;\n        height: 250px;\n      }\n      :host([size=\"xs\"]) #wrapper,\n      :host([size=\"xs\"]) #wrapper #chart {\n        width: 150px;\n        height: 150px;\n      }\n      :host([size=\"sm\"]) #wrapper,\n      :host([size=\"sm\"]) #wrapper #chart {\n        width: 200px;\n        height: 200px;\n      }\n      :host([size=\"lg\"]) #wrapper,\n      :host([size=\"lg\"]) #wrapper #chart {\n        width: 300px;\n        height: 300px;\n      }\n      :host([size=\"xl\"]) #wrapper,\n      :host([size=\"xl\"]) #wrapper #chart {\n        width: 400px;\n        height: 400px;\n      }\n      :host #wrapper > #image {\n        left: 20%;\n        top: 20%;\n        width: 60%;\n        height: 60%;\n        -webkit-clip-path: circle(50% at 50% 50%);\n        clip-path: circle(50% at 50% 50%);\n      }\n    </style>\n    <div id=\"wrapper\">\n      <img id=\"image\" alt\\$=\"[[imageAlt]]\" aria-hidden=\"true\" hidden\\$=\"[[!imageSrc]]\" src\\$=\"[[imageSrc]]\" style\\$=\"[[imageStyle]]\">\n      <chartist-render id=\"chart\" data\\$=\"[[data]]\" chart-desc\\$=\"[[desc]]\" chart-title=\"[[title]]\" scale=\"ct-square\" options\\$=\"[[options]]\" title\\$=\"[[title]]\" type=\"pie\">\n      </chartist-render>\n    </div>\n`,\n\n  is: \"progress-donut\",\n  behaviors: [\n    HAXBehaviors.PropertiesBehaviors,\n    simpleColorsBehaviors,\n    SchemaBehaviors.Schema\n  ],\n\n  listeners: {\n    \"chartist-render-draw\": \"_onCreated\"\n  },\n\n  properties: {\n    /**\n     * An array of completed values\n     */\n    complete: {\n      type: Array,\n      value: []\n    },\n    /**\n     * The thickness of the donut from 0-100\n     */\n    donutThickness: {\n      type: Number\n    },\n    /**\n     * An array of hex codes to use as colors for each section.\n     * If null, colors are determined by accentColor & dark properties\n     */\n    colors: {\n      type: Array,\n      value: null\n    },\n    /**\n     * An array of data for the donut chart\n     */\n    data: {\n      type: Array,\n      computed: \"_getData(complete)\"\n    },\n    /**\n     * Accessible long description\n     */\n    desc: {\n      type: String,\n      value: null\n    },\n    /**\n     * An array of data for the donut chart\n     */\n    options: {\n      type: Array,\n      computed: \"_getOptions(complete,total,size,colors,accentColor,dark)\"\n    },\n    /**\n     * The source of the image in the center of the object.\n     */\n    imageSrc: {\n      type: String,\n      value: null,\n      reflectToAttribute: true\n    },\n    /**\n     * The alt text for the image.\n     */\n    imageAlt: {\n      type: String,\n      value: null,\n      reflectToAttribute: true\n    },\n    /**\n     * The style for the image based on the size of the donut\n     */\n    imageStyle: {\n      type: String,\n      computed: \"_getImageStyle(size)\"\n    },\n    /**\n     * The size of the progress-donut: sx, sm, md, lg, or xl. Default is md\n     */\n    size: {\n      type: String,\n      value: \"md\"\n    },\n    /**\n     * Title\n     */\n    title: {\n      type: String\n    },\n    /**\n     * An array of incomplete values\n     */\n    total: {\n      type: Number,\n      value: 100\n    }\n  },\n\n  /**\n   * Attached to the DOM, now fire.\n   */\n  attached: function() {\n    // Establish hax property binding\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Sample gizmo\",\n        description: \"The user will be able to see this for selection in a UI.\",\n        icon: \"av:play-circle-filled\",\n        color: \"grey\",\n        groups: [\"Video\", \"Media\"],\n        handles: [\n          {\n            type: \"video\",\n            url: \"source\"\n          }\n        ],\n        meta: {\n          author: \"Your organization on github\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          }\n        ],\n        advanced: []\n      }\n    };\n    this.setHaxProperties(props);\n  },\n\n  /**\n   * Makes chart and returns the chart object.\n   */\n  _getData: function(complete) {\n    return { series: complete };\n  },\n\n  /**\n   * Makes chart and returns the chart object.\n   */\n  _getImageStyle: function(size) {\n    let offset = \"22%\",\n      diameter = \"56%\";\n    if (this.size === \"xs\") {\n      offset = \"32%\";\n      diameter = \"36%\";\n    } else if (this.size === \"sm\") {\n      offset = \"26%\";\n      diameter = \"48%\";\n    } else if (this.size === \"lg\") {\n      offset = \"20%\";\n      diameter = \"60%\";\n    } else if (this.size === \"xl\") {\n      offset = \"17%\";\n      diameter = \"66%\";\n    }\n    return (\n      \"left: \" +\n      offset +\n      \"; top: \" +\n      offset +\n      \"; width: \" +\n      diameter +\n      \"; height: \" +\n      diameter +\n      \";\"\n    );\n  },\n\n  /**\n   * Makes chart and returns the chart object.\n   */\n  _getOptions: function(complete, total, size, colors, accentColor, dark) {\n    let sum = 0;\n    for (let i = 0; i < complete.length; i++) {\n      sum += parseFloat(complete[i]);\n    }\n    return {\n      donut: true,\n      showLabel: false,\n      startAngle: 0,\n      total: Math.max(sum, total)\n    };\n  },\n\n  /**\n   * Handles chart creation event.\n   */\n  _onCreated: function(e) {\n    this.__chart = e.detail;\n    this.makeChart(this.__chart);\n  },\n\n  /**\n   * Makes chart and returns the chart object.\n   */\n  makeChart: function(chart) {\n    if (chart !== undefined) {\n      let colors = this.colors,\n        strokeWidth = \"10%\",\n        hex = window.SimpleColorsUtility.hexCodes,\n        accent =\n          this.accentColor !== null\n            ? this.accentColor.replace(/-([a-z])/g, function(g) {\n                return g[1].toUpperCase();\n              })\n            : null;\n      if (colors === undefined || colors === null || colors.length === 0) {\n        if (accent !== null && hex[accent] !== null) {\n          colors = this.dark\n            ? [\n                hex[accent][9],\n                hex[accent][6],\n                hex[accent][3],\n                hex[accent][7],\n                hex[accent][4]\n              ]\n            : [\n                hex[accent][0],\n                hex[accent][3],\n                hex[accent][5],\n                hex[accent][2],\n                hex[accent][4]\n              ];\n        } else {\n          colors = this.dark\n            ? [\n                hex.orange[6],\n                hex.pink[4],\n                hex.purple[5],\n                hex.cyan[6],\n                hex.lime[5]\n              ]\n            : [\n                hex.pink[5],\n                hex.deepPurple[4],\n                hex.blue[3],\n                hex.teal[4],\n                hex.yellow[5]\n              ];\n        }\n      }\n\n      if (this.size === \"xs\") {\n        strokeWidth = \"8%\";\n      } else if (this.size === \"sm\") {\n        strokeWidth = \"9%\";\n      } else if (this.size === \"lg\") {\n        strokeWidth = \"11%\";\n      } else if (this.size === \"xl\") {\n        strokeWidth = \"12%\";\n      }\n      // From chartist.js docs:\n      chart.on(\"draw\", function(data) {\n        data.element._node.style.strokeWidth = strokeWidth;\n        data.element._node.style.stroke = colors[data.index % colors.length];\n        if (data.type === \"slice\") {\n          var pathLength = data.element._node.getTotalLength();\n          data.element.attr({\n            \"stroke-dasharray\": pathLength + \"px \" + pathLength + \"px\"\n          });\n          var animationDefinition = {\n            \"stroke-dashoffset\": {\n              id: \"anim\" + data.index,\n              dur: 500,\n              from: -pathLength + \"px\",\n              to: \"0px\",\n              easing: Chartist.Svg.Easing.easeOutQuint,\n              fill: \"freeze\"\n            }\n          };\n          if (data.index !== 0) {\n            animationDefinition[\"stroke-dashoffset\"].begin =\n              \"anim\" + (data.index - 1) + \".end\";\n          }\n          data.element.attr({ \"stroke-dashoffset\": -pathLength + \"px\" });\n          data.element.animate(animationDefinition, false);\n        }\n      });\n      return chart;\n    }\n  }\n});\n"],"names":["_template","html","is","behaviors","HAXBehaviors","PropertiesBehaviors","simpleColorsBehaviors","SchemaBehaviors","Schema","listeners","properties","complete","type","Array","value","donutThickness","Number","colors","data","computed","desc","String","options","imageSrc","reflectToAttribute","imageAlt","imageStyle","size","title","total","attached","setHaxProperties","canScale","canPosition","canEditSource","gizmo","description","icon","color","groups","handles","url","meta","author","settings","quick","property","inputMethod","configure","advanced","_getData","series","_getImageStyle","offset","diameter","this","_getOptions","accentColor","dark","sum","i","length","parseFloat","donut","showLabel","startAngle","Math","max","_onCreated","e","__chart","detail","makeChart","chart","undefined","strokeWidth","hex","window","SimpleColorsUtility","hexCodes","accent","replace","g","toUpperCase","orange","pink","purple","cyan","lime","deepPurple","blue","teal","yellow","on","element","_node","style","stroke","index","pathLength","getTotalLength","attr","animationDefinition","id","dur","from","to","easing","Chartist","Svg","Easing","easeOutQuint","fill","begin","animate"],"mappings":"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"}