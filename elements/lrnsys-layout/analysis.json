{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`lrnsys-button-inner`",
      "summary": "",
      "path": "lib/lrnsys-button-inner.js",
      "properties": [
        {
          "name": "icon",
          "type": "string | null | undefined",
          "description": "Icon to present for clicking.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "avatar",
          "type": "string | null | undefined",
          "description": "Icon to present for clicking.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "text",
          "type": "string | null | undefined",
          "description": "Text to present for clicking.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_getTextLabelClass",
          "description": "Find out if the text does not have an avatar or an icon to the left,\nand add a class to remove the left margin.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 2
            },
            "end": {
              "line": 72,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 8
        },
        "end": {
          "line": 73,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "icon",
          "description": "Icon to present for clicking.",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "avatar",
          "description": "Icon to present for clicking.",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "text",
          "description": "Text to present for clicking.",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "lrnsys-button-inner"
    },
    {
      "description": "`lrnsys-collapselist-item`",
      "summary": "",
      "path": "lib/lrnsys-collapselist-item.js",
      "properties": [
        {
          "name": "opened",
          "type": "boolean | null | undefined",
          "description": "Whether or not this is default open on render.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "collapseToggle",
          "description": "Toggling collapse on an iron element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 9,
          "column": 8
        },
        "end": {
          "line": 81,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "opened",
          "description": "Whether or not this is default open on render.",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "opened-changed",
          "description": "Fired when the `opened` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "lrnsys-collapselist-item"
    },
    {
      "description": "`lrnsys-collapselist`",
      "summary": "",
      "path": "lib/lrnsys-collapselist.js",
      "properties": [
        {
          "name": "items",
          "type": "Array | null | undefined",
          "description": "Array of items to present with label and content for the list of collapses.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        }
      ],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 8
        },
        "end": {
          "line": 86,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "items",
          "description": "Array of items to present with label and content for the list of collapses.",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "lrnsys-collapselist"
    },
    {
      "description": "",
      "summary": "",
      "path": "lib/lrnsys-dialog-toolbar-button.js",
      "properties": [
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "The title of the button.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "icon",
          "type": "string | null | undefined",
          "description": "The button icon.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "id",
          "type": "string | null | undefined",
          "description": "The button ID.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 35,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "Ready lifecycle",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 2
            },
            "end": {
              "line": 43,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onTap",
          "description": "Button has been tapped.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 8
        },
        "end": {
          "line": 54,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "title",
          "description": "The title of the button.",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "icon",
          "description": "The button icon.",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "id",
          "description": "The button ID.",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 35,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "lrnsys-dialog-toolbar-button"
    },
    {
      "description": "",
      "summary": "",
      "path": "lib/lrnsys-dialog-toolbar.js",
      "properties": [
        {
          "name": "_secondaryHasChildren",
          "type": "boolean | null | undefined",
          "description": "Internal state of secondary toolbar",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "_tapHandler",
          "description": "Button tapped",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ready",
          "description": "Ready.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 90,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 3,
          "column": 8
        },
        "end": {
          "line": 91,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "lrnsys-dialog-toolbar"
    },
    {
      "description": "`lrnsys-dialog`",
      "summary": "",
      "path": "lib/lrnsys-dialog-modal.js",
      "properties": [
        {
          "name": "header",
          "type": "string | null | undefined",
          "description": "Header for the dialog",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 4
            },
            "end": {
              "line": 93,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "modal",
          "type": "boolean | null | undefined",
          "description": "Modal state for pop over.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "opened",
          "type": "boolean | null | undefined",
          "description": "Is dialog opened?",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "headingClass",
          "type": "string | null | undefined",
          "description": "Default heading classes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"white-text black\""
        },
        {
          "name": "bodyAppend",
          "type": "boolean | null | undefined",
          "description": "Support for body-appending which is a hack for stacking context\ncorrection but breaks scoped styles / shadowDOM",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "_bodyAppended",
          "type": "boolean | null | undefined",
          "description": "Ensure we only attach once in this manner",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 131,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "dynamicImages",
          "type": "boolean | null | undefined",
          "description": "Support for dynamic loading of iron-image elements that are in the content slot.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "toggleDialog",
          "description": "Toggle the drawer to open / close.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_toolbarButtonClickedHandler",
          "description": "Specifcally handle the click on an item in the toolbar.\nThis allows us to issue events elsewhere or to close the\nmodal if that button has been pressed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 2
            },
            "end": {
              "line": 166,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_modalClosed",
          "description": "Modal has closed, let's react appropriately.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 2
            },
            "end": {
              "line": 176,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_resizeContent",
          "description": "Ensure everything is visible in what's been expanded.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 2
            },
            "end": {
              "line": 186,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ready",
          "description": "Ready lifecyce",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 200,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "attached",
          "description": "Attached lifecyce",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 2
            },
            "end": {
              "line": 212,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_changeOpen",
          "description": "Attached lifecyce",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 2
            },
            "end": {
              "line": 223,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 8
        },
        "end": {
          "line": 224,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "header",
          "description": "Header for the dialog",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 4
            },
            "end": {
              "line": 93,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "modal",
          "description": "Modal state for pop over.",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "opened",
          "description": "Is dialog opened?",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "heading-class",
          "description": "Default heading classes.",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "body-append",
          "description": "Support for body-appending which is a hack for stacking context\ncorrection but breaks scoped styles / shadowDOM",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "dynamic-images",
          "description": "Support for dynamic loading of iron-image elements that are in the content slot.",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "opened-changed",
          "description": "Fired when the `opened` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "lrnsys-dialog-modal"
    },
    {
      "description": "`lrnsys-dialog`",
      "summary": "",
      "path": "lib/lrnsys-dialog.js",
      "properties": [
        {
          "name": "icon",
          "type": "string | null | undefined",
          "description": "Icon to present for clicking.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "raised",
          "type": "boolean | null | undefined",
          "description": "If the button should be visually lifted off the UI.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "avatar",
          "type": "string | null | undefined",
          "description": "Icon to present for clicking.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "text",
          "type": "string | null | undefined",
          "description": "Text to present for clicking.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "alt",
          "type": "string | null | undefined",
          "description": "Alt / hover text for this link",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "header",
          "type": "string | null | undefined",
          "description": "Header for the dialog",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "Disabled state.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "modal",
          "type": "boolean | null | undefined",
          "description": "Modal state for pop over.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "opened",
          "type": "boolean | null | undefined",
          "description": "Is dialog opened?",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 4
            },
            "end": {
              "line": 119,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "hoverClass",
          "type": "string | null | undefined",
          "description": "Classes to add / subtract based on the item being hovered",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "headingClass",
          "type": "string | null | undefined",
          "description": "Default heading classes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"white-text black\""
        },
        {
          "name": "bodyAppend",
          "type": "boolean | null | undefined",
          "description": "Support for body-appending which is a hack for stacking context\ncorrection but breaks scoped styles / shadowDOM",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 4
            },
            "end": {
              "line": 140,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "dynamicImages",
          "type": "boolean | null | undefined",
          "description": "Support for dynamic loading of iron-image elements that are in the content slot.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 147,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "focusState",
          "type": "boolean | null | undefined",
          "description": "Tracks if focus state is applied",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "disableAutoFocus",
          "type": "boolean | null | undefined",
          "description": "Ability to disable the auto focus mode\nthis is useful if something else is picking up this capability.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "tapEventOn",
          "description": "Handle a focus/tap event and add the hoverclasses\nto the classList array for paper-button.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "tapEventOff",
          "description": "Handle a mouse out event and remove the hoverclasses\nfrom the classList array for paper-button.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 2
            },
            "end": {
              "line": 195,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "toggleDialog",
          "description": "Toggle the drawer to open / close.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 2
            },
            "end": {
              "line": 202,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "focusToggle",
          "description": "Handle toggle for mouse class and manage classList array for paper-button.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 226,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ready",
          "description": "Ready lifecycle",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 2
            },
            "end": {
              "line": 233,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "attached",
          "description": "Attached lifecycle",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 2
            },
            "end": {
              "line": 249,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_accessibleFocus",
          "description": "Set ourselves as having focus after the modal closes.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 2
            },
            "end": {
              "line": 263,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_changeOpen",
          "description": "Attached lifecyce",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 268,
              "column": 2
            },
            "end": {
              "line": 274,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 8
        },
        "end": {
          "line": 275,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "icon",
          "description": "Icon to present for clicking.",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "raised",
          "description": "If the button should be visually lifted off the UI.",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "avatar",
          "description": "Icon to present for clicking.",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "text",
          "description": "Text to present for clicking.",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "alt",
          "description": "Alt / hover text for this link",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "header",
          "description": "Header for the dialog",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "disabled",
          "description": "Disabled state.",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "modal",
          "description": "Modal state for pop over.",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "opened",
          "description": "Is dialog opened?",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 4
            },
            "end": {
              "line": 119,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "hover-class",
          "description": "Classes to add / subtract based on the item being hovered",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "heading-class",
          "description": "Default heading classes.",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "body-append",
          "description": "Support for body-appending which is a hack for stacking context\ncorrection but breaks scoped styles / shadowDOM",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 4
            },
            "end": {
              "line": 140,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "dynamic-images",
          "description": "Support for dynamic loading of iron-image elements that are in the content slot.",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 147,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "focus-state",
          "description": "Tracks if focus state is applied",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "disable-auto-focus",
          "description": "Ability to disable the auto focus mode\nthis is useful if something else is picking up this capability.",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "opened-changed",
          "description": "Fired when the `opened` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "lrnsys-dialog"
    },
    {
      "description": "`lrnsys-drawer-modal`",
      "summary": "",
      "path": "lib/lrnsys-drawer-modal.js",
      "properties": [
        {
          "name": "opened",
          "type": "boolean | null | undefined",
          "description": "State for if it is currently open.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "align",
          "type": "string | null | undefined",
          "description": "Side of the screen to align the flyout (right or left)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"left\""
        },
        {
          "name": "header",
          "type": "string | null | undefined",
          "description": "Header for the drawer",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "Disabled state.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "headingClass",
          "type": "string | null | undefined",
          "description": "Heading classes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"white-text black\""
        },
        {
          "name": "bodyAppend",
          "type": "boolean | null | undefined",
          "description": "Support for body-appending which is a hack for stacking context\ncorrection but breaks scoped styles / shadowDOM",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "_bodyAppended",
          "type": "boolean | null | undefined",
          "description": "Ensure we only attach once in this manner",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 4
            },
            "end": {
              "line": 139,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "open",
          "description": "Toggle the drawer to open / close.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 2
            },
            "end": {
              "line": 148,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "close",
          "description": "Toggle the drawer to open / close.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 2
            },
            "end": {
              "line": 155,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "attached",
          "description": "Attached lifecyce",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 167,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_drawerClosed",
          "description": "Close the drawer.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 2
            },
            "end": {
              "line": 176,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "closeDrawer",
          "description": "Close the drawer.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 11,
          "column": 8
        },
        "end": {
          "line": 184,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "opened",
          "description": "State for if it is currently open.",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "align",
          "description": "Side of the screen to align the flyout (right or left)",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "header",
          "description": "Header for the drawer",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "disabled",
          "description": "Disabled state.",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "heading-class",
          "description": "Heading classes.",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "body-append",
          "description": "Support for body-appending which is a hack for stacking context\ncorrection but breaks scoped styles / shadowDOM",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "lrnsys-drawer-modal"
    },
    {
      "description": "`lrnsys-drawer`",
      "summary": "",
      "path": "lib/lrnsys-drawer.js",
      "properties": [
        {
          "name": "opened",
          "type": "boolean | null | undefined",
          "description": "State for if it is currently open.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 58,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "raised",
          "type": "boolean | null | undefined",
          "description": "If the button should be visually lifted off the UI.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "icon",
          "type": "string | null | undefined",
          "description": "Icon to present for clicking.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "avatar",
          "type": "string | null | undefined",
          "description": "Icon to present for clicking.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "text",
          "type": "string | null | undefined",
          "description": "Text to present for clicking.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "align",
          "type": "string | null | undefined",
          "description": "Side of the screen to align the flyout (right or left)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"left\""
        },
        {
          "name": "alt",
          "type": "string | null | undefined",
          "description": "Alt / hover text for this link",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "header",
          "type": "string | null | undefined",
          "description": "Header for the drawer",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "Disabled state.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 111,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "hoverClass",
          "type": "string | null | undefined",
          "description": "Classes to add / subtract based on the item being hovered",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "headingClass",
          "type": "string | null | undefined",
          "description": "Heading classes to apply downstream.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"white-text black\""
        },
        {
          "name": "bodyAppend",
          "type": "boolean | null | undefined",
          "description": "Support for body-appending which is a hack for stacking context\ncorrection but breaks scoped styles / shadowDOM",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "focusState",
          "type": "boolean | null | undefined",
          "description": "Tracks if focus state is applied",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 4
            },
            "end": {
              "line": 139,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "Ready lifecycle",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 2
            },
            "end": {
              "line": 147,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "attached",
          "description": "Attached lifecycle",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_accessibleFocus",
          "description": "Set ourselves as having focus after the modal closes.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "tapEventOn",
          "description": "Handle a mouse on event and add the hoverclasses\nto the classList array for paper-button.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 2
            },
            "end": {
              "line": 187,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "tapEventOff",
          "description": "Handle a mouse out event and remove the hoverclasses\nfrom the classList array for paper-button.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 2
            },
            "end": {
              "line": 203,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "toggleDrawer",
          "description": "Toggle the drawer to open / close.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 2
            },
            "end": {
              "line": 210,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "focusToggle",
          "description": "Handle toggle for mouse class and manage classList array for paper-button.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 2
            },
            "end": {
              "line": 234,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getTextLabelClass",
          "description": "Find out if the text does not have an avatar or an icon to the left,\nand add a class to remove the left margin.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 2
            },
            "end": {
              "line": 245,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 8
        },
        "end": {
          "line": 246,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "opened",
          "description": "State for if it is currently open.",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 58,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "raised",
          "description": "If the button should be visually lifted off the UI.",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "icon",
          "description": "Icon to present for clicking.",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "avatar",
          "description": "Icon to present for clicking.",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "text",
          "description": "Text to present for clicking.",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "align",
          "description": "Side of the screen to align the flyout (right or left)",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "alt",
          "description": "Alt / hover text for this link",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "header",
          "description": "Header for the drawer",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "disabled",
          "description": "Disabled state.",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 111,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "hover-class",
          "description": "Classes to add / subtract based on the item being hovered",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "heading-class",
          "description": "Heading classes to apply downstream.",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "body-append",
          "description": "Support for body-appending which is a hack for stacking context\ncorrection but breaks scoped styles / shadowDOM",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "focus-state",
          "description": "Tracks if focus state is applied",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 4
            },
            "end": {
              "line": 139,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "lrnsys-drawer"
    }
  ]
}
