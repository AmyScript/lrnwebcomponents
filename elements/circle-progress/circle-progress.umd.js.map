{"version":3,"file":"circle-progress.umd.js","sources":["circle-progress.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport \"@polymer/iron-flex-layout/iron-flex-layout.js\";\nimport { IronResizableBehavior } from \"@polymer/iron-resizable-behavior/iron-resizable-behavior.js\";\nimport \"@polymer/paper-styles/default-theme.js\";\n\n/**\n`circle-progress`\nPolymer-based web component displaying a circular progress bar.\n\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n        <style>\n\n            :host {\n                @apply(--layout-vertical);\n                @apply(--layout-center-center);\n\n                position: relative;\n\n                width: var(--circle-progress-width, 64px);\n                height: var(--circle-progress-height, 64px);\n                margin: 24px;\n\n                border-radius: 50%;\n            }\n\n            svg {\n                position: absolute;\n                top: 0;\n                left: 0;\n\n                display: none;\n            }\n\n            .circle-background {\n                stroke: var(--circle-progress-bg-stroke-color, --paper-grey-100);\n            }\n\n            .circle-foreground {\n                transition: stroke-dashoffset var(--circle-progress-transition, 150ms);\n\n                stroke: var(--circle-progress-stroke-color, --accent-color);\n                stroke-linecap: var(--circle-progress-stroke-linecap, round);\n            }\n\n        </style>\n\n        <svg id=\"circle\" width=\"100%\" height=\"100%\">\n            <circle class=\"circle-background\" r\\$=\"[[_radius]]\" cx\\$=\"[[_cx]]\" cy\\$=\"[[_cy]]\" fill=\"transparent\" stroke-width\\$=\"[[strokeWidth]]\"></circle>\n            <circle class=\"circle-foreground\" r\\$=\"[[_radius]]\" cx\\$=\"[[_cx]]\" cy\\$=\"[[_cy]]\" fill=\"transparent\" stroke-width\\$=\"[[strokeWidth]]\" stroke-dasharray\\$=\"[[_dasharray]]\" stroke-dashoffset\\$=\"[[_dashoffset]]\" transform\\$=\"[[_transform]]\"></circle>\n        </svg>\n\n        <slot></slot>\n`,\n\n  is: \"circle-progress\",\n  behaviors: [IronResizableBehavior],\n\n  properties: {\n    /**\n     * Value of circular progress bar.\n     */\n    value: {\n      type: Number,\n      value: 0\n    },\n\n    /**\n     * Maximum of value.\n     */\n    max: {\n      type: Number,\n      value: 100\n    },\n\n    /**\n     * Stroke width of circle.\n     */\n    strokeWidth: {\n      type: Number,\n      value: 4\n    },\n\n    /**\n     * Starting angle of the progress.\n     */\n    angle: {\n      type: Number,\n      value: -90\n    },\n\n    _cx: {\n      type: Number,\n      value: null\n    },\n\n    _cy: {\n      type: Number,\n      value: null\n    },\n\n    _radius: {\n      type: Number,\n      computed: \"_computeRadius(_cx, _cy, strokeWidth)\"\n    },\n\n    _transform: {\n      type: String,\n      computed: \"_computeTransform(angle, _cx, _cy)\"\n    },\n\n    _dasharray: {\n      type: Number,\n      computed: \"_computeDashArray(_radius)\"\n    },\n\n    _dashoffset: {\n      type: Number,\n      computed: \"_computeDashOffset(value, max, _dasharray)\"\n    }\n  },\n\n  listeners: {\n    \"iron-resize\": \"_onIronResize\"\n  },\n\n  _computeDashArray: function(radius) {\n    return 2 * Math.PI * radius;\n  },\n\n  _computeDashOffset: function(value, max, dasharray) {\n    return (1 - value / max) * dasharray;\n  },\n\n  _computeRadius: function(cx, cy, strokeWidth) {\n    return cx && cy ? Math.max(0, Math.min(cx, cy) - strokeWidth / 2) : 0;\n  },\n\n  _computeTransform: function(angle, cx, cy) {\n    return cx && cy ? \"rotate(\" + angle + \", \" + cx + \", \" + cy + \")\" : \"\";\n  },\n\n  _onIronResize: function() {\n    if (this.offsetWidth && this.offsetHeight) {\n      this._cx = this.offsetWidth / 2;\n      this._cy = this.offsetHeight / 2;\n      this.$.circle.style.display = \"block\";\n    }\n  }\n});\n"],"names":["_template","html","is","behaviors","IronResizableBehavior","properties","value","type","Number","max","strokeWidth","angle","_cx","_cy","_radius","computed","_transform","String","_dasharray","_dashoffset","listeners","_computeDashArray","radius","Math","PI","_computeDashOffset","dasharray","_computeRadius","cx","cy","min","_computeTransform","_onIronResize","this","offsetWidth","offsetHeight","$","circle","style","display"],"mappings":"kuHAWQ,CACNA,UAAWC,YA6CXC,GAAI,kBACJC,UAAW,CAACC,yBAEZC,WAAY,CAIVC,MAAO,CACLC,KAAMC,OACNF,MAAO,GAMTG,IAAK,CACHF,KAAMC,OACNF,MAAO,KAMTI,YAAa,CACXH,KAAMC,OACNF,MAAO,GAMTK,MAAO,CACLJ,KAAMC,OACNF,OAAQ,IAGVM,IAAK,CACHL,KAAMC,OACNF,MAAO,MAGTO,IAAK,CACHN,KAAMC,OACNF,MAAO,MAGTQ,QAAS,CACPP,KAAMC,OACNO,SAAU,yCAGZC,WAAY,CACVT,KAAMU,OACNF,SAAU,sCAGZG,WAAY,CACVX,KAAMC,OACNO,SAAU,8BAGZI,YAAa,CACXZ,KAAMC,OACNO,SAAU,+CAIdK,UAAW,eACM,iBAGjBC,kBAAmB,SAASC,UACnB,EAAIC,KAAKC,GAAKF,GAGvBG,mBAAoB,SAASnB,EAAOG,EAAKiB,UAC/B,EAAIpB,EAAQG,GAAOiB,GAG7BC,eAAgB,SAASC,EAAIC,EAAInB,UACxBkB,GAAMC,EAAKN,KAAKd,IAAI,EAAGc,KAAKO,IAAIF,EAAIC,GAAMnB,EAAc,GAAK,GAGtEqB,kBAAmB,SAASpB,EAAOiB,EAAIC,UAC9BD,GAAMC,EAAK,UAAYlB,EAAQ,KAAOiB,EAAK,KAAOC,EAAK,IAAM,IAGtEG,cAAe,WACTC,KAAKC,aAAeD,KAAKE,oBACtBvB,IAAMqB,KAAKC,YAAc,OACzBrB,IAAMoB,KAAKE,aAAe,OAC1BC,EAAEC,OAAOC,MAAMC,QAAU"}