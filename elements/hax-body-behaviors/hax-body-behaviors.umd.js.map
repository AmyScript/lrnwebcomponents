{"version":3,"file":"hax-body-behaviors.umd.js","sources":["lib/HAXWiring.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\n\n/**\n * Object to validate HAX\n */\nexport class HAXWiring {\n  constructor() {\n    /**\n     * haxProperties\n     */\n    this.haxProperties = {\n      canScale: false,\n      canPosition: false,\n      canEditSource: false,\n      settings: {\n        quick: [],\n        configure: [],\n        advanced: []\n      },\n      wipeSlot: {}\n    };\n    /**\n     * Setter to bridge private haxProperties setter.\n     * This is to then be implemented by the ready state of whatever is supplying the\n     * properties in order to be able to bubble up the properties for a tag.\n     */\n    this.setHaxProperties = (props, tag = \"\", context = document) => {\n      // these are a core piece of hax capabilities\n      // set them in the event this got called without anything\n      // so we at least won't bomb\n      if (typeof props.api === typeof undefined) {\n        props.api = \"1\";\n      }\n      // sets us up for future API versioning of property validation\n      // and clean up.\n      if (props.api == \"1\") {\n        if (typeof props.canPosition === typeof undefined) {\n          props.canPosition = true;\n        }\n        if (typeof props.canScale === typeof undefined) {\n          props.canScale = true;\n        }\n        if (typeof props.canEditSource === typeof undefined) {\n          props.canEditSource = false;\n        }\n        if (typeof props.gizmo === typeof undefined) {\n          props.gizmo = false;\n        }\n        // while not required, this is where all the raw power of this\n        // approach really lies since this wires properties/slots to HAX's\n        // ability to manipulate things via contextual menus\n        if (typeof props.settings !== typeof undefined) {\n          // loop through any potential settings in each of the three\n          // groupings of possible settings and validate that each setting is accurate\n          if (typeof props.settings.quick === typeof undefined) {\n            props.settings.quick = [];\n          }\n          for (let i = 0; i < props.settings.quick.length; i++) {\n            props.settings.quick[i] = this.validateSetting(\n              props.settings.quick[i]\n            );\n            // account for a bad property and remove it\n            if (!props.settings.quick[i]) {\n              props.settings.quick.splice(i, 1);\n            }\n          }\n          if (typeof props.settings.configure === typeof undefined) {\n            props.settings.configure = [];\n          }\n          for (let i = 0; i < props.settings.configure.length; i++) {\n            props.settings.configure[i] = this.validateSetting(\n              props.settings.configure[i]\n            );\n            if (!props.settings.configure[i]) {\n              props.settings.configure.splice(i, 1);\n            }\n          }\n          if (typeof props.settings.advanced === typeof undefined) {\n            props.settings.advanced = [];\n          }\n          for (let i = 0; i < props.settings.advanced.length; i++) {\n            props.settings.advanced[i] = this.validateSetting(\n              props.settings.advanced[i]\n            );\n            if (!props.settings.advanced[i]) {\n              props.settings.advanced.splice(i, 1);\n            }\n          }\n          // allow classes to be modified this way\n          props.settings.advanced.push({\n            attribute: \"class\",\n            title: \"Classes\",\n            description: \"CSS classes applied manually to the element\",\n            inputMethod: \"textfield\"\n          });\n          // allow styles to be modified this way\n          props.settings.advanced.push({\n            attribute: \"style\",\n            title: \"Styles\",\n            description: \"Custom CSS styles as applied to the element\",\n            inputMethod: \"textfield\"\n          });\n          // allow schema definitions\n          props.settings.advanced.push({\n            attribute: \"prefix\",\n            title: \"Schema: prefix\",\n            description: \"Schema prefixes\",\n            inputMethod: \"textfield\"\n          });\n          props.settings.advanced.push({\n            attribute: \"typeof\",\n            title: \"Schema: TypeOf\",\n            description: \"typeof definition for Schema usage\",\n            inputMethod: \"textfield\"\n          });\n          props.settings.advanced.push({\n            attribute: \"property\",\n            title: \"Schema: Property\",\n            description: \"typeof definition for Schema usage\",\n            inputMethod: \"textfield\"\n          });\n          props.settings.advanced.push({\n            attribute: \"resource\",\n            title: \"Schema: Resource ID\",\n            description: \"Schema resource identifier\",\n            inputMethod: \"textfield\"\n          });\n          // allow the id to be modified\n          props.settings.advanced.push({\n            attribute: \"id\",\n            title: \"ID\",\n            description: \"element ID, only set this if you know why\",\n            inputMethod: \"textfield\"\n          });\n          props.settings.advanced.push({\n            attribute: \"slot\",\n            title: \"slot\",\n            description: \"DOM slot area\",\n            inputMethod: \"textfield\"\n          });\n        }\n        // support for advanced save options\n        if (typeof props.saveOptions === typeof undefined) {\n          props.saveOptions = {\n            wipeSlot: false\n          };\n        }\n        // fire event so we know they have been set for the store to collect\n        // only fire if we haven't already so multiple elements don't keep bubbling\n\n        // @todo need the correct way of detecting this without global scope\n        // if polymer doesn't exist, then just fire anyway with a flag\n        // this would be if others are implementing hax and want to use\n        // all it's schema wired objects but not the platform as we\n        // had envisioned it\n        if (typeof Polymer === typeof undefined) {\n          let evt = new CustomEvent(\"hax-register-properties\", {\n            bubbles: true,\n            cancelable: true,\n            detail: {\n              tag: tag.toLowerCase(),\n              properties: props,\n              polymer: false\n            }\n          });\n          context.dispatchEvent(evt);\n        } else if (\n          tag !== \"\" &&\n          typeof Polymer !== typeof undefined &&\n          typeof window.HaxStore !== typeof undefined &&\n          typeof window.HaxStore.instance !== typeof undefined &&\n          window.HaxStore.instance != null &&\n          typeof window.HaxStore.instance.elementList !== typeof undefined &&\n          typeof window.HaxStore.instance.elementList[tag.toLowerCase()] ===\n            typeof undefined\n        ) {\n          let evt = new CustomEvent(\"hax-register-properties\", {\n            bubbles: true,\n            cancelable: true,\n            detail: {\n              tag: tag.toLowerCase(),\n              properties: props\n            }\n          });\n          context.dispatchEvent(evt);\n        } else if (\n          typeof Polymer !== typeof undefined &&\n          typeof window.HaxStore !== typeof undefined &&\n          typeof window.HaxStore.instance !== typeof undefined &&\n          window.HaxStore.instance != null &&\n          typeof window.HaxStore.instance.elementList !== typeof undefined &&\n          typeof window.HaxStore.instance.elementList[\n            this.tagName.toLowerCase()\n          ] === typeof undefined\n        ) {\n          let evt = new CustomEvent(\"hax-register-properties\", {\n            bubbles: true,\n            cancelable: true,\n            detail: {\n              tag: this.tagName.toLowerCase(),\n              properties: props\n            }\n          });\n          context.dispatchEvent(evt);\n        }\n        // only set these when tag hasn't been force fed\n        if (tag === \"\") {\n          this.haxProperties = props;\n        }\n      } else {\n        // especially useful during development if we implement our own API\n        // incorrectly. Don't hard brick cause it'll still more or less work\n        // but would probably default to an iframe which is less then ideal\n        // but at least wouldn't brick the AX.\n        console.log(\n          \"This is't a valid usage of hax-body-behaviors API. See hax-body-behaviors for more details on how to implement the API. Most likely your hax item just was placed in an iframe as a fallback as opposed to a custom element.\"\n        );\n      }\n    };\n    /**\n     * Validate settings object.\n     */\n    this.validateSetting = setting => {\n      // we don't have a property or slot so it's not valid.\n      if (\n        typeof setting.property === typeof undefined &&\n        typeof setting.slot === typeof undefined &&\n        typeof setting.attribute === typeof undefined\n      ) {\n        return false;\n      }\n      // ensure there's a title\n      if (typeof setting.title === typeof undefined) {\n        if (typeof setting.attribute === typeof undefined) {\n          setting.title = setting.property;\n        } else {\n          setting.title = setting.attribute;\n        }\n      }\n      // ensure there's at least an empty description\n      if (typeof setting.description === typeof undefined) {\n        setting.description = \"\";\n      }\n      // ensure there's at least an input method\n      if (typeof setting.inputMethod === typeof undefined) {\n        setting.inputMethod = \"textfield\";\n      }\n      // ensure there's at least a type\n      if (typeof setting.type === typeof undefined) {\n        setting.type = \"settings\";\n      }\n      // ensure there's at least an icon\n      if (typeof setting.icon === typeof undefined) {\n        setting.icon = \"android\";\n      }\n      // ensure there's at least an empty options area\n      if (typeof setting.options === typeof undefined) {\n        setting.options = {};\n      }\n      // ensure there's required set\n      if (typeof setting.required === typeof undefined) {\n        setting.required = false;\n      }\n      // ensure there's validation or make it anything if none set\n      if (typeof setting.validation === typeof undefined) {\n        setting.validation = \".*\";\n      }\n      // ensure there's validation or make it anything if none set\n      if (typeof setting.validationType === typeof undefined) {\n        setting.validationType = \"\";\n      }\n      return setting;\n    };\n    /**\n     * Match convention for set.\n     */\n    this.getHaxProperties = () => {\n      return this.haxProperties;\n    };\n    /**\n     * Convert haxProperties structure to a simple json-schema.\n     * This allows for complex form building systems based on this data.\n     * type is configure or advanced\n     */\n    this.getHaxJSONSchema = (type, haxProperties, target = this) => {\n      if (typeof type === typeof undefined) {\n        type = \"configure\";\n      }\n      if (typeof haxProperties === typeof undefined) {\n        haxProperties = target.haxProperties;\n      }\n      var slot = \"\";\n      let settings = haxProperties.settings[type];\n      var schema = {\n        $schema: \"http://json-schema.org/schema#\",\n        title: \"HAX \" + type + \" form schema\",\n        type: \"object\",\n        properties: {}\n      };\n      schema.properties = target._getHaxJSONSchemaProperty(settings, target);\n      // support post processing of schema in order to allow for really\n      // custom implementations that are highly dynamic in nature\n      schema = target.postProcessgetHaxJSONSchema(schema);\n      return schema;\n    };\n    /**\n     * Default postProcessgetHaxJSONSchema to be overridden.\n     */\n    this.postProcessgetHaxJSONSchema = schema => {\n      return schema;\n    };\n    /**\n     * Internal helper for getHaxJSONSchema to buiild the properties object\n     * correctly with support for recursive nesting thx to objects / arrays.\n     */\n    this._getHaxJSONSchemaProperty = (settings, target) => {\n      var props = {};\n      for (var value in settings) {\n        if (settings.hasOwnProperty(value)) {\n          if (typeof settings[value].property !== typeof undefined) {\n            props[settings[value].property] = {\n              title: settings[value].title,\n              type: target.getHaxJSONSchemaType(settings[value].inputMethod)\n            };\n            if (typeof target[settings[value].property] !== typeof undefined) {\n              props[settings[value].property].value =\n                target[settings[value].property];\n            }\n            if (settings[value].validationType == \"url\") {\n              props[settings[value].property].format = \"uri\";\n            }\n            if (settings[value].inputMethod == \"datepicker\") {\n              props[settings[value].property].format = \"date-time\";\n            }\n            if (settings[value].validation != \".*\") {\n              props[settings[value].property].pattern =\n                settings[value].validation;\n            }\n            switch (settings[value].inputMethod) {\n              case \"number\":\n                props[settings[value].property].component = {\n                  name: \"paper-input\",\n                  valueProperty: \"value\",\n                  properties: {\n                    required: settings[value].required\n                  },\n                  attributes: {\n                    type: \"number\"\n                  }\n                };\n                break;\n              case \"select\":\n                slot = \"\";\n                if (typeof settings[value].options !== typeof undefined) {\n                  for (var val in settings[value].options) {\n                    slot +=\n                      '<paper-item value=\"' +\n                      val +\n                      '\">' +\n                      settings[value].options[val] +\n                      \"</paper-item>\" +\n                      \"\\n\";\n                  }\n                }\n                props[settings[value].property].component = {\n                  name: \"dropdown-select\",\n                  valueProperty: \"value\",\n                  slot: slot,\n                  properties: {\n                    required: settings[value].required\n                  }\n                };\n                break;\n              case \"textarea\":\n                props[settings[value].property].component = {\n                  name: \"paper-textarea\",\n                  valueProperty: \"value\",\n                  properties: {\n                    required: settings[value].required\n                  },\n                  attributes: {\n                    \"auto-validate\": \"auto-validate\",\n                    \"char-counter\": \"char-counter\"\n                  }\n                };\n                break;\n              case \"code-editor\":\n                props[settings[value].property].component = {\n                  name: \"code-editor\",\n                  valueProperty: \"editorValue\",\n                  attributes: {\n                    id: \"haxcodeeditor\"\n                  },\n                  properties: {\n                    title: settings[value].title,\n                    readOnly: false,\n                    theme: \"ace/theme/monokai\",\n                    mode: \"ace/mode/html\",\n                    fontsize: \"16px\",\n                    className: \"hax-code-editor\"\n                  }\n                };\n                break;\n              case \"array\":\n                props[settings[value].property].items = {\n                  type: \"object\",\n                  properties: target._getHaxJSONSchemaProperty(\n                    settings[value].properties,\n                    target\n                  )\n                };\n                break;\n              case \"textfield\":\n                props[settings[value].property].component = {\n                  name: \"paper-input\",\n                  valueProperty: \"value\",\n                  properties: {\n                    required: settings[value].required\n                  },\n                  attributes: {\n                    \"auto-validate\": \"auto-validate\"\n                  }\n                };\n                break;\n              case \"alt\":\n                props[settings[value].property].component = {\n                  name: \"paper-input-flagged\",\n                  valueProperty: \"value\",\n                  properties: {\n                    required: settings[value].required\n                  },\n                  attributes: {\n                    \"auto-validate\": \"auto-validate\"\n                  }\n                };\n                break;\n              case \"colorpicker\":\n                props[settings[value].property].component = {\n                  name: \"paper-swatch-picker\",\n                  valueProperty: \"color\",\n                  properties: {\n                    required: settings[value].required\n                  }\n                };\n                break;\n              case \"iconpicker\":\n                props[settings[value].property].component = {\n                  name: \"paper-icon-picker\",\n                  valueProperty: \"icon\",\n                  properties: {\n                    required: settings[value].required\n                  }\n                };\n                // support options array of icons to pick from\n                if (settings[value].options.constructor === Array) {\n                  props[\n                    settings[value].property\n                  ].component.properties.iconList = settings[value].options;\n                }\n                break;\n              case \"datepicker\":\n                props[settings[value].property].component = {\n                  name: \"app-datepicker\",\n                  valueProperty: \"date\",\n                  properties: {\n                    required: settings[value].required,\n                    autoUpdateDate: true\n                  }\n                };\n                break;\n            }\n          } else if (typeof settings[value].attribute !== typeof undefined) {\n            props[settings[value].attribute] = {\n              title: settings[value].title,\n              type: target.getHaxJSONSchemaType(settings[value].inputMethod)\n            };\n            // special support for className\n            if (settings[value].attribute === \"class\") {\n              props[settings[value].attribute].value = target.className;\n            } else if (settings[value].attribute === \"style\") {\n              props[settings[value].attribute].value = target.style.cssText;\n            } else if (\n              typeof target.attributes[settings[value].attribute] !==\n              typeof undefined\n            ) {\n              props[settings[value].attribute].value = target.getAttribute(\n                settings[value].attribute\n              );\n            }\n            // special validation on uri based attributes\n            if (value == \"href\" || value == \"src\") {\n              props[settings[value].attribute].format = \"uri\";\n            }\n            if (settings[value].validationType == \"url\") {\n              props[settings[value].attribute].format = \"uri\";\n            }\n            if (settings[value].inputMethod == \"datepicker\") {\n              props[settings[value].attribute].format = \"date-time\";\n            }\n            if (settings[value].validation != \".*\") {\n              props[settings[value].attribute].pattern =\n                settings[value].validation;\n            }\n            switch (settings[value].inputMethod) {\n              case \"number\":\n                props[settings[value].attribute].component = {\n                  name: \"paper-input\",\n                  valueProperty: \"value\",\n                  properties: {\n                    required: settings[value].required\n                  },\n                  attributes: {\n                    type: \"number\"\n                  }\n                };\n                break;\n              case \"select\":\n                slot = \"\";\n                if (typeof settings[value].options !== typeof undefined) {\n                  for (var val in settings[value].options) {\n                    slot +=\n                      '<paper-item value=\"' +\n                      val +\n                      '\">' +\n                      settings[value].options[val] +\n                      \"</paper-item>\" +\n                      \"\\n\";\n                  }\n                }\n                props[settings[value].attribute].component = {\n                  name: \"dropdown-select\",\n                  valueProperty: \"value\",\n                  slot: slot,\n                  properties: {\n                    required: settings[value].required\n                  }\n                };\n                break;\n              case \"textarea\":\n                props[settings[value].attribute].component = {\n                  name: \"paper-textarea\",\n                  valueProperty: \"value\",\n                  properties: {\n                    required: settings[value].required\n                  },\n                  attributes: {\n                    \"auto-validate\": \"auto-validate\",\n                    \"char-counter\": \"char-counter\"\n                  }\n                };\n                break;\n              case \"code-editor\":\n                props[settings[value].attribute].component = {\n                  name: \"code-editor\",\n                  valueProperty: \"editorValue\",\n                  attributes: {\n                    id: \"haxcodeeditor\"\n                  },\n                  properties: {\n                    title: settings[value].title,\n                    readOnly: false,\n                    theme: \"ace/theme/monokai\",\n                    mode: \"ace/mode/html\",\n                    fontsize: \"16px\",\n                    className: \"hax-code-editor\"\n                  }\n                };\n                break;\n              case \"textfield\":\n                props[settings[value].attribute].component = {\n                  name: \"paper-input\",\n                  valueProperty: \"value\",\n                  properties: {\n                    required: settings[value].required\n                  },\n                  attributes: {\n                    \"auto-validate\": \"auto-validate\"\n                  }\n                };\n                break;\n              case \"alt\":\n                props[settings[value].attribute].component = {\n                  name: \"paper-input-flagged\",\n                  valueProperty: \"value\",\n                  properties: {\n                    required: settings[value].required\n                  },\n                  attributes: {\n                    \"auto-validate\": \"auto-validate\"\n                  }\n                };\n                break;\n              case \"colorpicker\":\n                props[settings[value].attribute].component = {\n                  name: \"paper-swatch-picker\",\n                  valueProperty: \"color\",\n                  properties: {\n                    required: settings[value].required\n                  }\n                };\n                break;\n            }\n          } else {\n            // @todo slot should support other editor types... maybe\n            props[settings[value].slot] = {\n              title: settings[value].title,\n              type: target.getHaxJSONSchemaType(settings[value].inputMethod),\n              value: \"\",\n              component: {\n                name: \"code-editor\",\n                valueProperty: \"editorValue\",\n                attributes: {\n                  id: \"haxcodeeditor\"\n                },\n                properties: {\n                  title: settings[value].title,\n                  readOnly: false,\n                  theme: \"ace/theme/monokai\",\n                  mode: \"ace/mode/html\",\n                  fontsize: \"16px\",\n                  className: \"hax-code-editor\"\n                }\n              }\n            };\n            let slot = \"\";\n            // test for slotted content values names is tricky\n            for (var i in dom(target).childNodes) {\n              // this is crazy... you know that right\n              if (typeof dom(target).childNodes[i] !== typeof undefined) {\n                if (dom(target).childNodes[i].nodeType === 1) {\n                  slot += dom(target).childNodes[i].innerHTML;\n                } else if (\n                  dom(target).childNodes[i].nodeType !== 1 &&\n                  typeof dom(target).childNodes[i].textContent !==\n                    typeof undefined &&\n                  dom(target).childNodes[i].textContent !== \"\"\n                ) {\n                  slot += dom(target).childNodes[i].textContent;\n                }\n              }\n            }\n            props[settings[value].slot].component.slot =\n              \"<template>\" + slot + \"</template>\";\n          }\n        }\n      }\n      return props;\n    };\n    /**\n     * Convert input method to schedma type\n     */\n    this.getHaxJSONSchemaType = inputMethod => {\n      var methods = this.validHAXPropertyInputMethod();\n      if (methods.includes(inputMethod)) {\n        switch (inputMethod) {\n          case \"flipboolean\":\n          case \"boolean\":\n            return \"boolean\";\n            break;\n          case \"number\":\n            return \"number\";\n            break;\n          case \"select\":\n          case \"textarea\":\n          case \"colorpicker\":\n          case \"iconpicker\":\n          case \"datepicker\":\n          case \"textfield\":\n          case \"alt\":\n            return \"string\";\n            break;\n          case \"array\":\n            return \"array\";\n            break;\n          default:\n            return \"string\";\n            break;\n        }\n      }\n    };\n    /**\n     * List valid input methods.\n     */\n    this.validHAXPropertyInputMethod = () => {\n      var methods = [\n        \"flipboolean\",\n        \"boolean\",\n        \"select\",\n        \"textfield\",\n        \"textarea\",\n        \"datepicker\",\n        \"colorpicker\",\n        \"iconpicker\",\n        \"alt\",\n        \"number\",\n        \"code-editor\",\n        \"array\"\n      ];\n      return methods;\n    };\n    /**\n     * Return a haxProperties prototype / example structure\n     */\n    this.prototypeHaxProperties = () => {\n      // example properties valid for HAX context menu.\n      let props = {\n        api: \"1\",\n        canScale: true,\n        canPosition: true,\n        canEditSource: false,\n        gizmo: {\n          title: \"Tag name\",\n          description: \"A description\",\n          icon: \"av:play-circle-filled\",\n          color: \"blue\",\n          groups: [\"Content\"],\n          handles: [\n            {\n              type: \"data\",\n              url: \"src\"\n            }\n          ],\n          meta: {\n            author: \"\"\n          }\n        },\n        settings: {\n          quick: [\n            {\n              property: \"title\",\n              title: \"Title\",\n              inputMethod: \"textfield\",\n              icon: \"android\"\n            },\n            {\n              property: \"primaryColor\",\n              title: \"Primary color\",\n              inputMethod: \"colorpicker\",\n              icon: \"color\"\n            }\n          ],\n          configure: [\n            {\n              slot: \"\",\n              title: \"Inner content\",\n              description: \"The slotted content that lives inside the tag\",\n              inputMethod: \"textfield\",\n              icon: \"android\",\n              required: true,\n              validationType: \"text\"\n            },\n            {\n              slot: \"button\",\n              title: \"Button content\",\n              description: \"The content that can override the button\",\n              inputMethod: \"textfield\",\n              icon: \"android\",\n              required: true,\n              validationType: \"text\"\n            },\n            {\n              property: \"title\",\n              title: \"Title\",\n              description: \"\",\n              inputMethod: \"textfield\",\n              icon: \"android\",\n              required: true,\n              validationType: \"text\"\n            },\n            {\n              property: \"primaryColor\",\n              title: \"Title\",\n              description: \"\",\n              inputMethod: \"textfield\",\n              icon: \"android\",\n              required: false,\n              validation: \".*\",\n              validationType: \"text\"\n            }\n          ],\n          advanced: [\n            {\n              property: \"secondaryColor\",\n              title: \"Secondary color\",\n              description:\n                \"An optional secondary color used in certain edge cases.\",\n              inputMethod: \"colorpicker\",\n              icon: \"color\"\n            },\n            {\n              property: \"endPoint\",\n              title: \"API endpoint\",\n              description:\n                \"An optional endpoint to hit and load in more data dymaically.\",\n              inputMethod: \"textfield\",\n              icon: \"android\",\n              validation: \"[a-z0-9]\",\n              validationType: \"url\"\n            }\n          ]\n        },\n        saveOptions: {\n          wipeSlot: false,\n          unsetAttributes: [\"end-point\", \"secondary-color\"]\n        }\n      };\n      return props;\n    };\n  }\n}\n\n// ensure HAXPropertiesBehaviors exists\nwindow.HAXBehaviors = window.HAXBehaviors || {};\nwindow.HAXBehaviors.PropertiesBehaviors = new HAXWiring();\n"],"names":["HAXWiring","haxProperties","canScale","canPosition","canEditSource","settings","quick","configure","advanced","wipeSlot","setHaxProperties","props","tag","context","document","_typeof","api","gizmo","i","length","_this","validateSetting","splice","push","attribute","title","description","inputMethod","saveOptions","Polymer","evt","CustomEvent","bubbles","cancelable","detail","toLowerCase","properties","polymer","dispatchEvent","window","HaxStore","instance","elementList","tagName","console","log","setting","property","slot","type","icon","options","required","validation","validationType","getHaxProperties","getHaxJSONSchema","target","schema","$schema","_getHaxJSONSchemaProperty","postProcessgetHaxJSONSchema","value","hasOwnProperty","getHaxJSONSchemaType","format","pattern","component","name","valueProperty","attributes","val","id","readOnly","theme","mode","fontsize","className","items","constructor","Array","iconList","autoUpdateDate","style","cssText","getAttribute","dom","childNodes","nodeType","innerHTML","textContent","validHAXPropertyInputMethod","includes","prototypeHaxProperties","color","groups","handles","url","meta","author","unsetAttributes","HAXBehaviors","PropertiesBehaviors"],"mappings":"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"}