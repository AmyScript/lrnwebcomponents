{"version":3,"file":"game-show-quiz.umd.js","sources":["lib/game-show-quiz-modal.js","game-show-quiz.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable.js\";\nimport \"@polymer/paper-dialog/paper-dialog.js\";\nimport \"@polymer/paper-button/paper-button.js\";\n/**\n`game-show-quiz-modal`\nModal for the quiz show\n\n@demo demo/index.html\n\n@microcopy - the mental model for this element\n - game show - a display board in the style of Jeopardy\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n      #dialog {\n        min-width: 60%;\n        top: 5%;\n        bottom: 5%;\n        margin: 0;\n        padding: 0;\n        left: 15%;\n        right: 15%;\n        position: fixed;\n        overflow: hidden;\n      }\n      .content {\n        font-size: 16px;\n        overflow: scroll;\n        min-height: 60vh;\n        height: 80vh;\n        margin: 0;\n        padding: 0;\n      }\n      h2 {\n        font-size: 32px;\n        background-color: var(--game-show-bg-color);\n        color: var(--game-show-text-color);\n        margin: 0;\n        padding: 16px;\n        text-align: center;\n      }\n      .buttons {\n        font-size: 20px;\n        font-weight: bold;\n        background-color: var(--game-show-bg-color);\n        bottom: 0;\n        position: absolute;\n        left: 0;\n        right: 0;\n      }\n      .buttons ::slotted(*) {\n        width: 50%;\n        margin: 0 auto;\n        color: var(--game-show-bg-color);\n        background-color: var(--game-show-text-color);\n      }\n      .buttons ::slotted(*[disabled]) {\n        background: #eaeaea;\n        color: #a8a8a8;\n      }\n      .buttons ::slotted(#continue) {\n        color: #004400;\n        background-color: #eeffee;\n      }\n      @media screen and (max-width: 600px) {\n        #dialog {\n          top: 0;\n          bottom: 0;\n          left: 0;\n          right: 0;\n        }\n        h2 {\n          font-size: 20px;\n        }\n        .buttons {\n          font-size: 12px;\n        }\n        .buttons ::slotted(*) {\n          width: 100%;\n        }\n        .content {\n          font-size: 12px;\n        }\n      }\n    </style>\n    <paper-dialog id=\"dialog\" modal=\"\">\n      <h2>[[title]]</h2>\n      <div class=\"content\"><slot name=\"content\"></slot></div>\n      <div class=\"buttons\"><slot name=\"buttons\"></slot></div>\n    </paper-dialog>\n  `,\n\n  is: \"game-show-quiz-modal\",\n\n  properties: {\n    /**\n     * Title\n     */\n    title: {\n      type: String\n    }\n  },\n\n  toggle: function() {\n    this.$.dialog.toggle();\n  }\n});\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport \"@polymer/app-layout/app-drawer/app-drawer.js\";\nimport \"@polymer/app-layout/app-header/app-header.js\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar.js\";\nimport \"@polymer/iron-flex-layout/iron-flex-layout.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"@polymer/iron-icon/iron-icon.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@polymer/paper-toast/paper-toast.js\";\nimport \"@polymer/iron-ajax/iron-ajax.js\";\nimport \"@polymer/iron-image/iron-image.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport \"@lrnwebcomponents/multiple-choice/multiple-choice.js\";\nimport \"@lrnwebcomponents/responsive-grid/lib/responsive-grid-row.js\";\nimport \"@lrnwebcomponents/responsive-grid/lib/responsive-grid-col.js\";\nimport \"./lib/game-show-quiz-modal.js\";\n/**\n`game-show-quiz`\nA LRN element\n\n@demo demo/index.html\n\n@microcopy - the mental model for this element\n - game show - a display board in the style of Jeopardy\n\n*/\nlet GameShowQuiz = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        --game-show-bg-color: #4285f4;\n        --game-show-text-color: #ffffff;\n      }\n      app-toolbar {\n        background-color: var(--game-show-bg-color, blue);\n        color: var(--game-show-text-color, white);\n        font-size: 24px;\n        display: flex;\n      }\n      iron-icon {\n        display: inline-block;\n      }\n\n      paper-button {\n        --paper-button-ink-color: var(--game-show-bg-color, blue);\n        text-transform: none;\n        display: block;\n      }\n      #helpbutton {\n        text-align: center;\n        padding: 8px;\n        font-size: 12px;\n        vertical-align: middle;\n        display: inline-flex;\n      }\n      paper-button + [main-title] {\n        margin-left: 24px;\n        display: inline-flex;\n      }\n      app-header {\n        color: var(--game-show-text-color, white);\n        --app-header-background-rear-layer: {\n          background-color: #ef6c00;\n        }\n      }\n      responsive-grid-row {\n        --responsive-grid-row-inner: {\n          margin-left: 0;\n          margin-right: 0;\n        }\n      }\n      responsive-grid-col {\n        --responsive-grid-col-inner: {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      #contentcontainer {\n        margin: 0 auto;\n        font-size: 16px;\n      }\n      .grid-button {\n        width: 100%;\n        height: 80px;\n        text-align: center;\n        min-width: unset;\n        padding: 0;\n        margin: 0;\n      }\n      .status-icon {\n        width: 64px;\n        height: 64px;\n        opacity: 0.25;\n        position: absolute;\n      }\n      .correct {\n        color: green;\n      }\n      .incorrect {\n        color: red;\n      }\n      .row-0 paper-button[disabled] {\n        font-weight: bold;\n        font-size: 16px;\n      }\n      @media screen and (max-width: 600px) {\n        app-toolbar {\n          font-size: 14px;\n        }\n        paper-button {\n          padding: 0;\n          margin: 0;\n          width: 16px;\n          height: 16px;\n          min-width: unset;\n        }\n        .grid-button {\n          font-size: 9px;\n        }\n        .status-icon {\n          width: 24px;\n          height: 24px;\n          opacity: 1;\n          display: inline-block;\n        }\n        .row-0 paper-button[disabled] {\n          font-weight: bold;\n          font-size: 10px;\n        }\n      }\n    </style>\n    <app-header>\n      <app-toolbar>\n        <paper-button id=\"helpbutton\" on-tap=\"directionsToggle\"\n          ><iron-icon icon=\"help\"></iron-icon> Directions</paper-button\n        >\n        <div main-title=\"\">[[title]]</div>\n      </app-toolbar>\n    </app-header>\n    <div id=\"contentcontainer\">\n      <template is=\"dom-repeat\" items=\"[[gameBoard]]\" as=\"row\">\n        <responsive-grid-row gutter=\"0\" class\\$=\"row row-[[index]]\">\n          <template is=\"dom-repeat\" items=\"[[row.cols]]\" as=\"col\">\n            <responsive-grid-col xl=\"3\" lg=\"3\" md=\"3\" sm=\"3\" xs=\"3\">\n              <paper-button\n                class=\"grid-button\"\n                raised=\"[[!col.notRaised]]\"\n                data-question-data\\$=\"[[col.question]]\"\n                data-value\\$=\"[[col.points]]\"\n                data-type\\$=\"[[col.type]]\"\n                disabled\\$=\"[[col.disabled]]\"\n                >[[col.title]]<br />[[col.points]]</paper-button\n              >\n            </responsive-grid-col>\n          </template>\n        </responsive-grid-row>\n      </template>\n      <div>\n        <h3>Scoreboard</h3>\n        <table>\n          <tbody>\n            <tr>\n              <th></th>\n              <th>Slide ID</th>\n              <th>Terms</th>\n              <th>Reading</th>\n              <th>Lecture</th>\n              <th>Bonus</th>\n              <th>Total</th>\n            </tr>\n            <tr>\n              <th>Points Attempted</th>\n              <td>[[points.slide.attempted]]</td>\n              <td>[[points.terms.attempted]]</td>\n              <td>[[points.reading.attempted]]</td>\n              <td>[[points.lecture.attempted]]</td>\n              <td>[[points.bonus.attempted]]</td>\n              <td>[[points.total.attempted]]</td>\n            </tr>\n            <tr>\n              <th>Points Earned</th>\n              <td>[[points.slide.earned]]</td>\n              <td>[[points.terms.earned]]</td>\n              <td>[[points.reading.earned]]</td>\n              <td>[[points.lecture.earned]]</td>\n              <td>[[points.bonus.earned]]</td>\n              <td>[[points.total.earned]]</td>\n            </tr>\n            <tr>\n              <th>Category Percentage</th>\n              <td>[[points.slide.percent]]</td>\n              <td>[[points.terms.percent]]</td>\n              <td>[[points.reading.percent]]</td>\n              <td>[[points.lecture.percent]]</td>\n              <td>[[points.bonus.percent]]</td>\n              <td>[[points.total.percent]]</td>\n            </tr>\n          </tbody>\n        </table>\n        <div>Points Remaining to Attempt: [[remainingAttempts]]</div>\n      </div>\n    </div>\n    <paper-toast id=\"toast\"></paper-toast>\n    <game-show-quiz-modal id=\"directions\" title=\"[[directionsTitle]]\">\n      <div slot=\"content\"><slot name=\"directions\"></slot></div>\n      <paper-button slot=\"buttons\" id=\"dismiss\" dialog-confirm=\"\" raised=\"\"\n        >Good luck!</paper-button\n      >\n    </game-show-quiz-modal>\n    <game-show-quiz-modal id=\"dialog\" title=\"[[activeQuestion.title]]\">\n      <iron-image\n        slot=\"content\"\n        style=\"min-width:100px; width:100%; min-height:25vh; height:40vh; background-color: lightgray;\"\n        sizing=\"contain\"\n        preload=\"\"\n        src\\$=\"[[activeQuestion.image]]\"\n      ></iron-image>\n      <multiple-choice\n        disabled\\$=\"[[activeQuestion.submitted]]\"\n        slot=\"content\"\n        id=\"question\"\n        hide-buttons=\"\"\n        title=\"[[activeQuestion.title]]\"\n        answers=\"[[activeQuestion.data]]\"\n      ></multiple-choice>\n      <paper-button\n        slot=\"buttons\"\n        hidden\\$=\"[[activeQuestion.submitted]]\"\n        id=\"submit\"\n        raised=\"\"\n        disabled\\$=\"[[__submitDisabled]]\"\n        >Submit answer\n        <iron-icon\n          hidden$=\"[[__submitDisabled]]\"\n          icon=\"icons:touch-app\"\n        ></iron-icon\n      ></paper-button>\n      <paper-button\n        slot=\"buttons\"\n        id=\"continue\"\n        hidden\\$=\"[[!activeQuestion.submitted]]\"\n        dialog-confirm=\"\"\n        raised=\"\"\n        >Continue <iron-icon icon=\"icons:arrow-forward\"></iron-icon\n      ></paper-button>\n    </game-show-quiz-modal>\n    <iron-ajax\n      auto=\"\"\n      id=\"gamedata\"\n      url=\"[[gameData]]\"\n      handle-as=\"json\"\n      last-response=\"{{gameBoard}}\"\n    ></iron-ajax>\n    <iron-ajax\n      id=\"questiondata\"\n      url=\"[[__questionEndpoint]]\"\n      handle-as=\"json\"\n      last-response=\"{{activeQuestion}}\"\n    ></iron-ajax>\n  `,\n\n  is: \"game-show-quiz\",\n\n  behaviors: [HAXBehaviors.PropertiesBehaviors],\n\n  properties: {\n    /**\n     * Title\n     */\n    title: {\n      type: String\n    },\n    /**\n     * Points object\n     */\n    points: {\n      type: Object,\n      value: {\n        slide: {\n          attempted: 0,\n          earned: 0,\n          percent: 0\n        },\n        terms: {\n          attempted: 0,\n          earned: 0,\n          percent: 0\n        },\n        reading: {\n          attempted: 0,\n          earned: 0,\n          percent: 0\n        },\n        lecture: {\n          attempted: 0,\n          earned: 0,\n          percent: 0\n        },\n        bonus: {\n          attempted: 0,\n          earned: 0,\n          percent: 0\n        },\n        total: {\n          attempted: 0,\n          earned: 0,\n          percent: 0\n        }\n      }\n    },\n    /**\n     * Remaining attempts for the user\n     */\n    remainingAttempts: {\n      type: Number,\n      value: 30\n    },\n    /**\n     * Title to use on the directions area.\n     */\n    directionsTitle: {\n      type: String,\n      value: \"Directions\"\n    },\n    /**\n     * Rows on the gameshow board\n     */\n    gameBoard: {\n      type: Array,\n      observer: \"_gameBoardChanged\"\n    },\n    /**\n     * URL to load data for the game.\n     */\n    gameData: {\n      type: String\n    },\n    /**\n     * Active item that is in the modal.\n     */\n    activeQuestion: {\n      type: Object\n    }\n  },\n  /**\n   * Toggle the directions to appear\n   */\n  directionsToggle: function(e) {\n    this.$.directions.toggle();\n  },\n  /**\n   * Continue button pressed.\n   */\n  continueGameTap: function(e) {\n    // destroy this so it rebuilds every time for correct target element\n    // while focusing on the next item just to place keyboard focus more\n    // logically\n    if (\n      typeof this.__activeTap !== typeof undefined &&\n      dom(this.__activeTap).parentNode.nextElementSibling.firstElementChild !=\n        null\n    ) {\n      dom(\n        this.__activeTap\n      ).parentNode.nextElementSibling.firstElementChild.firstElementChild.focus();\n      delete this.__activeTap;\n    } else if (\n      typeof this.__activeTap !== typeof undefined &&\n      dom(this.__activeTap).parentNode.nextElementSibling.firstElementChild ==\n        null\n    ) {\n      this.__activeTap.focus();\n      delete this.__activeTap;\n    }\n  },\n\n  /**\n   * Register a tap on the board.\n   */\n  registerTap: function(e) {\n    // ensure they touch the board before ability to submit\n    this.__submitDisabled = false;\n  },\n\n  /**\n   * Submit answer to see what they got.\n   */\n  submitAnswer: function(e) {\n    // flip submitted status\n    this.set(\"activeQuestion.submitted\", true);\n    this.$.continue.focus();\n    // maker this disabled on the board\n    this.__activeTap.disabled = true;\n    // start to build a status icon\n    let icon = document.createElement(\"iron-icon\");\n    icon.classList.add(\"status-icon\");\n    // update attempts for the category\n    let num =\n      parseInt(this.points[this.__activeType].attempted) +\n      parseInt(this.__activeValue);\n    this.set(\"points.\" + this.__activeType + \".attempted\", num);\n    // update the global totals for attempt\n    let total =\n      parseInt(this.points.total.attempted) + parseInt(this.__activeValue);\n    this.set(\"points.total.attempted\", total);\n    // update remaining attempts\n    this.remainingAttempts =\n      this.remainingAttempts - parseInt(this.__activeValue);\n    // if current answer is correct\n    if (this.$.question.checkAnswers()) {\n      // show correct\n      this.$.toast.show(\"Correct!\");\n      // @todo need an area for placing feedback\n      // update the earned column\n      let num =\n        parseInt(this.points[this.__activeType].earned) +\n        parseInt(this.__activeValue);\n      this.set(\"points.\" + this.__activeType + \".earned\", num);\n      // set icon to correct\n      icon.icon = \"icons:check-circle\";\n      icon.classList.add(\"correct\");\n      // update total column\n      let total =\n        parseInt(this.points.total.earned) + parseInt(this.__activeValue);\n      this.set(\"points.total.earned\", total);\n    } else {\n      // show wrong\n      this.$.toast.show(\":( You got it wrong\");\n      // @todo show feedback for wrong answer as to why\n      // set icon to incorrect\n      icon.icon = \"icons:cancel\";\n      icon.classList.add(\"incorrect\");\n    }\n    // update the percent for this column\n    let percent = (\n      (parseInt(this.points[this.__activeType].earned) /\n        parseInt(this.points[this.__activeType].attempted)) *\n      100\n    ).toFixed(1);\n    this.set(\"points.\" + this.__activeType + \".percent\", percent);\n    // update the percent\n    total = (\n      (parseInt(this.points.total.earned) /\n        parseInt(this.points.total.attempted)) *\n      100\n    ).toFixed(1);\n    this.set(\"points.total.percent\", total);\n    // append child via polymer so we can style it correctly in shadow dom\n    dom(this.__activeTap).appendChild(icon);\n  },\n\n  /**\n   * Notice that something was tapped, resolve what it was.\n   */\n  _gameBoardTap: function(e) {\n    var normalizedEvent = dom(e);\n    var local = normalizedEvent.localTarget;\n    if (local.getAttribute(\"data-question-data\") != null) {\n      this.__submitDisabled = true;\n      this.__questionEndpoint = local.getAttribute(\"data-question-data\");\n      this.__activeTap = local;\n      this.__activeType = local.getAttribute(\"data-type\");\n      this.__activeValue = local.getAttribute(\"data-value\");\n      this.$.questiondata.answers = [];\n      // @todo need to get these to reset correctly\n      setTimeout(() => {\n        this.$.questiondata.generateRequest();\n        this.$.dialog.toggle();\n      }, 100);\n    }\n  },\n\n  /**\n   * Notice the game board has changed from the backend loading it most likely.\n   */\n  _gameBoardChanged: function(newValue, oldvalue) {},\n\n  /**\n   * Reset focus on close back to the help button\n   */\n  resetFocus: function(e) {\n    this.$.helpbutton.focus();\n  },\n\n  /**\n   * Attached to the DOM, now fire.\n   */\n  attached: function() {\n    // Establish hax property binding\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Game show\",\n        description: \"Tweak the game show options\",\n        icon: \"av:play-circle-filled\",\n        color: \"grey\",\n        groups: [\"Video\", \"Media\"],\n        handles: [\n          {\n            type: \"video\",\n            url: \"source\"\n          }\n        ],\n        meta: {\n          author: \"Your organization on github\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          }\n        ],\n        advanced: []\n      }\n    };\n    this.setHaxProperties(props);\n    this.$.dismiss.addEventListener(\"tap\", this.resetFocus.bind(this));\n    this.$.contentcontainer.addEventListener(\n      \"tap\",\n      this._gameBoardTap.bind(this)\n    );\n    this.$.submit.addEventListener(\"tap\", this.submitAnswer.bind(this));\n    this.$.continue.addEventListener(\"tap\", this.continueGameTap.bind(this));\n    this.$.question.addEventListener(\"tap\", this.registerTap.bind(this));\n  },\n  /**\n   * detached life cycke\n   */\n  detached: function() {\n    this.$.dismiss.removeEventListener(\"tap\", this.resetFocus.bind(this));\n    this.$.contentcontainer.removeEventListener(\n      \"tap\",\n      this._gameBoardTap.bind(this)\n    );\n    this.$.submit.removeEventListener(\"tap\", this.submitAnswer.bind(this));\n    this.$.continue.removeEventListener(\"tap\", this.continueGameTap.bind(this));\n    this.$.question.removeEventListener(\"tap\", this.registerTap.bind(this));\n  }\n});\nexport { GameShowQuiz };\n"],"names":["_template","html","is","properties","title","type","String","toggle","$","dialog","GameShowQuiz","Polymer","behaviors","HAXBehaviors","PropertiesBehaviors","points","Object","value","slide","attempted","earned","percent","terms","reading","lecture","bonus","total","remainingAttempts","Number","directionsTitle","gameBoard","Array","observer","gameData","activeQuestion","directionsToggle","e","directions","continueGameTap","_typeof","this","__activeTap","dom","parentNode","nextElementSibling","firstElementChild","focus","registerTap","__submitDisabled","submitAnswer","set","continue","disabled","icon","document","createElement","classList","add","num","parseInt","__activeType","__activeValue","question","checkAnswers","toast","show","toFixed","appendChild","_gameBoardTap","local","localTarget","getAttribute","__questionEndpoint","questiondata","answers","setTimeout","_this","generateRequest","_gameBoardChanged","newValue","oldvalue","resetFocus","helpbutton","attached","setHaxProperties","canScale","canPosition","canEditSource","gizmo","description","color","groups","handles","url","meta","author","settings","quick","property","inputMethod","configure","advanced","dismiss","addEventListener","bind","contentcontainer","submit","detached","removeEventListener"],"mappings":"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"}