{"version":3,"file":"mtz-marked-editor.umd.js","sources":["mtz-marked-editor.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport \"@polymer/iron-form-element-behavior/iron-form-element-behavior.js\";\nimport \"@polymer/iron-validatable-behavior/iron-validatable-behavior.js\";\n/**\n`mtz-marked-editor`\nCreates a textarea with common editor logic and can be controlled by UI elements\n\n@demo demo/index.html\n*/\nlet MtzMarkedEditor = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n    </style>\n\n    <slot name=\"controls\"></slot> <slot name=\"textarea\"></slot>\n    <slot name=\"footer\"></slot>\n  `,\n\n  is: \"mtz-marked-editor\",\n\n  properties: {\n    autofocus: Boolean,\n    readonly: Boolean,\n    textareaSelector: {\n      type: String,\n      value: \"textarea\"\n    },\n    __textarea: Object\n  },\n\n  ready() {\n    this.__bindControlToEditor = this.__bindControlToEditor.bind(this);\n  },\n\n  attached() {\n    this.addEventListener(\"register-control\", this.__bindControlToEditor);\n    this.__textarea = dom(this).queryDistributedElements(\n      '[slot=\"textarea\"]'\n    )[0];\n  },\n\n  detached() {\n    this.removeEventListener(\"register-control\", this.__bindControlToEditor);\n  },\n\n  /**\n   * Returns the instance of textarea\n   * @return {HTMLTextAreaElement}\n   */\n  getTextarea() {\n    return this.__textarea;\n  },\n\n  /**\n   * Returns the number of lines in the textarea\n   * @return {Number}\n   */\n  getLines() {\n    return this.getContent().split(/(?=\\n|\\r\\n)$/gm);\n  },\n\n  /**\n   * Gets the content of the textarea\n   * @return {String}\n   */\n  getContent() {\n    if (typeof this.getTextarea() !== typeof undefined) {\n      return this.getTextarea().value;\n    }\n    return \"\";\n  },\n\n  /**\n   * Sets the content of the textarea\n   * @param {String} content\n   */\n  setContent(content) {\n    this.getTextarea().value = content;\n  },\n\n  /**\n   * Gets the selection information from the textarea and puts it into\n   * a useful object.\n   * @param {HTMLTextAreaElement} [textarea=this.getTextarea()]\n   * @return {Object} Containing selection information, start, end, text, and length.\n   */\n  getSelection(textarea = this.getTextarea()) {\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    return {\n      start,\n      end,\n      length: end - start,\n      text: textarea.value.substring(start, end)\n    };\n  },\n\n  /**\n   * Updates the selection of the textarea\n   * @param {Number} start - Starting index of selection\n   * @param {Number} end - Ending index of selection\n   * @param {HTMLTextAreaElement} [textarea=this.getTextarea()]\n   */\n  setSelection(start, end, textarea = this.getTextarea()) {\n    textarea.selectionStart = start;\n    textarea.selectionEnd = end;\n  },\n\n  /**\n   * Replaces the current selection with the passed in text\n   * @param {String} text\n   * @param {HTMLTextAreaElement} [textarea=this.getTextarea()]\n   * @param {Object} [selection=this.getSelection()]\n   */\n  replaceSelection(\n    text,\n    textarea = this.getTextarea(),\n    selection = this.getSelection()\n  ) {\n    const val = textarea.value;\n    textarea.value = `${val.substr(0, selection.start)}${text}${val.substr(\n      selection.end,\n      val.length\n    )}`;\n  },\n\n  /**\n   * Adds a reference of editor to the control\n   * @param {CustomEvent} event\n   * @private\n   */\n  __bindControlToEditor(event) {\n    event.stopPropagation();\n    // TODO: Update this in 2.0 to use updated API.\n    // dom(event).rootTarget => event.composedPath()[0]\n    dom(event).rootTarget.__editor = this;\n  }\n});\nexport { MtzMarkedEditor };\n"],"names":["MtzMarkedEditor","Polymer","_template","html","is","properties","autofocus","Boolean","readonly","textareaSelector","type","String","value","__textarea","Object","ready","__bindControlToEditor","this","bind","attached","addEventListener","dom","queryDistributedElements","detached","removeEventListener","getTextarea","getLines","getContent","split","_typeof","setContent","content","getSelection","textarea","start","selectionStart","end","selectionEnd","length","text","substring","setSelection","replaceSelection","selection","val","substr","event","stopPropagation","rootTarget","__editor"],"mappings":"svCAUIA,EAAkBC,UAAQ,CAC5BC,UAAWC,YAWXC,GAAI,oBAEJC,WAAY,CACVC,UAAWC,QACXC,SAAUD,QACVE,iBAAkB,CAChBC,KAAMC,OACNC,MAAO,YAETC,WAAYC,QAGdC,sBACOC,sBAAwBC,KAAKD,sBAAsBE,KAAKD,OAG/DE,yBACOC,iBAAiB,mBAAoBH,KAAKD,4BAC1CH,WAAaQ,MAAIJ,MAAMK,yBAC1B,qBACA,IAGJC,yBACOC,oBAAoB,mBAAoBP,KAAKD,wBAOpDS,8BACSR,KAAKJ,YAOda,2BACST,KAAKU,aAAaC,MAAM,mBAOjCD,0CACME,EAAOZ,KAAKQ,eACPR,KAAKQ,cAAcb,MAErB,IAOTkB,oBAAWC,QACJN,cAAcb,MAAQmB,GAS7BC,4BAAaC,yDAAWhB,KAAKQ,cACrBS,EAAQD,EAASE,eACjBC,EAAMH,EAASI,mBACd,CACLH,MAAAA,EACAE,IAAAA,EACAE,OAAQF,EAAMF,EACdK,KAAMN,EAASrB,MAAM4B,UAAUN,EAAOE,KAU1CK,sBAAaP,EAAOE,OAAKH,yDAAWhB,KAAKQ,cACvCQ,EAASE,eAAiBD,EAC1BD,EAASI,aAAeD,GAS1BM,0BACEH,OACAN,yDAAWhB,KAAKQ,cAChBkB,yDAAY1B,KAAKe,eAEXY,EAAMX,EAASrB,MACrBqB,EAASrB,gBAAWgC,EAAIC,OAAO,EAAGF,EAAUT,eAASK,UAAOK,EAAIC,OAC9DF,EAAUP,IACVQ,EAAIN,UASRtB,+BAAsB8B,GACpBA,EAAMC,kBAGN1B,MAAIyB,GAAOE,WAAWC,SAAWhC"}