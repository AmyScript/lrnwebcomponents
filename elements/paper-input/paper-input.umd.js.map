{"version":3,"file":"paper-input.umd.js","sources":["lib/paper-input-behavior.js","lib/paper-input-addon-behavior.js","lib/paper-input-char-counter.js","lib/paper-input-container.js","lib/paper-input-error.js","paper-input.umd.js"],"sourcesContent":["import { IronA11yKeysBehavior } from \"@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js\";\nimport { IronControlState } from \"@polymer/iron-behaviors/iron-control-state.js\";\nimport { Element } from \"@polymer/polymer/polymer-element.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport * as async from \"@polymer/polymer/lib/utils/async.js\";\nexport const PaperInputHelper = {};\nPaperInputHelper.NextLabelID = 1;\nPaperInputHelper.NextAddonID = 1;\n\nexport const PaperInputBehaviorImpl = {\n  properties: {\n    /**\n     * Fired when the input changes due to user interaction.\n     *\n     * @event change\n     */\n\n    /**\n     * The label for this input. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * `<label>`'s content and `hidden` property, e.g.\n     * `<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`\n     */\n    label: {\n      type: String\n    },\n\n    /**\n     * The value for this input. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<iron-input>`'s `bindValue`\n     * property, or the value property of your input that is `notify:true`.\n     */\n    value: {\n      notify: true,\n      type: String\n    },\n\n    /**\n     * Set to true to disable this input. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * both the `<paper-input-container>`'s and the input's `disabled` property.\n     */\n    disabled: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Returns true if the value is invalid. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to both the\n     * `<paper-input-container>`'s and the input's `invalid` property.\n     *\n     * If `autoValidate` is true, the `invalid` attribute is managed automatically,\n     * which can clobber attempts to manage it manually.\n     */\n    invalid: {\n      type: Boolean,\n      value: false,\n      notify: true\n    },\n\n    /**\n     * Set this to specify the pattern allowed by `preventInvalidInput`. If\n     * you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\n     * property.\n     */\n    allowedPattern: {\n      type: String\n    },\n\n    /**\n     * The type of the input. The supported types are `text`, `number` and `password`.\n     * If you're using PaperInputBehavior to implement your own paper-input-like element,\n     * bind this to the `<input is=\"iron-input\">`'s `type` property.\n     */\n    type: {\n      type: String\n    },\n\n    /**\n     * The datalist of the input (if any). This should match the id of an existing `<datalist>`.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `list` property.\n     */\n    list: {\n      type: String\n    },\n\n    /**\n     * A pattern to validate the `input` with. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<input is=\"iron-input\">`'s `pattern` property.\n     */\n    pattern: {\n      type: String\n    },\n\n    /**\n     * Set to true to mark the input as required. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<input is=\"iron-input\">`'s `required` property.\n     */\n    required: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * The error message to display when the input is invalid. If you're using\n     * PaperInputBehavior to implement your own paper-input-like element,\n     * bind this to the `<paper-input-error>`'s content, if using.\n     */\n    errorMessage: {\n      type: String\n    },\n\n    /**\n     * Set to true to show a character counter.\n     */\n    charCounter: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Set to true to disable the floating label. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<paper-input-container>`'s `noLabelFloat` property.\n     */\n    noLabelFloat: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Set to true to always float the label. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<paper-input-container>`'s `alwaysFloatLabel` property.\n     */\n    alwaysFloatLabel: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Set to true to auto-validate the input value. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<paper-input-container>`'s `autoValidate` property.\n     */\n    autoValidate: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Name of the validator to use. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<input is=\"iron-input\">`'s `validator` property.\n     */\n    validator: {\n      type: String\n    },\n\n    // HTMLInputElement attributes for binding if needed\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autocomplete` property.\n     */\n    autocomplete: {\n      type: String,\n      value: \"off\"\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autofocus` property.\n     */\n    autofocus: {\n      type: Boolean,\n      observer: \"_autofocusChanged\"\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `inputmode` property.\n     */\n    inputmode: {\n      type: String\n    },\n\n    /**\n     * The minimum length of the input value.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `minlength` property.\n     */\n    minlength: {\n      type: Number\n    },\n\n    /**\n     * The maximum length of the input value.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `maxlength` property.\n     */\n    maxlength: {\n      type: Number\n    },\n\n    /**\n     * The minimum (numeric or date-time) input value.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `min` property.\n     */\n    min: {\n      type: String\n    },\n\n    /**\n     * The maximum (numeric or date-time) input value.\n     * Can be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `max` property.\n     */\n    max: {\n      type: String\n    },\n\n    /**\n     * Limits the numeric or date-time increments.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `step` property.\n     */\n    step: {\n      type: String\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `name` property.\n     */\n    name: {\n      type: String\n    },\n\n    /**\n     * A placeholder string in addition to the label. If this is set, the label will always float.\n     */\n    placeholder: {\n      type: String,\n      // need to set a default so _computeAlwaysFloatLabel is run\n      value: \"\"\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `readonly` property.\n     */\n    readonly: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `size` property.\n     */\n    size: {\n      type: Number\n    },\n\n    // Nonstandard attributes for binding if needed\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autocapitalize` property.\n     */\n    autocapitalize: {\n      type: String,\n      value: \"none\"\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autocorrect` property.\n     */\n    autocorrect: {\n      type: String,\n      value: \"off\"\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autosave` property,\n     * used with type=search.\n     */\n    autosave: {\n      type: String\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `results` property,\n     * used with type=search.\n     */\n    results: {\n      type: Number\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `accept` property,\n     * used with type=file.\n     */\n    accept: {\n      type: String\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\n     * used with type=file.\n     */\n    multiple: {\n      type: Boolean\n    },\n\n    _ariaDescribedBy: {\n      type: String,\n      value: \"\"\n    },\n\n    _ariaLabelledBy: {\n      type: String,\n      value: \"\"\n    }\n  },\n\n  listeners: {\n    \"addon-attached\": \"_onAddonAttached\"\n  },\n\n  keyBindings: {\n    \"shift+tab:keydown\": \"_onShiftTabDown\"\n  },\n\n  hostAttributes: {\n    tabindex: 0\n  },\n\n  /**\n   * Returns a reference to the input element.\n   */\n  get inputElement() {\n    return this.$.input;\n  },\n\n  /**\n   * Returns a reference to the focusable element.\n   */\n  get _focusableElement() {\n    return this.inputElement;\n  },\n\n  created: function() {\n    // These types have some default placeholder text; overlapping\n    // the label on top of it looks terrible. Auto-float the label in this case.\n    this._typesThatHaveText = [\n      \"date\",\n      \"datetime\",\n      \"datetime-local\",\n      \"month\",\n      \"time\",\n      \"week\",\n      \"file\"\n    ];\n  },\n\n  attached: function() {\n    this._updateAriaLabelledBy();\n\n    // In the 2.0 version of the element, this is handled in `onIronInputReady`,\n    // i.e. after the native input has finished distributing. In the 1.0 version,\n    // the input is in the shadow tree, so it's already available.\n    if (\n      !Element &&\n      this.inputElement &&\n      this._typesThatHaveText.indexOf(this.inputElement.type) !== -1\n    ) {\n      this.alwaysFloatLabel = true;\n    }\n  },\n\n  _appendStringWithSpace: function(str, more) {\n    if (str) {\n      str = str + \" \" + more;\n    } else {\n      str = more;\n    }\n    return str;\n  },\n\n  _onAddonAttached: function(event) {\n    var target = dom(event).rootTarget;\n    if (target.id) {\n      this._ariaDescribedBy = this._appendStringWithSpace(\n        this._ariaDescribedBy,\n        target.id\n      );\n    } else {\n      var id = \"paper-input-add-on-\" + PaperInputHelper.NextAddonID++;\n      target.id = id;\n      this._ariaDescribedBy = this._appendStringWithSpace(\n        this._ariaDescribedBy,\n        id\n      );\n    }\n  },\n\n  /**\n   * Validates the input element and sets an error style if needed.\n   *\n   * @return {boolean}\n   */\n  validate: function() {\n    return this.inputElement.validate();\n  },\n\n  /**\n   * Forward focus to inputElement. Overriden from IronControlState.\n   */\n  _focusBlurHandler: function(event) {\n    IronControlState._focusBlurHandler.call(this, event);\n\n    // Forward the focus to the nested input.\n    if (this.focused && !this._shiftTabPressed && this._focusableElement) {\n      this._focusableElement.focus();\n    }\n  },\n\n  /**\n   * Handler that is called when a shift+tab keypress is detected by the menu.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onShiftTabDown: function(event) {\n    var oldTabIndex = this.getAttribute(\"tabindex\");\n    this._shiftTabPressed = true;\n    this.setAttribute(\"tabindex\", \"-1\");\n    async.microTask.run(() => {\n      this.setAttribute(\"tabindex\", oldTabIndex);\n      this._shiftTabPressed = false;\n    });\n  },\n\n  /**\n   * If `autoValidate` is true, then validates the element.\n   */\n  _handleAutoValidate: function() {\n    if (this.autoValidate) this.validate();\n  },\n\n  /**\n   * Restores the cursor to its original position after updating the value.\n   * @param {string} newValue The value that should be saved.\n   */\n  updateValueAndPreserveCaret: function(newValue) {\n    // Not all elements might have selection, and even if they have the\n    // right properties, accessing them might throw an exception (like for\n    // <input type=number>)\n    try {\n      var start = this.inputElement.selectionStart;\n      this.value = newValue;\n\n      // The cursor automatically jumps to the end after re-setting the value,\n      // so restore it to its original position.\n      this.inputElement.selectionStart = start;\n      this.inputElement.selectionEnd = start;\n    } catch (e) {\n      // Just set the value and give up on the caret.\n      this.value = newValue;\n    }\n  },\n\n  _computeAlwaysFloatLabel: function(alwaysFloatLabel, placeholder) {\n    return placeholder || alwaysFloatLabel;\n  },\n\n  _updateAriaLabelledBy: function() {\n    var label = dom(this.root).querySelector(\"label\");\n    if (!label) {\n      this._ariaLabelledBy = \"\";\n      return;\n    }\n    var labelledBy;\n    if (label.id) {\n      labelledBy = label.id;\n    } else {\n      labelledBy = \"paper-input-label-\" + PaperInputHelper.NextLabelID++;\n      label.id = labelledBy;\n    }\n    this._ariaLabelledBy = labelledBy;\n  },\n\n  _onChange: function(event) {\n    // In the Shadow DOM, the `change` event is not leaked into the\n    // ancestor tree, so we must do this manually.\n    // See https://w3c.github.io/webcomponents/spec/shadow/#events-that-are-not-leaked-into-ancestor-trees.\n    if (this.shadowRoot) {\n      this.fire(\n        event.type,\n        { sourceEvent: event },\n        {\n          node: this,\n          bubbles: event.bubbles,\n          cancelable: event.cancelable\n        }\n      );\n    }\n  },\n\n  _autofocusChanged: function() {\n    // Firefox doesn't respect the autofocus attribute if it's applied after\n    // the page is loaded (Chrome/WebKit do respect it), preventing an\n    // autofocus attribute specified in markup from taking effect when the\n    // element is upgraded. As a workaround, if the autofocus property is set,\n    // and the focus hasn't already been moved elsewhere, we take focus.\n    if (this.autofocus && this._focusableElement) {\n      // In IE 11, the default document.activeElement can be the page's\n      // outermost html element, but there are also cases (under the\n      // polyfill?) in which the activeElement is not a real HTMLElement, but\n      // just a plain object. We identify the latter case as having no valid\n      // activeElement.\n      var activeElement = document.activeElement;\n      var isActiveElementValid = activeElement instanceof HTMLElement;\n\n      // Has some other element has already taken the focus?\n      var isSomeElementActive =\n        isActiveElementValid &&\n        activeElement !== document.body &&\n        activeElement !== document.documentElement; /* IE 11 */\n      if (!isSomeElementActive) {\n        // No specific element has taken the focus yet, so we can take it.\n        this._focusableElement.focus();\n      }\n    }\n  }\n};\n\nexport const PaperInputBehavior = [\n  IronControlState,\n  IronA11yKeysBehavior,\n  PaperInputBehaviorImpl\n];\n","import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { flush } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\n\nexport const PaperInputAddonBehavior = {\n  attached: function() {\n    // Workaround for https://github.com/webcomponents/shadydom/issues/96\n    flush();\n    this.fire(\"addon-attached\");\n  },\n\n  /**\n   * The function called by `<paper-input-container>` when the input value or validity changes.\n   * @param {{\n   *   inputElement: (Element|undefined),\n   *   value: (string|undefined),\n   *   invalid: boolean\n   * }} state -\n   *     inputElement: The input element.\n   *     value: The input value.\n   *     invalid: True if the input value is invalid.\n   */\n  update: function(state) {}\n};\n","import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport \"@polymer/paper-styles/typography.js\";\nimport { PaperInputAddonBehavior } from \"./paper-input-addon-behavior.js\";\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n`<paper-input-char-counter>` is a character counter for use with `<paper-input-container>`. It\nshows the number of characters entered in the input and the max length if it is specified.\n\n    <paper-input-container>\n      <input maxlength=\"20\">\n      <paper-input-char-counter></paper-input-char-counter>\n    </paper-input-container>\n\n### Styling\n\nThe following mixin is available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-char-counter` | Mixin applied to the element | `{}`\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        float: right;\n\n        @apply --paper-font-caption;\n        @apply --paper-input-char-counter;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host-context([dir=\"rtl\"]) {\n        float: left;\n      }\n    </style>\n\n    <span>[[_charCounterStr]]</span>\n`,\n\n  is: \"paper-input-char-counter\",\n\n  behaviors: [PaperInputAddonBehavior],\n\n  properties: {\n    _charCounterStr: {\n      type: String,\n      value: \"0\"\n    }\n  },\n\n  /**\n   * This overrides the update function in PaperInputAddonBehavior.\n   * @param {{\n   *   inputElement: (Element|undefined),\n   *   value: (string|undefined),\n   *   invalid: boolean\n   * }} state -\n   *     inputElement: The input element.\n   *     value: The input value.\n   *     invalid: True if the input value is invalid.\n   */\n  update: function(state) {\n    if (!state.inputElement) {\n      return;\n    }\n\n    state.value = state.value || \"\";\n\n    var counter = state.value.toString().length.toString();\n\n    if (state.inputElement.hasAttribute(\"maxlength\")) {\n      counter += \"/\" + state.inputElement.getAttribute(\"maxlength\");\n    }\n\n    this._charCounterStr = counter;\n  }\n});\n","import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport \"@polymer/iron-flex-layout/iron-flex-layout.js\";\nimport \"@polymer/paper-styles/default-theme.js\";\nimport \"@polymer/paper-styles/typography.js\";\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n`<paper-input-container>` is a container for a `<label>`, an `<iron-input>` or\n`<textarea>` and optional add-on elements such as an error message or character\ncounter, used to implement Material Design text fields.\n\nFor example:\n\n    <paper-input-container>\n      <label slot=\"label\">Your name</label>\n      <iron-input slot=\"input\">\n        <input>\n      </iron-input>\n      // In Polymer 1.0, you would use `<input is=\"iron-input\" slot=\"input\">` instead of the above.\n    </paper-input-container>\n\nYou can style the nested <input> however you want; if you want it to look like a\nMaterial Design input, you can style it with the --paper-input-container-shared-input-style mixin.\n\nDo not wrap `<paper-input-container>` around elements that already include it, such as `<paper-input>`.\nDoing so may cause events to bounce infinitely between the container and its contained element.\n\n### Listening for input changes\n\nBy default, it listens for changes on the `bind-value` attribute on its children nodes and perform\ntasks such as auto-validating and label styling when the `bind-value` changes. You can configure\nthe attribute it listens to with the `attr-for-value` attribute.\n\n### Using a custom input element\n\nYou can use a custom input element in a `<paper-input-container>`, for example to implement a\ncompound input field like a social security number input. The custom input element should have the\n`paper-input-input` class, have a `notify:true` value property and optionally implements\n`IronValidatableBehavior` if it is validatable.\n\n    <paper-input-container attr-for-value=\"ssn-value\">\n      <label slot=\"label\">Social security number</label>\n      <ssn-input slot=\"input\" class=\"paper-input-input\"></ssn-input>\n    </paper-input-container>\n\n\nIf you're using a `<paper-input-container>` imperatively, it's important to make sure\nthat you attach its children (the `iron-input` and the optional `label`) before you\nattach the `<paper-input-container>` itself, so that it can be set up correctly.\n\n### Validation\n\nIf the `auto-validate` attribute is set, the input container will validate the input and update\nthe container styling when the input value changes.\n\n### Add-ons\n\nAdd-ons are child elements of a `<paper-input-container>` with the `add-on` attribute and\nimplements the `PaperInputAddonBehavior` behavior. They are notified when the input value\nor validity changes, and may implement functionality such as error messages or character counters.\nThey appear at the bottom of the input.\n\n### Prefixes and suffixes\nThese are child elements of a `<paper-input-container>` with the `prefix`\nor `suffix` attribute, and are displayed inline with the input, before or after.\n\n    <paper-input-container>\n      <div slot=\"prefix\">$</div>\n      <label slot=\"label\">Total</label>\n      <iron-input slot=\"input\">\n        <input>\n      </iron-input>\n      // In Polymer 1.0, you would use `<input is=\"iron-input\" slot=\"input\">` instead of the above.\n      <paper-icon-button slot=\"suffix\" icon=\"clear\"></paper-icon-button>\n    </paper-input-container>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-color` | Label and underline color when the input is not focused | `--secondary-text-color`\n`--paper-input-container-focus-color` | Label and underline color when the input is focused | `--primary-color`\n`--paper-input-container-invalid-color` | Label and underline color when the input is is invalid | `--error-color`\n`--paper-input-container-input-color` | Input foreground color | `--primary-text-color`\n`--paper-input-container` | Mixin applied to the container | `{}`\n`--paper-input-container-disabled` | Mixin applied to the container when it's disabled | `{}`\n`--paper-input-container-label` | Mixin applied to the label | `{}`\n`--paper-input-container-label-focus` | Mixin applied to the label when the input is focused | `{}`\n`--paper-input-container-label-floating` | Mixin applied to the label when floating | `{}`\n`--paper-input-container-input` | Mixin applied to the input | `{}`\n`--paper-input-container-input-focus` | Mixin applied to the input when focused | `{}`\n`--paper-input-container-input-invalid` | Mixin applied to the input when invalid | `{}`\n`--paper-input-container-input-webkit-spinner` | Mixin applied to the webkit spinner | `{}`\n`--paper-input-container-input-webkit-clear` | Mixin applied to the webkit clear button | `{}`\n`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer clear button | `{}`\n`--paper-input-container-underline` | Mixin applied to the underline | `{}`\n`--paper-input-container-underline-focus` | Mixin applied to the underline when the input is focused | `{}`\n`--paper-input-container-underline-disabled` | Mixin applied to the underline when the input is disabled | `{}`\n`--paper-input-prefix` | Mixin applied to the input prefix | `{}`\n`--paper-input-suffix` | Mixin applied to the input suffix | `{}`\n\nThis element is `display:block` by default, but you can set the `inline` attribute to make it\n`display:inline-block`.\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        padding: 8px 0;\n\n        --paper-input-container-shared-input-style: {\n          position: relative; /* to make a stacking context */\n          outline: none;\n          box-shadow: none;\n          padding: 0;\n          width: 100%;\n          max-width: 100%;\n          background: transparent;\n          border: none;\n          color: var(--paper-input-container-input-color, var(--primary-text-color));\n          -webkit-appearance: none;\n          text-align: inherit;\n          vertical-align: bottom;\n\n          @apply --paper-font-subhead;\n        };\n\n        @apply --paper-input-container;\n      }\n\n      :host([inline]) {\n        display: inline-block;\n      }\n\n      :host([disabled]) {\n        pointer-events: none;\n        opacity: 0.33;\n\n        @apply --paper-input-container-disabled;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      [hidden] {\n        display: none !important;\n      }\n\n      .floated-label-placeholder {\n        @apply --paper-font-caption;\n      }\n\n      .underline {\n        height: 2px;\n        position: relative;\n      }\n\n      .focused-line {\n        @apply --layout-fit;\n        border-bottom: 2px solid var(--paper-input-container-focus-color, var(--primary-color));\n\n        -webkit-transform-origin: center center;\n        transform-origin: center center;\n        -webkit-transform: scale3d(0,1,1);\n        transform: scale3d(0,1,1);\n\n        @apply --paper-input-container-underline-focus;\n      }\n\n      .underline.is-highlighted .focused-line {\n        -webkit-transform: none;\n        transform: none;\n        -webkit-transition: -webkit-transform 0.25s;\n        transition: transform 0.25s;\n\n        @apply --paper-transition-easing;\n      }\n\n      .underline.is-invalid .focused-line {\n        border-color: var(--paper-input-container-invalid-color, var(--error-color));\n        -webkit-transform: none;\n        transform: none;\n        -webkit-transition: -webkit-transform 0.25s;\n        transition: transform 0.25s;\n\n        @apply --paper-transition-easing;\n      }\n\n      .unfocused-line {\n        @apply --layout-fit;\n        border-bottom: 1px solid var(--paper-input-container-color, var(--secondary-text-color));\n        @apply --paper-input-container-underline;\n      }\n\n      :host([disabled]) .unfocused-line {\n        border-bottom: 1px dashed;\n        border-color: var(--paper-input-container-color, var(--secondary-text-color));\n        @apply --paper-input-container-underline-disabled;\n      }\n\n      .input-wrapper {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        position: relative;\n      }\n\n      .input-content {\n        @apply --layout-flex-auto;\n        @apply --layout-relative;\n        max-width: 100%;\n      }\n\n      .input-content ::slotted(label),\n      .input-content ::slotted(.paper-input-label) {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n        width: 100%;\n        font: inherit;\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n        -webkit-transition: -webkit-transform 0.25s, width 0.25s;\n        transition: transform 0.25s, width 0.25s;\n        -webkit-transform-origin: left top;\n        transform-origin: left top;\n\n        @apply --paper-font-common-nowrap;\n        @apply --paper-font-subhead;\n        @apply --paper-input-container-label;\n        @apply --paper-transition-easing;\n      }\n\n      .input-content.label-is-floating ::slotted(label),\n      .input-content.label-is-floating ::slotted(.paper-input-label) {\n        -webkit-transform: translateY(-75%) scale(0.75);\n        transform: translateY(-75%) scale(0.75);\n\n        /* Since we scale to 75/100 of the size, we actually have 100/75 of the\n        original space now available */\n        width: 133%;\n\n        @apply --paper-input-container-label-floating;\n      }\n\n      :host-context([dir=\"rtl\"]) .input-content.label-is-floating ::slotted(label),\n      :host-context([dir=\"rtl\"]) .input-content.label-is-floating ::slotted(.paper-input-label) {\n        /* TODO(noms): Figure out why leaving the width at 133% before the animation\n         * actually makes\n         * it wider on the right side, not left side, as you would expect in RTL */\n        width: 100%;\n        -webkit-transform-origin: right top;\n        transform-origin: right top;\n      }\n\n      .input-content.label-is-highlighted ::slotted(label),\n      .input-content.label-is-highlighted ::slotted(.paper-input-label) {\n        color: var(--paper-input-container-focus-color, var(--primary-color));\n\n        @apply --paper-input-container-label-focus;\n      }\n\n      .input-content.is-invalid ::slotted(label),\n      .input-content.is-invalid ::slotted(.paper-input-label) {\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n      }\n\n      .input-content.label-is-hidden ::slotted(label),\n      .input-content.label-is-hidden ::slotted(.paper-input-label) {\n        visibility: hidden;\n      }\n\n      .input-content ::slotted(iron-input) {\n        @apply --paper-input-container-shared-input-style;\n      }\n      \n      .input-content ::slotted(input),\n      .input-content ::slotted(textarea),\n      .input-content ::slotted(iron-autogrow-textarea),\n      .input-content ::slotted(.paper-input-input) {\n        @apply --paper-input-container-shared-input-style;\n        @apply --paper-input-container-input;\n      }\n\n      .input-content ::slotted(input)::-webkit-outer-spin-button,\n      .input-content ::slotted(input)::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n      \n      .input-content.focused ::slotted(input),\n      .input-content.focused ::slotted(textarea),\n      .input-content.focused ::slotted(iron-autogrow-textarea),\n      .input-content.focused ::slotted(.paper-input-input) {\n        @apply --paper-input-container-input-focus;\n      }\n\n      .input-content.is-invalid ::slotted(input),\n      .input-content.is-invalid ::slotted(textarea),\n      .input-content.is-invalid ::slotted(iron-autogrow-textarea),\n      .input-content.is-invalid ::slotted(.paper-input-input) {\n        @apply --paper-input-container-input-invalid;\n      }\n      \n      .prefix ::slotted(*) {\n        display: inline-block;\n        @apply --paper-font-subhead;\n        @apply --layout-flex-none;\n        @apply --paper-input-prefix;\n      }\n\n      .suffix ::slotted(*) {\n        display: inline-block;\n        @apply --paper-font-subhead;\n        @apply --layout-flex-none;\n\n        @apply --paper-input-suffix;\n      }\n\n      /* Firefox sets a min-width on the input, which can cause layout issues */\n      .input-content ::slotted(input) {\n        min-width: 0;\n      }\n\n      .input-content ::slotted(textarea) {\n        resize: none;\n      }\n\n      .add-on-content {\n        position: relative;\n      }\n\n      .add-on-content.is-invalid ::slotted(*) {\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n      }\n\n      .add-on-content.is-highlighted ::slotted(*) {\n        color: var(--paper-input-container-focus-color, var(--primary-color));\n      }\n    </style>\n\n    <div class=\"floated-label-placeholder\" aria-hidden=\"true\" hidden=\"[[noLabelFloat]]\">&nbsp;</div>\n\n    <div class=\"input-wrapper\">\n      <span class=\"prefix\"><slot name=\"prefix\"></slot></span>\n\n      <div class\\$=\"[[_computeInputContentClass(noLabelFloat,alwaysFloatLabel,focused,invalid,_inputHasContent)]]\" id=\"labelAndInputContainer\">\n        <slot name=\"label\"></slot>\n        <slot name=\"input\"></slot>\n      </div>\n\n      <span class=\"suffix\"><slot name=\"suffix\"></slot></span>\n    </div>\n\n    <div class\\$=\"[[_computeUnderlineClass(focused,invalid)]]\">\n      <div class=\"unfocused-line\"></div>\n      <div class=\"focused-line\"></div>\n    </div>\n\n    <div class\\$=\"[[_computeAddOnContentClass(focused,invalid)]]\">\n      <slot name=\"add-on\"></slot>\n    </div>\n`,\n\n  is: \"paper-input-container\",\n\n  properties: {\n    /**\n     * Set to true to disable the floating label. The label disappears when the input value is\n     * not null.\n     */\n    noLabelFloat: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Set to true to always float the floating label.\n     */\n    alwaysFloatLabel: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * The attribute to listen for value changes on.\n     */\n    attrForValue: {\n      type: String,\n      value: \"bind-value\"\n    },\n\n    /**\n     * Set to true to auto-validate the input value when it changes.\n     */\n    autoValidate: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * True if the input is invalid. This property is set automatically when the input value\n     * changes if auto-validating, or when the `iron-input-validate` event is heard from a child.\n     */\n    invalid: {\n      observer: \"_invalidChanged\",\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * True if the input has focus.\n     */\n    focused: {\n      readOnly: true,\n      type: Boolean,\n      value: false,\n      notify: true\n    },\n\n    _addons: {\n      type: Array\n      // do not set a default value here intentionally - it will be initialized lazily when a\n      // distributed child is attached, which may occur before configuration for this element\n      // in polyfill.\n    },\n\n    _inputHasContent: {\n      type: Boolean,\n      value: false\n    },\n\n    _inputSelector: {\n      type: String,\n      value: \"input,iron-input,textarea,.paper-input-input\"\n    },\n\n    _boundOnFocus: {\n      type: Function,\n      value: function() {\n        return this._onFocus.bind(this);\n      }\n    },\n\n    _boundOnBlur: {\n      type: Function,\n      value: function() {\n        return this._onBlur.bind(this);\n      }\n    },\n\n    _boundOnInput: {\n      type: Function,\n      value: function() {\n        return this._onInput.bind(this);\n      }\n    },\n\n    _boundValueChanged: {\n      type: Function,\n      value: function() {\n        return this._onValueChanged.bind(this);\n      }\n    }\n  },\n\n  listeners: {\n    \"addon-attached\": \"_onAddonAttached\",\n    \"iron-input-validate\": \"_onIronInputValidate\"\n  },\n\n  get _valueChangedEvent() {\n    return this.attrForValue + \"-changed\";\n  },\n\n  get _propertyForValue() {\n    return dashToCamelCase(this.attrForValue);\n  },\n\n  get _inputElement() {\n    return dom(this).querySelector(this._inputSelector);\n  },\n\n  get _inputElementValue() {\n    return (\n      this._inputElement[this._propertyForValue] || this._inputElement.value\n    );\n  },\n\n  ready: function() {\n    if (!this._addons) {\n      this._addons = [];\n    }\n    this.addEventListener(\"focus\", this._boundOnFocus, true);\n    this.addEventListener(\"blur\", this._boundOnBlur, true);\n  },\n\n  attached: function() {\n    if (this.attrForValue) {\n      this._inputElement.addEventListener(\n        this._valueChangedEvent,\n        this._boundValueChanged\n      );\n    } else {\n      this.addEventListener(\"input\", this._onInput);\n    }\n\n    // Only validate when attached if the input already has a value.\n    if (this._inputElementValue && this._inputElementValue != \"\") {\n      this._handleValueAndAutoValidate(this._inputElement);\n    } else {\n      this._handleValue(this._inputElement);\n    }\n  },\n\n  _onAddonAttached: function(event) {\n    if (!this._addons) {\n      this._addons = [];\n    }\n    var target = event.target;\n    if (this._addons.indexOf(target) === -1) {\n      this._addons.push(target);\n      if (this.isAttached) {\n        this._handleValue(this._inputElement);\n      }\n    }\n  },\n\n  _onFocus: function() {\n    this._setFocused(true);\n  },\n\n  _onBlur: function() {\n    this._setFocused(false);\n    this._handleValueAndAutoValidate(this._inputElement);\n  },\n\n  _onInput: function(event) {\n    this._handleValueAndAutoValidate(event.target);\n  },\n\n  _onValueChanged: function(event) {\n    var input = event.target;\n\n    // Problem: if the input is required but has no text entered, we should\n    // only validate it on blur (so that an empty form doesn't come up red\n    // immediately; however, in this handler, we don't know whether this is\n    // the booting up value or a value in the future. I am assuming that the\n    // case  we care about manifests itself when the value is undefined.\n    // If this causes future problems, we need to do something like track whether\n    // the iron-input-ready event has fired, and this handler came before that.\n\n    if (input.value === undefined) {\n      return;\n    }\n\n    this._handleValueAndAutoValidate(event.target);\n  },\n\n  _handleValue: function(inputElement) {\n    var value = this._inputElementValue;\n\n    // type=\"number\" hack needed because this.value is empty until it's valid\n    if (\n      value ||\n      value === 0 ||\n      (inputElement.type === \"number\" && !inputElement.checkValidity())\n    ) {\n      this._inputHasContent = true;\n    } else {\n      this._inputHasContent = false;\n    }\n\n    this.updateAddons({\n      inputElement: inputElement,\n      value: value,\n      invalid: this.invalid\n    });\n  },\n\n  _handleValueAndAutoValidate: function(inputElement) {\n    if (this.autoValidate && inputElement) {\n      var valid;\n\n      if (inputElement.validate) {\n        valid = inputElement.validate(this._inputElementValue);\n      } else {\n        valid = inputElement.checkValidity();\n      }\n      this.invalid = !valid;\n    }\n\n    // Call this last to notify the add-ons.\n    this._handleValue(inputElement);\n  },\n\n  _onIronInputValidate: function(event) {\n    this.invalid = this._inputElement.invalid;\n  },\n\n  _invalidChanged: function() {\n    if (this._addons) {\n      this.updateAddons({ invalid: this.invalid });\n    }\n  },\n\n  /**\n   * Call this to update the state of add-ons.\n   * @param {Object} state Add-on state.\n   */\n  updateAddons: function(state) {\n    for (var addon, index = 0; (addon = this._addons[index]); index++) {\n      addon.update(state);\n    }\n  },\n\n  _computeInputContentClass: function(\n    noLabelFloat,\n    alwaysFloatLabel,\n    focused,\n    invalid,\n    _inputHasContent\n  ) {\n    var cls = \"input-content\";\n    if (!noLabelFloat) {\n      var label = this.querySelector(\"label\");\n\n      if (alwaysFloatLabel || _inputHasContent) {\n        cls += \" label-is-floating\";\n        // If the label is floating, ignore any offsets that may have been\n        // applied from a prefix element.\n        this.$.labelAndInputContainer.style.position = \"static\";\n\n        if (invalid) {\n          cls += \" is-invalid\";\n        } else if (focused) {\n          cls += \" label-is-highlighted\";\n        }\n      } else {\n        // When the label is not floating, it should overlap the input element.\n        if (label) {\n          this.$.labelAndInputContainer.style.position = \"relative\";\n        }\n        if (invalid) {\n          cls += \" is-invalid\";\n        }\n      }\n    } else {\n      if (_inputHasContent) {\n        cls += \" label-is-hidden\";\n      }\n      if (invalid) {\n        cls += \" is-invalid\";\n      }\n    }\n    if (focused) {\n      cls += \" focused\";\n    }\n    return cls;\n  },\n\n  _computeUnderlineClass: function(focused, invalid) {\n    var cls = \"underline\";\n    if (invalid) {\n      cls += \" is-invalid\";\n    } else if (focused) {\n      cls += \" is-highlighted\";\n    }\n    return cls;\n  },\n\n  _computeAddOnContentClass: function(focused, invalid) {\n    var cls = \"add-on-content\";\n    if (invalid) {\n      cls += \" is-invalid\";\n    } else if (focused) {\n      cls += \" is-highlighted\";\n    }\n    return cls;\n  }\n});\n","import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport \"@polymer/paper-styles/default-theme.js\";\nimport \"@polymer/paper-styles/typography.js\";\nimport { PaperInputAddonBehavior } from \"./paper-input-addon-behavior.js\";\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n`<paper-input-error>` is an error message for use with `<paper-input-container>`. The error is\ndisplayed when the `<paper-input-container>` is `invalid`.\n\n    <paper-input-container>\n      <input pattern=\"[0-9]*\">\n      <paper-input-error slot=\"add-on\">Only numbers are allowed!</paper-input-error>\n    </paper-input-container>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-invalid-color` | The foreground color of the error | `--error-color`\n`--paper-input-error`                   | Mixin applied to the error        | `{}`\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        visibility: hidden;\n\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n\n        @apply --paper-font-caption;\n        @apply --paper-input-error;\n        position: absolute;\n        left:0;\n        right:0;\n      }\n\n      :host([invalid]) {\n        visibility: visible;\n      };\n    </style>\n\n    <slot></slot>\n`,\n\n  is: \"paper-input-error\",\n\n  behaviors: [PaperInputAddonBehavior],\n\n  properties: {\n    /**\n     * True if the error is showing.\n     */\n    invalid: {\n      readOnly: true,\n      reflectToAttribute: true,\n      type: Boolean\n    }\n  },\n\n  /**\n   * This overrides the update function in PaperInputAddonBehavior.\n   * @param {{\n   *   inputElement: (Element|undefined),\n   *   value: (string|undefined),\n   *   invalid: boolean\n   * }} state -\n   *     inputElement: The input element.\n   *     value: The input value.\n   *     invalid: True if the input value is invalid.\n   */\n  update: function(state) {\n    this._setInvalid(state.invalid);\n  }\n});\n","import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { IronFormElementBehavior } from \"@polymer/iron-form-element-behavior/iron-form-element-behavior.js\";\nimport \"@polymer/iron-input/iron-input.js\";\nimport { PaperInputBehavior } from \"./lib/paper-input-behavior.js\";\nimport \"./lib/paper-input-char-counter.js\";\nimport \"./lib/paper-input-container.js\";\nimport \"./lib/paper-input-error.js\";\nimport { DomModule } from \"@polymer/polymer/lib/elements/dom-module.js\";\nimport { Element } from \"@polymer/polymer/polymer-element.js\";\nvar $_documentContainer = document.createElement(\"div\");\n$_documentContainer.setAttribute(\"style\", \"display: none;\");\n\n$_documentContainer.innerHTML = `<dom-module id=\"paper-input\">\n  <template>\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([focused]) {\n        outline: none;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      input {\n        position: relative; /* to make a stacking context */\n        outline: none;\n        box-shadow: none;\n        padding: 0;\n        width: 100%;\n        max-width: 100%;\n        background: transparent;\n        border: none;\n        color: var(--paper-input-container-input-color, var(--primary-text-color));\n        -webkit-appearance: none;\n        text-align: inherit;\n        vertical-align: bottom;\n\n        /* Firefox sets a min-width on the input, which can cause layout issues */\n        min-width: 0;\n\n        @apply --paper-font-subhead;\n        @apply --paper-input-container-input;\n      }\n\n      input::-webkit-outer-spin-button,\n      input::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n\n      input::-webkit-clear-button {\n        @apply --paper-input-container-input-webkit-clear;\n      }\n\n      input::-webkit-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input:-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-ms-clear {\n        @apply --paper-input-container-ms-clear;\n      }\n\n      input:-ms-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container id=\"container\" no-label-float=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate\\$=\"[[autoValidate]]\" disabled\\$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <slot name=\"prefix\" slot=\"prefix\"></slot>\n\n      <label hidden\\$=\"[[!label]]\" aria-hidden=\"true\" for=\"input\" slot=\"label\">[[label]]</label>\n\n      <span id=\"template-placeholder\"></span>\n\n      <slot name=\"suffix\" slot=\"suffix\"></slot>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n  </template>\n\n  <!-- This is a fresh new hell to make this element hybrid. Basically, in 2.0\n    we lost is=, so the example same template can't be used with iron-input 1.0 and 2.0.\n    Expect some conditional code (especially in the tests).\n   -->\n  <template id=\"v0\">\n    <input is=\"iron-input\" id=\"input\" slot=\"input\" aria-labelledby\\$=\"[[_ariaLabelledBy]]\" aria-describedby\\$=\"[[_ariaDescribedBy]]\" disabled\\$=\"[[disabled]]\" title\\$=\"[[title]]\" bind-value=\"{{value}}\" invalid=\"{{invalid}}\" prevent-invalid-input=\"[[preventInvalidInput]]\" allowed-pattern=\"[[allowedPattern]]\" validator=\"[[validator]]\" type\\$=\"[[type]]\" pattern\\$=\"[[pattern]]\" required\\$=\"[[required]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\" min\\$=\"[[min]]\" max\\$=\"[[max]]\" step\\$=\"[[step]]\" name\\$=\"[[name]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" list\\$=\"[[list]]\" size\\$=\"[[size]]\" autocapitalize\\$=\"[[autocapitalize]]\" autocorrect\\$=\"[[autocorrect]]\" on-change=\"_onChange\" tabindex\\$=\"[[tabIndex]]\" autosave\\$=\"[[autosave]]\" results\\$=\"[[results]]\" accept\\$=\"[[accept]]\" multiple\\$=\"[[multiple]]\">\n  </template>\n\n  <template id=\"v1\">\n    <!-- Need to bind maxlength so that the paper-input-char-counter works correctly -->\n    <iron-input bind-value=\"{{value}}\" id=\"input\" slot=\"input\" maxlength\\$=\"[[maxlength]]\" allowed-pattern=\"[[allowedPattern]]\" invalid=\"{{invalid}}\" validator=\"[[validator]]\">\n      <input id=\"nativeInput\" aria-labelledby\\$=\"[[_ariaLabelledBy]]\" aria-describedby\\$=\"[[_ariaDescribedBy]]\" disabled\\$=\"[[disabled]]\" title\\$=\"[[title]]\" type\\$=\"[[type]]\" pattern\\$=\"[[pattern]]\" required\\$=\"[[required]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\" min\\$=\"[[min]]\" max\\$=\"[[max]]\" step\\$=\"[[step]]\" name\\$=\"[[name]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" list\\$=\"[[list]]\" size\\$=\"[[size]]\" autocapitalize\\$=\"[[autocapitalize]]\" autocorrect\\$=\"[[autocorrect]]\" on-change=\"_onChange\" tabindex\\$=\"[[tabIndex]]\" autosave\\$=\"[[autosave]]\" results\\$=\"[[results]]\" accept\\$=\"[[accept]]\" multiple\\$=\"[[multiple]]\">\n    </iron-input>\n  </template>\n\n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer);\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\nMaterial design: [Text fields](https://www.google.com/design/spec/components/text-fields.html)\n\n`<paper-input>` is a single-line text field with Material Design styling.\n\n    <paper-input label=\"Input label\"></paper-input>\n\nIt may include an optional error message or character counter.\n\n    <paper-input error-message=\"Invalid input!\" label=\"Input label\"></paper-input>\n    <paper-input char-counter label=\"Input label\"></paper-input>\n\nIt can also include custom prefix or suffix elements, which are displayed\nbefore or after the text input itself. In order for an element to be\nconsidered as a prefix, it must have the `prefix` attribute (and similarly\nfor `suffix`).\n\n    <paper-input label=\"total\">\n      <div prefix>$</div>\n      <paper-icon-button slot=\"suffix\" icon=\"clear\"></paper-icon-button>\n    </paper-input>\n\nA `paper-input` can use the native `type=search` or `type=file` features.\nHowever, since we can't control the native styling of the input (search icon,\nfile button, date placeholder, etc.), in these cases the label will be\nautomatically floated. The `placeholder` attribute can still be used for\nadditional informational text.\n\n    <paper-input label=\"search!\" type=\"search\"\n        placeholder=\"search for cats\" autosave=\"test\" results=\"5\">\n    </paper-input>\n\nSee `PaperInputBehavior` for more API docs.\n\n### Focus\n\nTo focus a paper-input, you can call the native `focus()` method as long as the\npaper input has a tab index. Similarly, `blur()` will blur the element.\n\n### Styling\n\nSee `PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\n@group Paper Elements\n@element paper-input\n@hero hero.svg\n@demo demo/index.html\n*/\n/* This is a fresh new hell to make this element hybrid. Basically, in 2.0\n    we lost is=, so the example same template can't be used with iron-input 1.0 and 2.0.\n    Expect some conditional code (especially in the tests).\n   */\nPolymer({\n  is: \"paper-input\",\n\n  behaviors: [PaperInputBehavior, IronFormElementBehavior],\n\n  beforeRegister: function() {\n    // We need to tell which kind of of template to stamp based on\n    // what kind of `iron-input` we got, but because of polyfills and\n    // custom elements differences between v0 and v1, the safest bet is\n    // to check a particular method we know the iron-input#2.x can have.\n    // If it doesn't have it, then it's an iron-input#1.x.\n    var ironInput = document.createElement(\"iron-input\");\n    var version =\n      typeof ironInput._initSlottedInput == \"function\" ? \"v1\" : \"v0\";\n    var template = DomModule.import(\"paper-input\", \"template\");\n    var inputTemplate = DomModule.import(\"paper-input\", \"template#\" + version);\n    var inputPlaceholder = template.content.querySelector(\n      \"#template-placeholder\"\n    );\n    if (inputPlaceholder) {\n      inputPlaceholder.parentNode.replaceChild(\n        inputTemplate.content,\n        inputPlaceholder\n      );\n    }\n    // else it's already been processed, probably in superclass\n  },\n\n  /**\n   * Returns a reference to the focusable element. Overridden from PaperInputBehavior\n   * to correctly focus the native input.\n   */\n  get _focusableElement() {\n    return Element ? this.inputElement._inputElement : this.inputElement;\n  },\n\n  // Note: This event is only available in the 1.0 version of this element.\n  // In 2.0, the functionality of `_onIronInputReady` is done in\n  // PaperInputBehavior::attached.\n  listeners: {\n    \"iron-input-ready\": \"_onIronInputReady\"\n  },\n\n  _onIronInputReady: function() {\n    if (\n      this.inputElement &&\n      this._typesThatHaveText.indexOf(this.$.nativeInput.type) !== -1\n    ) {\n      this.alwaysFloatLabel = true;\n    }\n\n    // Only validate when attached if the input already has a value.\n    if (!!this.inputElement.bindValue) {\n      this.$.container._handleValueAndAutoValidate(this.inputElement);\n    }\n  }\n});\n"],"names":["PaperInputHelper","PaperInputBehaviorImpl","properties","label","type","String","value","notify","disabled","Boolean","invalid","allowedPattern","list","pattern","required","errorMessage","charCounter","noLabelFloat","alwaysFloatLabel","autoValidate","validator","autocomplete","autofocus","observer","inputmode","minlength","Number","maxlength","min","max","step","name","placeholder","readonly","size","autocapitalize","autocorrect","autosave","results","accept","multiple","_ariaDescribedBy","_ariaLabelledBy","listeners","keyBindings","hostAttributes","tabindex","this","$","input","inputElement","created","_typesThatHaveText","attached","_updateAriaLabelledBy","Element","indexOf","_appendStringWithSpace","str","more","_onAddonAttached","event","target","dom","rootTarget","id","NextAddonID","validate","_focusBlurHandler","IronControlState","call","focused","_shiftTabPressed","_focusableElement","focus","_onShiftTabDown","oldTabIndex","getAttribute","setAttribute","async","run","_this","_handleAutoValidate","updateValueAndPreserveCaret","newValue","start","selectionStart","selectionEnd","e","_computeAlwaysFloatLabel","labelledBy","root","querySelector","NextLabelID","_onChange","shadowRoot","fire","sourceEvent","node","bubbles","cancelable","_autofocusChanged","activeElement","document","HTMLElement","body","documentElement","PaperInputBehavior","IronA11yKeysBehavior","PaperInputAddonBehavior","flush","update","state","_template","html","is","behaviors","_charCounterStr","counter","toString","length","hasAttribute","attrForValue","readOnly","_addons","Array","_inputHasContent","_inputSelector","_boundOnFocus","Function","_onFocus","bind","_boundOnBlur","_onBlur","_boundOnInput","_onInput","_boundValueChanged","_onValueChanged","dashToCamelCase","_inputElement","_propertyForValue","ready","addEventListener","_valueChangedEvent","_inputElementValue","_handleValueAndAutoValidate","_handleValue","push","isAttached","_setFocused","undefined","checkValidity","updateAddons","valid","_onIronInputValidate","_invalidChanged","addon","index","_computeInputContentClass","cls","labelAndInputContainer","style","position","_computeUnderlineClass","_computeAddOnContentClass","reflectToAttribute","_setInvalid","$_documentContainer","createElement","innerHTML","head","appendChild","IronFormElementBehavior","beforeRegister","version","_initSlottedInput","template","DomModule","import","inputTemplate","inputPlaceholder","content","parentNode","replaceChild","_onIronInputReady","nativeInput","bindValue","container"],"mappings":"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"}