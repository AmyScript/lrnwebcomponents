{"version":3,"file":"code-editor.umd.js","sources":["lib/code-pen-button.js","code-editor.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\n/**\n`code-pen-button`\nA LRN element to do a post of data to codepen\n\n@demo demo/index.html\n\n@microcopy - the mental model for this element\n -\n -\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n    </style>\n    <form action=\"[[endPoint]]\" method=\"POST\" target=\"_blank\">\n      <input type=\"hidden\" name=\"data\" value\\$=\"[[dataString]]\">\n      <input type=\"image\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/t-1/cp-arrow-right.svg\" width=\"40\" height=\"40\" value=\"Create New Pen with Prefilled Data\" class=\"codepen-mover-button\">\n    </form>\n`,\n\n  is: \"code-pen-button\",\n\n  properties: {\n    /**\n     * End point for posting should it change in the future.\n     */\n    endPoint: {\n      type: String,\n      value: \"https://codepen.io/pen/define\"\n    },\n    /**\n     * Data object as a JSON string for the POST data in page.\n     */\n    dataString: {\n      type: String,\n      computed: \"_getDataString(data)\"\n    },\n    /**\n     * Data object to post to code pen\n     */\n    data: {\n      type: Object,\n      value: {}\n    }\n  },\n\n  /**\n   * Return string from data object so it can be posted correctly.\n   */\n  _getDataString: function(data) {\n    return JSON.stringify(data)\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&apos;\");\n  }\n});\n","import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport \"@lrnwebcomponents/materializecss-styles/materializecss-styles.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\nimport \"juicy-ace-editor/juicy-ace-editor.js\";\nimport \"./lib/code-pen-button.js\";\n/**\n`code-editor`\nA LRN element\n\n@demo demo/index.html\n\n@microcopy - the mental model for this element\n -\n -\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        padding: 16px;\n        --code-pen-button-color: #222222;\n        --code-pen-title-color: #222222;\n      }\n      .code-pen-container {\n        width: 100%;\n        display: block;\n        background-color: var(--code-pen-button-color);\n        height: 40px;\n      }\n      code-pen-button {\n        float: right;\n        height: 40px;\n      }\n      h3 {\n        color: var(--code-pen-title-color);\n      }\n    </style>\n    <h3>[[title]]</h3>\n    <juicy-ace-editor id=\"codeeditor\" theme\\$=\"[[theme]]\" mode\\$=\"[[mode]]\" font-size\\$=\"[[fontSize]]\" readonly\\$=\"[[readOnly]]\"></juicy-ace-editor>\n    <div class=\"code-pen-container\" hidden\\$=\"[[!showCodePen]]\">\n      <code-pen-button data=\"[[codePenData]]\"></code-pen-button>\n    </div>\n`,\n\n  is: \"code-editor\",\n\n  behaviors: [\n    HAXBehaviors.PropertiesBehaviors,\n    MaterializeCSSBehaviors.ColorBehaviors,\n    SchemaBehaviors.Schema\n  ],\n\n  listeners: {\n    \"codeeditor.change\": \"_editorDataChanged\",\n    \"codeeditor.editor-ready\": \"_editorReady\"\n  },\n\n  properties: {\n    /**\n     * Title\n     */\n    title: {\n      type: String,\n      value: \"Code sample\"\n    },\n    /**\n     * Show codePen button to fork it to there to run\n     */\n    showCodePen: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Readonly setting for the editor\n     */\n    readOnly: {\n      type: Boolean,\n      value: true,\n      reflectToAttribute: true\n    },\n    /**\n     * Code pen data, computed based on the HTML editor\n     */\n    codePenData: {\n      type: Object,\n      computed: \"_computeCodePenData(title, editorValue)\"\n    },\n    /**\n     * contents of the editor\n     */\n    editorValue: {\n      type: String,\n      value: \"\",\n      notify: true\n    },\n    /**\n     * Theme for the Ace editor.\n     */\n    theme: {\n      type: String,\n      value: \"ace/theme/monokai\"\n    },\n    /**\n     * Mode for the Ace editor.\n     */\n    mode: {\n      type: String,\n      value: \"ace/mode/html\"\n    },\n    /**\n     * font size for the Ace editor.\n     */\n    fontSize: {\n      type: String,\n      value: \"16px\"\n    },\n    /**\n     * Min lines of the editor to show\n     */\n    minLines: {\n      type: Number,\n      value: 10\n    },\n    /**\n     * Max lines of the editor to show\n     */\n    maxLines: {\n      type: Number,\n      value: 25\n    }\n  },\n\n  /**\n   * Update the post data whenever the editor has been updated\n   */\n  _computeCodePenData: function(title, editorValue) {\n    return {\n      title: title,\n      html: editorValue\n    };\n  },\n\n  /**\n   * Event for when the editor is ready so we can modify it.\n   */\n  _editorReady: function(e) {\n    this.__editorReady = true;\n    setTimeout(() => {\n      this.$.codeeditor.editor.setOptions({\n        maxLines: this.maxLines,\n        minLines: this.minLines\n      });\n      this.updateEditorValue();\n    }, 200);\n  },\n\n  /**\n   * Notice code editor changes and reflect them into this element\n   */\n  _editorDataChanged: function(e) {\n    this.editorValue = this.$.codeeditor.value;\n  },\n\n  /**\n   * Calculate what's in slot currently and then inject it into the editor.\n   */\n  updateEditorValue: function() {\n    let children = this.queryEffectiveChildren(\"template\");\n    if (!children) {\n      console.warn(\n        \"code-editor requires a template to be provided in light-dom\"\n      );\n    } else {\n      this.$.codeeditor.value = children.innerHTML;\n    }\n  },\n\n  /**\n   * Ready state to tee everything up.\n   */\n  ready: function() {\n    // mutation observer that ensures state of hax applied correctly\n    this._observer = dom(this).observeNodes(function(info) {\n      // if we've got new nodes, we have to react to that\n      if (info.addedNodes.length > 0) {\n        info.addedNodes.map(node => {\n          this.updateEditorValue();\n        });\n      }\n      // if we dropped nodes via the UI (delete event basically)\n      if (info.removedNodes.length > 0) {\n        // handle removing items... not sure we need to do anything here\n        info.removedNodes.map(node => {\n          this.updateEditorValue();\n        });\n      }\n    });\n  },\n\n  /**\n   * Attached to the DOM, now fire.\n   */\n  attached: function() {\n    // Establish hax property binding\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Code editor\",\n        description: \"Edit code in the browser with minor HTML validation\",\n        icon: \"icons:code\",\n        color: \"blue\",\n        groups: [\"Code\", \"Development\"],\n        handles: [\n          {\n            type: \"code\",\n            code: \"contents\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"showCodePen\",\n            title: \"Code pen button\",\n            description: \"Play with this on code pen\",\n            inputMethod: \"boolean\",\n            icon: \"icons:code\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"showCodePen\",\n            title: \"Code pen button\",\n            description: \"Play with this on code pen\",\n            inputMethod: \"boolean\",\n            icon: \"icons:code\"\n          },\n          // this is trippy but actually will work.\n          {\n            slot: \"\",\n            title: \"Code\",\n            description: \"The code to present to the user\",\n            inputMethod: \"code-editor\",\n            icon: \"editor:title\"\n          }\n        ],\n        advanced: []\n      }\n    };\n    this.setHaxProperties(props);\n  }\n});\n"],"names":["_template","html","is","properties","endPoint","type","String","value","dataString","computed","data","Object","_getDataString","JSON","stringify","replace","behaviors","HAXBehaviors","PropertiesBehaviors","MaterializeCSSBehaviors","ColorBehaviors","SchemaBehaviors","Schema","listeners","title","showCodePen","Boolean","reflectToAttribute","readOnly","codePenData","editorValue","notify","theme","mode","fontSize","minLines","Number","maxLines","_computeCodePenData","_editorReady","e","__editorReady","setTimeout","_this","$","codeeditor","editor","setOptions","updateEditorValue","_editorDataChanged","this","children","queryEffectiveChildren","innerHTML","console","warn","ready","_observer","dom","observeNodes","info","addedNodes","length","map","node","_this2","removedNodes","attached","setHaxProperties","canScale","canPosition","canEditSource","gizmo","description","icon","color","groups","handles","code","meta","author","settings","quick","property","inputMethod","configure","slot","advanced"],"mappings":"i/GAYQ,CACNA,UAAWC,YAYXC,GAAI,kBAEJC,WAAY,CAIVC,SAAU,CACRC,KAAMC,OACNC,MAAO,iCAKTC,WAAY,CACVH,KAAMC,OACNG,SAAU,wBAKZC,KAAM,CACJL,KAAMM,OACNJ,MAAO,KAOXK,eAAgB,SAASF,UAChBG,KAAKC,UAAUJ,GACnBK,QAAQ,KAAM,UACdA,QAAQ,KAAM,uBCvCb,CACNf,UAAWC,YA6BXC,GAAI,cAEJc,UAAW,CACTC,aAAaC,oBACbC,wBAAwBC,eACxBC,gBAAgBC,QAGlBC,UAAW,qBACY,+CACM,gBAG7BpB,WAAY,CAIVqB,MAAO,CACLnB,KAAMC,OACNC,MAAO,eAKTkB,YAAa,CACXpB,KAAMqB,QACNnB,OAAO,EACPoB,oBAAoB,GAKtBC,SAAU,CACRvB,KAAMqB,QACNnB,OAAO,EACPoB,oBAAoB,GAKtBE,YAAa,CACXxB,KAAMM,OACNF,SAAU,2CAKZqB,YAAa,CACXzB,KAAMC,OACNC,MAAO,GACPwB,QAAQ,GAKVC,MAAO,CACL3B,KAAMC,OACNC,MAAO,qBAKT0B,KAAM,CACJ5B,KAAMC,OACNC,MAAO,iBAKT2B,SAAU,CACR7B,KAAMC,OACNC,MAAO,QAKT4B,SAAU,CACR9B,KAAM+B,OACN7B,MAAO,IAKT8B,SAAU,CACRhC,KAAM+B,OACN7B,MAAO,KAOX+B,oBAAqB,SAASd,EAAOM,SAC5B,CACLN,MAAOA,EACPvB,KAAM6B,IAOVS,aAAc,SAASC,mBAChBC,eAAgB,EACrBC,WAAW,WACTC,EAAKC,EAAEC,WAAWC,OAAOC,WAAW,CAClCV,SAAUM,EAAKN,SACfF,SAAUQ,EAAKR,WAEjBQ,EAAKK,qBACJ,MAMLC,mBAAoB,SAAST,QACtBV,YAAcoB,KAAKN,EAAEC,WAAWtC,OAMvCyC,kBAAmB,eACbG,EAAWD,KAAKE,uBAAuB,YACtCD,OAKEP,EAAEC,WAAWtC,MAAQ4C,EAASE,UAJnCC,QAAQC,KACN,gEAUNC,MAAO,gBAEAC,UAAYC,MAAIR,MAAMS,aAAa,SAASC,cAE3CA,EAAKC,WAAWC,OAAS,GAC3BF,EAAKC,WAAWE,IAAI,SAAAC,GAClBC,EAAKjB,sBAILY,EAAKM,aAAaJ,OAAS,GAE7BF,EAAKM,aAAaH,IAAI,SAAAC,GACpBC,EAAKjB,yBASbmB,SAAU,gBAkEHC,iBAhEO,CACVC,UAAU,EACVC,aAAa,EACbC,eAAe,EACfC,MAAO,CACLhD,MAAO,cACPiD,YAAa,sDACbC,KAAM,aACNC,MAAO,OACPC,OAAQ,CAAC,OAAQ,eACjBC,QAAS,CACP,CACExE,KAAM,OACNyE,KAAM,aAGVC,KAAM,CACJC,OAAQ,qBAGZC,SAAU,CACRC,MAAO,CACL,CACEC,SAAU,QACV3D,MAAO,QACPiD,YAAa,2BACbW,YAAa,YACbV,KAAM,gBAER,CACES,SAAU,cACV3D,MAAO,kBACPiD,YAAa,6BACbW,YAAa,UACbV,KAAM,eAGVW,UAAW,CACT,CACEF,SAAU,QACV3D,MAAO,QACPiD,YAAa,2BACbW,YAAa,YACbV,KAAM,gBAER,CACES,SAAU,cACV3D,MAAO,kBACPiD,YAAa,6BACbW,YAAa,UACbV,KAAM,eAINY,KAAM,GACN9D,MAAO,OACPiD,YAAa,kCACbW,YAAa,cACbV,KAAM,iBAGVa,SAAU"}