{"version":3,"file":"lrnsys-progress.umd.js","sources":["lib/lrnsys-progress-circle.js","lrnsys-progress.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { pathFromUrl } from \"@polymer/polymer/lib/utils/resolve-url.js\";\nimport \"@lrnwebcomponents/circle-progress/circle-progress.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@polymer/paper-tooltip/paper-tooltip.js\";\nimport \"@polymer/paper-styles/paper-styles.js\";\nimport \"@polymer/paper-spinner/paper-spinner.js\";\nimport \"@polymer/neon-animation/neon-animation.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\n/**\n * `lrnsys-progress-circle`\n * `circle that the outline grows as the percentage ticks up`\n *\n */\nPolymer({\n  _template: html`\n  <custom-style>\n    <style is=\"custom-style\" include=\"paper-material-styles\">\n      :host {\n        --paper-button-ink-color: var(--lrnsys-progress-color, var(--paper-green-500));\n        display: block;\n        transition:\n          box-shadow var(--lrnsys-progress-circle-transition, 0.5s) linear,\n          color var(--lrnsys-progress-circle-transition, 0.5s) ease-in-out,\n          background-color var(--lrnsys-progress-circle-transition, .5s) ease-in-out;\n      }\n      :host([status='complete']) .circle-wrapper {\n        --paper-button-ink-color: var(--lrnsys-progress-complete-color, var(--paper-green-500));\n        box-shadow: 0px 0px 0px .16px var(--lrnsys-progress-complete-color, var(--paper-green-900));\n      }\n      :host([status='disabled']) .circle-wrapper {\n        box-shadow: none;\n      }\n      :host([status='available']) .circle-wrapper {\n        box-shadow: none;\n      }\n      :host([active]) .circle-wrapper {\n        box-shadow: 0px 0px 0px .16px var(--google-grey-500, #555555);\n      }\n      .circle-wrapper {\n        border-radius: 100%;\n      }\n      .button {\n        margin: 0;\n        padding: 0;\n        display: flex;\n        min-width: 40px;\n        border-radius: 100%;\n      }\n      paper-button {\n        width: var(--lrnsys-progress-circle-size, 40px);\n        height: var(--lrnsys-progress-circle-size, 40px);\n      }\n      circle-progress {\n        margin: 0;\n        --circle-progress-width: var(--lrnsys-progress-circle-size, 40px);\n        --circle-progress-height: var(--lrnsys-progress-circle-size, 40px);\n        --circle-progress-stroke-color: var(--lrnsys-progress-color, var(--paper-green-500));\n        --circle-progress-bg-stroke-color: var(--lrnsys-progress-container-color, var(--google-grey-300));\n        --circle-progress-transition: 0.5s;\n        --circle-progress-stroke-linecap: square;\n        transition:\n          color .5s ease-in-out,\n          background-color .5s ease-in-out;\n      }\n      paper-spinner {\n        display: block;\n        font-size: 16px;\n        width: var(--lrnsys-progress-spinner-size, 32px);\n        height: var(--lrnsys-progress-spinner-size, 32px);\n        position: absolute;\n        z-index: 1;\n        margin: 4px;\n        padding: 0;\n        visibility: visible;\n        opacity: 1;\n        transition: visibility 0.4s, opacity 0.4s ease;\n      }\n      paper-spinner.multi {\n        --paper-spinner-layer-1-color: var(--paper-purple-500);\n        --paper-spinner-layer-2-color: var(--paper-cyan-500);\n        --paper-spinner-layer-3-color: var(--paper-blue-grey-500);\n        --paper-spinner-layer-4-color: var(--paper-amber-500);\n      }\n      .transition {\n        opacity: .4;\n        width: calc(var(--lrnsys-progress-icon-size, 24px) - 8px);\n        height: calc(var(--lrnsys-progress-icon-size, 24px) - 8px);\n      }\n      iron-icon {\n        visibility: visible;\n        opacity: 1;\n        transition: width 0.1s linear, height 0.1s linear, visibility 0.4s ease, opacity 0.4s ease;\n        width: var(--lrnsys-progress-icon-size, 24px);\n        height: var(--lrnsys-progress-icon-size, 24px);\n      }\n      .disabled {\n        background-color: var(--lrnsys-progress-disabled-color, var(--google-grey-500));\n        color: white;\n      }\n      .loading {\n        background-color: white;\n        color: black;\n      }\n      .finished iron-icon:not(.activeIcon) {\n        width: calc(var(--lrnsys-progress-icon-size, 24px) - 8px);\n        height: calc(var(--lrnsys-progress-icon-size, 24px) - 8px);\n      }\n      .available {\n        background-color: var(--lrnsys-progress-active-color, var(--google-grey-300));\n        color: var(--lrnsys-progress-active-text-color, var(--google-grey-500));\n      }\n      .activeIcon {\n        color: black;\n      }\n      .complete .activeIcon {\n        color: white;\n      }\n      :host([active]) .complete .activeIcon,\n      :host([active]) .finished .activeIcon {\n        color: black;\n      }\n      .complete,\n      .finished {\n        background-color: var(--lrnsys-progress-container-color, var(--paper-green-500));\n        color: white;\n      }\n      :host([active]) circle-progress {\n        background-color: white;\n        color: black;\n      }\n      .listview-title {\n        font-size: 16px;\n        padding: 0;\n        margin: 0;\n      }\n      .description-content {\n        font-size: 8px;\n        font-style: italic;\n      }\n      .circle-wrapper {\n        display: inline-block;\n      }\n      .listview {\n        height: 32px;\n        padding: 4px 0;\n        margin: 0;\n        vertical-align: top;\n      }\n      .link {\n        height: 40px;\n        width: 100%;\n      }\n      :host([list-view]) .button {\n        margin: 0;\n        padding: 0;\n        display: block;\n        min-width: 40px;\n        border-radius: 0;\n      }\n    </style>\n    </custom-style>\n    <paper-tooltip hidden$=\"[[!toolTip]]\" for=\"button\" position=\"bottom\" offset=\"8\" animation-delay=\"0\">\n      [[label]]\n    </paper-tooltip>\n    <a href=\"[[url]]\" tabindex=\"-1\" class=\"link\">\n    <paper-button id=\"button\" class=\"button\" disabled$=\"[[disabled]]\" title=\"[[label]]\">\n      <span class=\"circle-wrapper\">\n      <paper-spinner active$=\"[[loading]]\" hidden$=\"[[!loading]]\" class=\"multi\" alt$=\"Loading content for [[label]]\"></paper-spinner>\n        <circle-progress class$=\"[[status]]\" value=\"[[value]]\" max=\"[[max]]\" stroke-width=\"[[strokeWidth]]\" angle=\"180\">\n          <iron-icon id=\"icon\" icon=\"[[activeIcon]]\" hidden$=\"[[!activeIcon]]\"></iron-icon>\n          <slot name=\"image\"></slot>\n        </circle-progress>\n      </span>\n      <span hidden$=\"[[!listView]]\" id=\"listview\" class=\"listview\">\n          <h3 class=\"listview-title\">[[label]]</h3>\n          <div class=\"description-content\">\n            <slot name=\"description\"></slot>\n            <slot></slot>\n          </div>\n      </span>\n    </paper-button>\n  </a>\n`,\n\n  is: \"lrnsys-progress-circle\",\n\n  listeners: {\n    tap: \"tapEventOn\",\n    mouseover: \"focusOn\",\n    mouseout: \"focusOff\",\n    \"focused-changed\": \"focusEvent\"\n  },\n\n  properties: {\n    /**\n     * Current value.\n     */\n    value: {\n      type: Number,\n      value: 0,\n      notify: true,\n      reflectToAttribute: true,\n      observer: \"_testValueComplete\"\n    },\n    /**\n     * Whether to add a tooltip on hover.\n     */\n    toolTip: {\n      type: Boolean,\n      value: true,\n      reflectToAttribute: true\n    },\n    /**\n     * If this is in a list view, expand the output.\n     */\n    listView: {\n      type: Boolean,\n      value: true,\n      reflectToAttribute: true\n    },\n    /**\n     * Icon.\n     */\n    icon: {\n      type: String,\n      value: 0,\n      reflectToAttribute: true\n    },\n    /**\n     * Special icon to use when the item has been completed.\n     */\n    iconComplete: {\n      type: String,\n      value: 0,\n      reflectToAttribute: true\n    },\n    /**\n     * Loading icon\n     */\n    loadingIcon: {\n      type: String,\n      value: \"hourglass-full\",\n      reflectToAttribute: true\n    },\n    /**\n     * Finished icon\n     */\n    finishedIcon: {\n      type: String,\n      value: \"thumb-up\",\n      reflectToAttribute: true\n    },\n    /**\n     * Current value.\n     */\n    activeIcon: {\n      type: String,\n      notify: true,\n      computed: \"_getActiveIcon(icon, iconComplete, status)\"\n    },\n    /**\n     * Array position within a larger body of items.\n     */\n    step: {\n      type: Number,\n      value: 0,\n      reflectToAttribute: true\n    },\n    /**\n     * If this item is active or not in the larger list\n     */\n    active: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true,\n      notify: true\n    },\n    /**\n     * Status of the progression.\n     * Possible values are disabled, loading, available, complete\n     */\n    status: {\n      type: String,\n      value: \"available\",\n      reflectToAttribute: true,\n      notify: true,\n      observer: \"_statusChange\"\n    },\n    /**\n     * Correctly disable the button if it's status is such.\n     */\n    disabled: {\n      type: Boolean,\n      computed: \"_disableStatus(status)\"\n    },\n    /**\n     * Calculate if something is in a loading status which invokes a swirl.\n     */\n    loading: {\n      type: Boolean,\n      computed: \"_loadingStatus(status)\"\n    },\n    /**\n     * Boolean to invoke \"finished\" state. Useful for the last circle\n     * in a series.\n     */\n    finished: {\n      type: Boolean,\n      computed: \"_finishedStatus(status)\"\n    },\n    /**\n     * Max progression for doing math against.\n     */\n    max: {\n      type: String,\n      reflectToAttribute: true\n    },\n    /**\n     * Internal property to ensure we only ding 1x\n     */\n    __chimed: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Internal property to ensure we only finish 1x\n     */\n    __finishchimed: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * URL to link to on click.\n     */\n    url: {\n      type: String,\n      value: \"#\",\n      reflectToAttribute: true\n    },\n    /**\n     * Data url to bubble up for more advanced implementations.\n     */\n    dataUrl: {\n      type: String,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Stroke width.\n     */\n    strokeWidth: {\n      type: Number,\n      value: 4\n    },\n    /**\n     * Tracks if focus state is applied for element consistency\n     * when dealing with focus vs hover states.\n     */\n    focusState: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Play sound status; if this should play sound\n     * when it hits certain milestones or not.\n     */\n    playSound: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Play sound at end; if this should play sound\n     * when it hits certain milestones or not.\n     */\n    playFinishSound: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Play sound on complete.\n     */\n    completeSound: {\n      type: String,\n      value: pathFromUrl(import.meta.url) + \"assets/complete.mp3\",\n      reflectToAttribute: true\n    },\n    /**\n     * Play sound on complete.\n     */\n    finishedSound: {\n      type: String,\n      value: pathFromUrl(import.meta.url) + \"assets/finished.mp3\",\n      reflectToAttribute: true\n    },\n    /**\n     * Fire and track milestones towards completion state.\n     */\n    _bubbleProgress: {\n      type: Object,\n      value: {\n        \"25\": false,\n        \"50\": false,\n        \"75\": false\n      }\n    }\n  },\n\n  /**\n   * Ready state\n   */\n  ready: function(e) {\n    // seems odd but if we don't do this we can get issues with\n    // this field being unified across all circles when really\n    // we have to track this state per circle.\n    this._bubbleProgress = {\n      \"25\": false,\n      \"50\": false,\n      \"75\": false\n    };\n  },\n\n  /**\n   * Test if the value = max meaning that we hit complete from available\n   */\n  _testValueComplete: function(newValue, oldValue) {\n    // ensure we were previously available before marking complete\n    // this way we don't conflict with the finished state which can\n    // only be set from outside the circle as the circle doesn't\n    // know how many items are in the set\n    if (newValue >= this.max && this.status == \"available\") {\n      this.status = \"complete\";\n    }\n    // add events for certain mile stones; this has to be in reverse order\n    // otherwise we could actuall be passing 75 but it was at 0. This allows\n    // for jumping ahead and not triggering 25/50/75 all at once and preventing\n    // over reported percentages upstream\n    else if (newValue / this.max >= 0.75 && !this._bubbleProgress[\"75\"]) {\n      this.fire(\"node-percent-milestone\", { percentage: 75 });\n      this._bubbleProgress[\"75\"] = true;\n    } else if (newValue / this.max >= 0.5 && !this._bubbleProgress[\"50\"]) {\n      this.fire(\"node-percent-milestone\", { percentage: 50 });\n      this._bubbleProgress[\"50\"] = true;\n    } else if (newValue / this.max >= 0.25 && !this._bubbleProgress[\"25\"]) {\n      this.fire(\"node-percent-milestone\", { percentage: 25 });\n      this._bubbleProgress[\"25\"] = true;\n    }\n  },\n\n  /**\n   * Focus event for UX consistency.\n   */\n  focusEvent: function(e) {\n    // see if it has hover classes\n    if (!this.disabled && this.status != \"loading\") {\n      // focus shows focus\n      if (this.focusState) {\n        // force icon to be set to real one and class added\n        this.$.icon.icon = this.icon;\n        this.$.icon.classList.add(\"activeIcon\");\n      } else {\n        // if complete set it back to what it was\n        if (this.status == \"complete\" || this.status == \"finished\") {\n          this.$.icon.icon = this.activeIcon;\n        }\n        // drop the class for active step\n        this.$.icon.classList.remove(\"activeIcon\");\n      }\n      this.focusState = !this.focusState;\n    }\n  },\n\n  /**\n   * Focus event for UX consistency.\n   */\n  focusOn: function(e) {\n    // see if it has hover classes\n    if (!this.disabled && this.status != \"loading\") {\n      // force icon to be set to real one and class added\n      this.$.icon.icon = this.icon;\n      this.$.icon.classList.add(\"activeIcon\");\n    }\n  },\n\n  /**\n   * Focus event for UX consistency.\n   */\n  focusOff: function(e) {\n    // see if it has hover classes\n    if (!this.disabled && this.status != \"loading\") {\n      // if complete set it back to what it was\n      if (this.status == \"complete\" || this.status == \"finished\") {\n        this.$.icon.icon = this.activeIcon;\n      }\n      // drop the class for active step\n      this.$.icon.classList.remove(\"activeIcon\");\n    }\n  },\n\n  /**\n   * Tapped on the item.\n   */\n  tapEventOn: function(e) {\n    this.fire(\"node-is-active\", { node: e });\n  },\n\n  /**\n   * Calculate which icon to present.\n   */\n  _getActiveIcon: function(icon, iconComplete, status) {\n    if (typeof icon !== typeof undefined) {\n      var tmp = icon;\n      // support for a loading icon while loading\n      if (status == \"loading\") {\n        tmp = this.loadingIcon;\n        this.$.icon.classList.add(\"transition\");\n      } else if (status == \"finished\") {\n        tmp = this.finishedIcon;\n      } else if (\n        status == \"complete\" &&\n        typeof iconComplete !== typeof undefined\n      ) {\n        if (this.playSound && !this.__chimed) {\n          this._playSound();\n        }\n        tmp = iconComplete;\n      } else {\n        this.$.icon.classList.remove(\"transition\");\n      }\n      return tmp;\n    }\n    return false;\n  },\n\n  /**\n   * Play the sound effect.\n   */\n  _playSound: function() {\n    // calculate sound to use and ensure it only ever happens once\n    // via the __chimed flag\n    if (this.status == \"complete\") {\n      window.audio = new Audio(this.completeSound);\n      this.__chimed = true;\n    } else if (this.status == \"finished\") {\n      window.audio = new Audio(this.finishedSound);\n      this.__finishchimed = true;\n    } else {\n      // shouldn't be possible\n      window.audio = new Audio();\n    }\n    window.audio.play();\n  },\n\n  /**\n   * Calculate loading based on the status of the item.\n   */\n  _loadingStatus: function(status) {\n    if (status == \"loading\") {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * Calculate loading based on the status of the item.\n   */\n  _finishedStatus: function(status) {\n    if (status == \"finished\") {\n      if (this.playFinishSound && !this.__finishchimed) {\n        this._playSound();\n      }\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * Notice when state changes to fire up an event for others to respond to.\n   */\n  _statusChange: function(newValue, oldValue) {\n    // verify this isn't loading up\n    if (typeof oldValue !== typeof undefined && newValue !== oldValue) {\n      this.fire(\"node-status-change\", { status: newValue });\n    }\n  },\n\n  /**\n   * Calculate disable based on the status of the item.\n   */\n  _disableStatus: function(status) {\n    if (status == \"disabled\") {\n      return true;\n    }\n    return false;\n  }\n});\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { pathFromUrl } from \"@polymer/polymer/lib/utils/resolve-url.js\";\nimport \"@polymer/paper-progress/paper-progress.js\";\nimport \"./lib/lrnsys-progress-circle.js\";\n/**\n * `lrnsys-progress`\n * `track progression as a circle and series of circles`\n *\n * @demo demo/index.html\n * @microcopy\n *  - node / circle - A progress circle on the line\n *  - nodes / items - the list of items in the progress bar\n *  - bubble - reserved for when events fire out of an element or value is tracking events\n *  - percentage - amount complete either in the bar or the nodes themselves\n *  - bar - the underlayed bar that's tracking overall progression\n */\nlet LrnsysProgress = Polymer({\n  _template: html`\n    <custom-style>\n    <style is=\"custom-style\" include=\"paper-material-styles\">\n      :host {\n        display: block;\n        margin-top: 24px;\n      }\n      :host([size=\"tiny\"]) {\n        font-size: 12.8px;\n      }\n      :host([size=\"small\"]) {\n        font-size: 19.2px;\n      }\n      :host([size=\"medium\"]) {\n        font-size: 25.6px;\n      }\n      :host([size=\"large\"]) {\n        font-size: 44.8px;\n      }\n      :host([size=\"x-large\"]) {\n        font-size: 64px;\n      }\n      :host([size=\"epic\"]) {\n        font-size: 96px;\n      }\n      #circle-container {\n        display: flex;\n        justify-content:space-between;\n        margin: -24px 0 0 0;\n        padding: 0;\n        list-style: none;\n      }\n      .progress-title {\n        position: absolute !important;\n        clip: rect(1px 1px 1px 1px); /* IE6, IE7 */\n        clip: rect(1px, 1px, 1px, 1px);\n        overflow: hidden;\n        height: 1px;\n      }\n      paper-progress {\n        --paper-progress-height: 8px;\n        --paper-progress-transition-duration: 0.5s;\n        --paper-progress-transition-timing-function: ease;\n        --paper-progress-transition-delay: .4s;\n        width: 100%;\n      }\n      /* required to get the box shadow above the progress bar */\n      .circle-node {\n        z-index: 1;\n      }\n      ul#circle-container li.circle-node {\n        list-style-type: none;\n      }\n\n      :host([vertical]) {\n        width: max-content;\n      }\n      :host([vertical]) #circle-container {\n        display: block;\n      }\n      :host([vertical]) paper-progress {\n        display: none !important;\n      }\n      :host([vertical]) lrnsys-progress-circle {\n        margin: 16px 0;\n        padding: 0;\n        width: 100%;\n      }\n\n      lrnsys-progress-circle {\n        width: 40px;\n        height: 40px;\n        --lrnsys-progress-circle-size: 40px;\n        --lrnsys-progress-spinner-size: 32px;\n        --lrnsys-progress-icon-size: 24px;\n        --paper-spinner-stroke-width: 1.2px;\n      }\n    </style>\n    </custom-style>\n    <iron-ajax id=\"ajax\" url=\"[[activeNodeURL]]\" handle-as=\"json\" last-response=\"{{nodeData}}\" last-error=\"{{nodeDataError}}\" on-response=\"handleNodeResponse\"></iron-ajax>\n    <h3 class=\"progress-title\">[[title]]</h3>\n    <paper-progress id=\"progress\" value=\"[[overallPercentage]]\"></paper-progress>\n    <ul id=\"circle-container\">\n      <template is=\"dom-repeat\" items=\"[[items]]\" as=\"item\">\n        <li class=\"circle-node\">\n          <lrnsys-progress-circle play-finish-sound=\"[[soundFinish]]\" play-sound=\"[[sound]]\" complete-sound=\"[[completeSound]]\" finished-sound=\"[[finishedSound]]\" active=\"[[_isActive(index, active)]]\" step=\"[[index]]\" label=\"[[item.title]]\" icon=\"[[item.icon]]\" icon-complete=\"[[item.iconComplete]]\" data-url=\"[[item.dataUrl]]\" url=\"[[item.url]]\" status=\"[[item.status]]\" value=\"[[item.value]]\" max=\"[[item.max]]\" stroke-width=\"[[strokeWidth]]\" tool-tip=\"[[!vertical]]\" list-view=\"[[vertical]]\" class\\$=\"[[size]]\">\n            <span slot=\"description\">[[item.description]]</span>\n          </lrnsys-progress-circle>\n        </li>\n      </template>\n    </ul>\n`,\n\n  is: \"lrnsys-progress\",\n\n  listeners: {\n    \"node-is-active\": \"_bubbleUpChangeActive\",\n    \"node-status-change\": \"_statusChanged\"\n  },\n\n  properties: {\n    /**\n     * Disable internal ajax calls as something is handling them above.\n     */\n    disableAjaxCalls: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Items to display to visualize the progression.\n     */\n    items: {\n      type: Array,\n      value: [],\n      notify: true,\n      observer: \"_itemsChanged\"\n    },\n    /**\n     * Play sounds whenever an item is complete.\n     * This can get pretty annoying though unless the items\n     * won't be completed for awhile.\n     */\n    sound: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Play sound when the user finishes the progression. This\n     * could also be annoying but far less so :)\n     */\n    soundFinish: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Play sound on complete.\n     */\n    completeSound: {\n      type: String,\n      value: pathFromUrl(import.meta.url) + \"lib/assets/complete.mp3\",\n      reflectToAttribute: true\n    },\n    /**\n     * Play sound on complete.\n     */\n    finishedSound: {\n      type: String,\n      value: pathFromUrl(import.meta.url) + \"lib/assets/finished.mp3\",\n      reflectToAttribute: true\n    },\n    /**\n     * Title of this progression, primarily for accessibility.\n     */\n    title: {\n      type: String,\n      value: \"Steps to completion\",\n      reflectToAttribute: true\n    },\n    /**\n     * Items displayed at specific points on the progression.\n     * These aren't filled up but place points along the progression\n     * which can help people see where they are relative to other\n     * factors such as % complete as a tick mark or icon.\n     */\n    keyItems: {\n      type: Array,\n      value: [],\n      notify: true\n    },\n    /**\n     * ID of the active item.\n     */\n    active: {\n      type: Number,\n      value: 0,\n      notify: true,\n      reflectToAttribute: true,\n      observer: \"_activeChanged\"\n    },\n    /**\n     * Whether to automatically make disabled items available\n     * or not when the previous one was just complete.\n     */\n    progressiveUnlock: {\n      type: Boolean,\n      value: true,\n      reflectToAttribute: true,\n      notify: true\n    },\n    /**\n     * State of progress in the current progression\n     */\n    state: {\n      type: String,\n      value: null,\n      reflectToAttribute: true,\n      observer: \"_reportState\"\n    },\n    /**\n     * How far is the user through this series of items.\n     */\n    overallPercentage: {\n      type: Number,\n      computed: \"_overallPercentageCompute(items, active)\",\n      reflectToAttribute: true\n    },\n    /**\n     * Responses for each item.\n     */\n    _responseList: {\n      type: Array,\n      value: []\n    },\n    /**\n     * Active response from the node selected.\n     */\n    activeNodeResponse: {\n      type: String,\n      value: \"\",\n      observer: \"_activeResponseChange\"\n    },\n    /**\n     * Active response from the node selected.\n     */\n    nodeData: {\n      type: Object,\n      value: []\n    },\n    /**\n     * Error.\n     */\n    nodeDataError: {\n      type: Object,\n      value: [],\n      observer: \"_handleNodeError\"\n    },\n    /**\n     * Flag to be vertical instead of horizontal.\n     */\n    vertical: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Size to make everything, small, medium, large, and epic\n     * are available class names; default medium.\n     */\n    size: {\n      type: String,\n      value: \"medium\",\n      notify: true,\n      reflectToAttribute: true\n    },\n    /**\n     * Calculate width based on the size since we have to convert em to px.\n     */\n    strokeWidth: {\n      type: Number,\n      computed: \"_getStrokeWidth(size)\"\n    }\n  },\n\n  /**\n   * Set an appropriate stroke width based on size of the element.\n   * This is because it's a hard pixel value when the rest of our\n   * sizing is based on em's\n   */\n  _getStrokeWidth: function(size) {\n    var width = 4;\n    if (size == \"tiny\") {\n      width = 3;\n    } else if (size == \"small\") {\n      width = 4;\n    } else if (size == \"medium\") {\n      width = 5;\n    } else if (size == \"large\") {\n      width = 6;\n    } else if (size == \"x-large\") {\n      width = 7;\n    } else if (size == \"epic\") {\n      width = 8;\n    }\n\n    return width;\n  },\n\n  /**\n   * Fire event that state has changed with what the statement is.\n   * This gives a readable name to what the state is of the progress bar\n   * as well as access to the full item that triggered the state change.\n   */\n  _reportState: function(newValue, oldValue) {\n    // help avoid initial ready state being null\n    if (typeof newValue !== typeof null) {\n      this.fire(\"progress-state-change\", {\n        state: this.state,\n        active: this.items[this.active]\n      });\n    }\n  },\n\n  /**\n   * Notice items have changed; only worry about if the count changes\n   * though since other oberservers handle downstream mutation\n   */\n  _itemsChanged: function(newValue, oldValue) {\n    // strange but this is effectively the same as \"ready\" except the ready\n    // state invokes potentially without items while this one will only\n    // match a case where there was no values and now we have one\n    if (\n      typeof oldValue !== typeof undefined &&\n      newValue.length != oldValue.length &&\n      typeof this._responseList[this.active] === typeof undefined\n    ) {\n      newValue[this.active].status = \"loading\";\n      this.set(\"items.\" + this.active + \".status\", \"loading\");\n      this.notifyPath(\"items.\" + this.active + \".status\");\n      // becasue this is so early in bootstrap of the element we\n      // won't be able to detect the initial loading event\n      if (\n        typeof newValue[this.active].dataUrl !== typeof undefined &&\n        !this.disableAjaxCalls\n      ) {\n        this.$.ajax.url = newValue[this.active].dataUrl;\n        this.$.ajax.generateRequest();\n      } else {\n        setTimeout(() => {\n          newValue[this.active].status = \"available\";\n          this.set(\"items.\" + this.active + \".status\", \"available\");\n          this.notifyPath(\"items.\" + this.active + \".status\");\n          this._responseList[this.active] = {};\n          this.activeNodeResponse = this._responseList[this.active];\n        }, 1200);\n      }\n    }\n  },\n\n  /**\n   * Simple boolean for whatever is active currently.\n   */\n  _isActive: function(index, active) {\n    return index === active;\n  },\n\n  /**\n   * Active Response changed; bubble it up.\n   */\n  _activeResponseChange: function(value) {\n    this.fire(\"progress-response-loaded\", { response: value });\n  },\n\n  /**\n   * Notice event from the nodes themselves\n   * and set active based on a node bubbling up an event\n   * that says \"Hey I am active now!\"\n   */\n  _bubbleUpChangeActive: function(e) {\n    // changing active will kick off events internally\n    this.active = e.target.step;\n  },\n\n  /**\n   * Active item has changed, set the rest of the data to match.\n   */\n  _activeChanged: function(newValue, oldValue) {\n    // bubble up event from state being set\n    this.state = \"active item is \" + this.active;\n    this.items.forEach((element, index, array) => {\n      // if the current item is disabled, check the 1 prior to it if we can\n      if (this.items[index].status == \"disabled\") {\n        // do nothing, it's disabled unless....\n        if (\n          index != 0 &&\n          this.progressiveUnlock &&\n          this.items[index - 1].status == \"complete\"\n        ) {\n          this.items[index].status = \"loading\";\n          this.set(\"items.\" + index + \".status\", \"loading\");\n          this.notifyPath(\"items.\" + index + \".status\");\n        }\n      }\n      // or if our value is at max AND it's the last item in the list\n      else if (\n        this.items[index].value >= this.items[index].max &&\n        index == this.items.length - 1\n      ) {\n        this.items[index].status = \"finished\";\n        this.set(\"items.\" + index + \".status\", \"finished\");\n        this.notifyPath(\"items.\" + index + \".status\");\n      }\n      // or if we're just at max then mark us complete\n      else if (this.items[index].value >= this.items[index].max) {\n        this.items[index].status = \"complete\";\n        this.set(\"items.\" + index + \".status\", \"complete\");\n        this.notifyPath(\"items.\" + index + \".status\");\n      }\n      // or if the index is the currently active item\n      else if (index == this.active) {\n        // see if we have the data for it already otherwise trigger loading\n        if (typeof this._responseList[index] === typeof undefined) {\n          this.items[index].status = \"loading\";\n          this.set(\"items.\" + index + \".status\", \"loading\");\n          this.notifyPath(\"items.\" + index + \".status\");\n        }\n        // if we already had a response, then mark available\n        else {\n          this.activeNodeResponse = this._responseList[index];\n          this.items[index].status = \"available\";\n          this.set(\"items.\" + index + \".status\", \"available\");\n          this.notifyPath(\"items.\" + index + \".status\");\n        }\n      } else {\n        // we didn't match any cases, just leave it active\n        this.items[index].status = \"available\";\n        this.set(\"items.\" + index + \".status\", \"available\");\n        this.notifyPath(\"items.\" + index + \".status\");\n      }\n    });\n  },\n\n  /**\n   * Listen for the state of anything below to change.\n   */\n  _statusChanged: function(e) {\n    // we are in loading state so go load data and let the response\n    // dictate what state we reach after that\n    if (e.target.status == \"loading\") {\n      if (\n        typeof this.items[this.active].dataUrl !== typeof undefined &&\n        !this.disableAjaxCalls\n      ) {\n        this.$.ajax.url = this.items[this.active].dataUrl;\n        this.$.ajax.generateRequest();\n      } else {\n        setTimeout(() => {\n          this.items[this.active].status = \"available\";\n          this.set(\"items.\" + this.active + \".status\", \"available\");\n          this.notifyPath(\"items.\" + this.active + \".status\");\n          this._responseList[this.active] = {};\n          this.activeNodeResponse = this._responseList[this.active];\n        }, 1500);\n      }\n    } else if (\n      e.target.status == \"complete\" &&\n      this.items.length === this.active + 1\n    ) {\n      setTimeout(() => {\n        this.items[this.active].status = \"finished\";\n        this.set(\"items.\" + this.active + \".status\", \"finished\");\n        this.notifyPath(\"items.\" + this.active + \".status\");\n      }, 100);\n    }\n  },\n\n  /**\n   * Response returned from triggering the Node's URL to fire to get a response.\n   */\n  handleNodeResponse: function(e) {\n    const detail = e.detail;\n    // this means that it was an internal path, fake \"loading\"\n    if (typeof detail.response === typeof null) {\n      setTimeout(() => {\n        this.items[this.active].status = \"available\";\n        this.set(\"items.\" + this.active + \".status\", \"available\");\n        this.notifyPath(\"items.\" + this.active + \".status\");\n        this._responseList[this.active] = detail.response;\n        this.activeNodeResponse = this._responseList[this.active];\n      }, 1500);\n    }\n    // valid response, pass it along for other things to use\n    else {\n      this.items[this.active].status = \"available\";\n      this.set(\"items.\" + this.active + \".status\", \"available\");\n      this.notifyPath(\"items.\" + this.active + \".status\");\n      this._responseList[this.active] = detail.response;\n      this.activeNodeResponse = this._responseList[this.active];\n    }\n  },\n\n  /**\n   * Weak support for error code being found\n   */\n  _handleNodeError: function(newValue, oldValue) {\n    if (\n      typeof oldValue !== typeof undefined &&\n      newValue != null &&\n      newValue.length != 0\n    ) {\n      // @todo, need support for a failed to load state; could be useful\n      // if we go into an offline capability in the future\n      this._responseList[this.active] = newValue;\n      this.activeNodeResponse = this._responseList[this.active];\n      // set available because we don't have a failed state\n      this.items[this.active].status = \"available\";\n      this.set(\"items.\" + this.active + \".status\", \"available\");\n      this.notifyPath(\"items.\" + this.active + \".status\");\n      // fire an event that this isn't really available so we know an issue occured\n      this.fire(\"node-load-failed\", {\n        message: newValue,\n        node: this.items[this.active]\n      });\n    }\n  },\n\n  /**\n   * Calculate the overall percentage competed.\n   * This forms the line that's connecting the steps.\n   */\n  _overallPercentageCompute: function(items, active) {\n    this.$.progress.classList.add(\"transiting\");\n    return (active / (items.length - 1)) * 100;\n  },\n\n  /**\n   * Change the percentage for the active item.\n   */\n  changePercentage: function(percentage, mode) {\n    var newp = 0;\n    // support for adding and removing percentage as well as setting\n    if (mode == \"add\") {\n      newp = this.items[this.active].value + percentage;\n    } else if (mode == \"subtract\") {\n      newp = this.items[this.active].value - percentage;\n    } else {\n      newp = percentage;\n    }\n    // after establishing the new percentage, make sure it's less then max\n    // if it's at or over max then we need to trigger events and state to change\n    if (newp >= this.items[this.active].max) {\n      if (this.items.length == this.active + 1) {\n        // fire an event change to indicate that this happened\n        this.state = \"finished\";\n        this.items[this.active].status = \"finished\";\n        this.set(\"items.\" + this.active + \".status\", \"finished\");\n        this.notifyPath(\"items.\" + this.active + \".status\");\n        // need to make sure finished happens prior to value set to 100\n        // otherwise this will kick off the circle to complete itself\n        this.items[this.active].value = this.items[this.active].max;\n        this.set(\n          \"items.\" + this.active + \".value\",\n          this.items[this.active].max\n        );\n        this.notifyPath(\"items.\" + this.active + \".value\");\n      } else {\n        // set value = max which will automatically trigger complete in the circle\n        this.items[this.active].value = this.items[this.active].max;\n        this.set(\n          \"items.\" + this.active + \".value\",\n          this.items[this.active].max\n        );\n        this.notifyPath(\"items.\" + this.active + \".value\");\n      }\n      // ensure we still have more items to go in the list\n      if (this.items.length > this.active + 1) {\n        // if we have progressive unlocking then set the next thing available\n        // assuming that the next thing is currently disabled and that we're not\n        // on the first item. OR, if we don't have a response for the current\n        // item in local storage then let's mark loading to kick off the calls\n        if (\n          (this.progressiveUnlock &&\n            this.items[this.active].status == \"complete\" &&\n            this.items[this.active + 1].status == \"disabled\") ||\n          typeof this._responseList[this.active + 1] === typeof undefined\n        ) {\n          this.items[this.active + 1].status = \"loading\";\n          this.set(\"items.\" + (this.active + 1) + \".status\", \"loading\");\n          this.notifyPath(\"items.\" + (this.active + 1) + \".status\");\n        }\n        // set state so it gets reported upstream in events\n        this.state = \"active item is \" + (this.active + 1);\n        // bump active ahead 1 because we still have more items in the list\n        this.active = this.active + 1;\n      }\n    } else {\n      this.items[this.active].value = newp;\n      this.set(\"items.\" + this.active + \".value\", newp);\n      this.notifyPath(\"items.\" + this.active + \".value\");\n    }\n  },\n\n  /**\n   * Modify items and update template binding correctly.\n   */\n  updateItems: function(op, item) {\n    var response = false;\n    if (op == \"push\") {\n      this.push(\"items\", item);\n      response = true;\n    } else if (op == \"pop\") {\n      response = this.pop(\"items\");\n    } else if (op == \"splice\") {\n      this.splice(\"items\", this.items.length, 0, item);\n      response = true;\n    }\n    // force active to reprocess\n    const active = this.active;\n    this.set(\"active\", 0);\n    this.set(\"active\", active);\n    this.notifyPath(\"active\");\n    return response;\n  }\n});\nexport { LrnsysProgress };\n"],"names":["_template","html","is","listeners","tap","mouseover","mouseout","properties","value","type","Number","notify","reflectToAttribute","observer","toolTip","Boolean","listView","icon","String","iconComplete","loadingIcon","finishedIcon","activeIcon","computed","step","active","status","disabled","loading","finished","max","__chimed","__finishchimed","url","dataUrl","strokeWidth","focusState","playSound","playFinishSound","completeSound","pathFromUrl","finishedSound","_bubbleProgress","Object","ready","e","_testValueComplete","newValue","oldValue","this","fire","percentage","focusEvent","$","classList","add","remove","focusOn","focusOff","tapEventOn","node","_getActiveIcon","_typeof","tmp","_playSound","window","audio","Audio","play","_loadingStatus","_finishedStatus","_statusChange","_disableStatus","LrnsysProgress","Polymer","disableAjaxCalls","items","Array","sound","soundFinish","title","keyItems","progressiveUnlock","state","overallPercentage","_responseList","activeNodeResponse","nodeData","nodeDataError","vertical","size","_getStrokeWidth","width","_reportState","_itemsChanged","length","set","notifyPath","setTimeout","_this","ajax","generateRequest","_isActive","index","_activeResponseChange","response","_bubbleUpChangeActive","target","_activeChanged","forEach","element","array","_this2","_statusChanged","_this3","handleNodeResponse","detail","_this4","_handleNodeError","message","_overallPercentageCompute","progress","changePercentage","mode","newp","updateItems","op","item","push","pop","splice"],"mappings":"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"}