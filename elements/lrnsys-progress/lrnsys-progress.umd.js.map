{"version":3,"file":"lrnsys-progress.umd.js","sources":["lib/lrnsys-progress-circle.js","lrnsys-progress.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport \"@lrnwebcomponents/circle-progress/circle-progress.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@polymer/paper-tooltip/paper-tooltip.js\";\nimport \"@polymer/paper-spinner/paper-spinner.js\";\nimport \"@polymer/neon-animation/neon-animation.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        --paper-button-ink-color: var(--lrnsys-progress-color, --paper-green-500);\n        display: block;\n        transition:\n          box-shadow var(--lrnsys-progress-circle-transition, 0.5s) linear,\n          color var(--lrnsys-progress-circle-transition, 0.5s) ease-in-out,\n          background-color var(--lrnsys-progress-circle-transition, .5s) ease-in-out;\n      }\n      :host([status='complete']) .circle-wrapper {\n        --paper-button-ink-color: var(--lrnsys-progress-complete-color, --paper-green-500);\n        box-shadow: 0px 0px 0px .1em var(--lrnsys-progress-complete-color, --paper-green-900);\n      }\n      :host([status='disabled']) .circle-wrapper {\n        box-shadow: none;\n      }\n      :host([status='available']) .circle-wrapper {\n        box-shadow: none;\n      }\n      :host([active]) .circle-wrapper {\n        box-shadow: 0px 0px 0px .1em var(--google-grey-500);\n      }\n      .circle-wrapper {\n        border-radius: 100%;\n      }\n      .button {\n        margin: 0;\n        padding: 0;\n        display: block;\n        min-width: 2.5em;\n        border-radius: 100%;\n      }\n      paper-button {\n        width: var(--lrnsys-progress-circle-size, 2.5em);\n        height: var(--lrnsys-progress-circle-size, 2.5em);\n      }\n      circle-progress {\n        margin: 0;\n        --circle-progress-width: var(--lrnsys-progress-circle-size, 2.5em);\n        --circle-progress-height: var(--lrnsys-progress-circle-size, 2.5em);\n        --circle-progress-stroke-color: var(--lrnsys-progress-color, --paper-green-500);\n        --circle-progress-bg-stroke-color: var(--lrnsys-progress-container-color, --google-grey-300);\n        --circle-progress-transition: 0.5s;\n        --circle-progress-stroke-linecap: square;\n        transition:\n          color .5s ease-in-out,\n          background-color .5s ease-in-out;\n      }\n      paper-spinner {\n        display: block;\n        width: var(--lrnsys-progress-spinner-size, 2em);\n        height: var(--lrnsys-progress-spinner-size, 2em);\n        position: absolute;\n        z-index: 1;\n        margin: .25em;\n        padding: 0;\n        visibility: visible;\n        opacity: 1;\n        transition: visibility 0.4s, opacity 0.4s ease;\n      }\n      paper-spinner.multi {\n        --paper-spinner-layer-1-color: var(--paper-purple-500);\n        --paper-spinner-layer-2-color: var(--paper-cyan-500);\n        --paper-spinner-layer-3-color: var(--paper-blue-grey-500);\n        --paper-spinner-layer-4-color: var(--paper-amber-500);\n      }\n      /* enforce the browser default even strong; NEVER show this */\n      [hidden] {\n        visibility: hidden !important;\n        opacity: 0 !important;\n      }\n      .transition {\n        opacity: .4;\n        width: calc(var(--lrnsys-progress-icon-size, 1.5em) - .5em);\n        height: calc(var(--lrnsys-progress-icon-size, 1.5em) - .5em);\n      }\n      iron-icon {\n        visibility: visible;\n        opacity: 1;\n        transition: width 0.1s linear, height 0.1s linear, visibility 0.4s ease, opacity 0.4s ease;\n        width: var(--lrnsys-progress-icon-size, 1.5em);\n        height: var(--lrnsys-progress-icon-size, 1.5em);\n      }\n      .disabled {\n        background-color: var(--lrnsys-progress-disabled-color, --google-grey-500);\n        color: white;\n      }\n      .loading {\n        background-color: white;\n        color: black;\n      }\n      .finished iron-icon:not(.activeIcon) {\n        width: calc(var(--lrnsys-progress-icon-size, 1.5em) - .5em);\n        height: calc(var(--lrnsys-progress-icon-size, 1.5em) - .5em);\n      }\n      .available {\n        background-color: var(--lrnsys-progress-active-color, --google-grey-300);\n        color: var(--lrnsys-progress-active-text-color, --google-grey-500);\n      }\n      .activeIcon {\n        color: black;\n      }\n      .complete .activeIcon {\n        color: white;\n      }\n      :host([active]) .complete .activeIcon,\n      :host([active]) .finished .activeIcon {\n        color: black;\n      }\n      .complete,\n      .finished {\n        background-color: var(--lrnsys-progress-container-color, --paper-green-500);\n        color: white;\n      }\n      :host([active]) circle-progress {\n        background-color: white;\n        color: black;\n      }\n      .listview-title {\n        font-size: 1em;\n        padding: 0;\n        margin: 0;\n      }\n      .description-content {\n        font-size: .5em;\n        font-style: italic;\n      }\n      .circle-wrapper {\n        display: inline-block;\n      }\n      #listview {\n        display: inline-block;\n        height: 2em;\n        padding: .25em 0;\n        margin: 0;\n        vertical-align: top;\n      }\n      .link {\n        height: 2.5em;\n        width: 100%;\n      }\n      :host([list-view]) .button {\n        margin: 0;\n        padding: 0;\n        display: block;\n        min-width: 2.5em;\n        border-radius: 0;\n      }\n    </style>\n    <paper-tooltip hidden\\$=\"[[!toolTip]]\" for=\"button\" position=\"bottom\" offset=\"8\" animation-delay=\"0\">\n      [[label]]\n    </paper-tooltip>\n    <a href=\"[[url]]\" tabindex=\"-1\" class=\"link\">\n    <paper-button id=\"button\" class=\"button\" disabled\\$=\"[[disabled]]\" title=\"[[label]]\">\n      <span class=\"circle-wrapper\">\n      <paper-spinner active\\$=\"[[loading]]\" hidden\\$=\"[[!loading]]\" class=\"multi\" alt\\$=\"Loading content for [[label]]\"></paper-spinner>\n        <circle-progress class\\$=\"[[status]]\" value=\"[[value]]\" max=\"[[max]]\" stroke-width=\"[[strokeWidth]]\" angle=\"180\">\n          <iron-icon id=\"icon\" icon=\"[[activeIcon]]\" hidden\\$=\"[[!activeIcon]]\"></iron-icon>\n          <slot name=\"image\"></slot>\n        </circle-progress>\n      </span>\n      <span id=\"listview\" hidden\\$=\"[[!listView]]\">\n          <h3 class=\"listview-title\">[[label]]</h3>\n          <div class=\"description-content\">\n            <slot name=\"description\"></slot>\n            <slot></slot>\n          </div>\n      </span>\n    </paper-button>\n  </a>\n`,\n\n  is: \"lrnsys-progress-circle\",\n\n  listeners: {\n    \"button.tap\": \"tapEventOn\",\n    \"button.mouseover\": \"focusOn\",\n    \"button.mouseout\": \"focusOff\",\n    \"button.focused-changed\": \"focusEvent\"\n  },\n\n  properties: {\n    /**\n     * Current value.\n     */\n    value: {\n      type: String,\n      value: 0,\n      reflectToAttribute: true,\n      observer: \"_testValueComplete\"\n    },\n    /**\n     * Whether to add a tooltip on hover.\n     */\n    toolTip: {\n      type: Boolean,\n      value: true,\n      reflectToAttribute: true\n    },\n    /**\n     * If this is in a list view, expand the output.\n     */\n    listView: {\n      type: Boolean,\n      value: true,\n      reflectToAttribute: true\n    },\n    /**\n     * Icon.\n     */\n    icon: {\n      type: String,\n      value: 0,\n      reflectToAttribute: true\n    },\n    /**\n     * Special icon to use when the item has been completed.\n     */\n    iconComplete: {\n      type: String,\n      value: 0,\n      reflectToAttribute: true\n    },\n    /**\n     * Loading icon\n     */\n    loadingIcon: {\n      type: String,\n      value: \"hourglass-full\",\n      reflectToAttribute: true\n    },\n    /**\n     * Finished icon\n     */\n    finishedIcon: {\n      type: String,\n      value: \"thumb-up\",\n      reflectToAttribute: true\n    },\n    /**\n     * Current value.\n     */\n    activeIcon: {\n      type: String,\n      notify: true,\n      computed: \"_getActiveIcon(icon, iconComplete, status)\"\n    },\n    /**\n     * Array position within a larger body of items.\n     */\n    step: {\n      type: Number,\n      value: 0,\n      reflectToAttribute: true\n    },\n    /**\n     * If this item is active or not in the larger list\n     */\n    active: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true,\n      notify: true\n    },\n    /**\n     * Status of the progression.\n     * Possible values are disabled, loading, available, complete\n     */\n    status: {\n      type: String,\n      value: \"available\",\n      reflectToAttribute: true,\n      notify: true,\n      observer: \"_statusChange\"\n    },\n    /**\n     * Correctly disable the button if it's status is such.\n     */\n    disabled: {\n      type: Boolean,\n      computed: \"_disableStatus(status)\"\n    },\n    /**\n     * Calculate if something is in a loading status which invokes a swirl.\n     */\n    loading: {\n      type: Boolean,\n      computed: \"_loadingStatus(status)\"\n    },\n    /**\n     * Boolean to invoke \"finished\" state. Useful for the last circle\n     * in a series.\n     */\n    finished: {\n      type: Boolean,\n      computed: \"_finishedStatus(status)\"\n    },\n    /**\n     * Max progression for doing math against.\n     */\n    max: {\n      type: String,\n      reflectToAttribute: true\n    },\n    /**\n     * Internal property to ensure we only ding 1x\n     */\n    __chimed: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Internal property to ensure we only finish 1x\n     */\n    __finishchimed: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * URL to link to on click.\n     */\n    url: {\n      type: String,\n      value: \"#\",\n      reflectToAttribute: true\n    },\n    /**\n     * Data url to bubble up for more advanced implementations.\n     */\n    dataUrl: {\n      type: String,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Stroke width.\n     */\n    strokeWidth: {\n      type: Number,\n      value: 4\n    },\n    /**\n     * Tracks if focus state is applied for element consistency\n     * when dealing with focus vs hover states.\n     */\n    focusState: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Play sound status; if this should play sound\n     * when it hits certain milestones or not.\n     */\n    playSound: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Play sound at end; if this should play sound\n     * when it hits certain milestones or not.\n     */\n    playFinishSound: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Play sound on complete.\n     */\n    completeSound: {\n      type: String,\n      value: \"assets/complete.mp3\",\n      reflectToAttribute: true\n    },\n    /**\n     * Play sound on complete.\n     */\n    finishedSound: {\n      type: String,\n      value: \"assets/finished.mp3\",\n      reflectToAttribute: true\n    },\n    /**\n     * Fire and track milestones towards completion state.\n     */\n    _bubbleProgress: {\n      type: Object\n    }\n  },\n\n  /**\n   * Ready state\n   */\n  ready: function(e) {\n    // seems odd but if we don't do this we can get issues with\n    // this field being unified across all circles when really\n    // we have to track this state per circle.\n    this._bubbleProgress = {\n      \"25\": false,\n      \"50\": false,\n      \"75\": false\n    };\n  },\n\n  /**\n   * Test if the value = max meaning that we hit complete from available\n   */\n  _testValueComplete: function(newValue, oldValue) {\n    // ensure we were previously available before marking complete\n    // this way we don't conflict with the finished state which can\n    // only be set from outside the circle as the circle doesn't\n    // know how many items are in the set\n    if (newValue >= this.max && this.status == \"available\") {\n      this.status = \"complete\";\n    }\n    // add events for certain mile stones; this has to be in reverse order\n    // otherwise we could actuall be passing 75 but it was at 0. This allows\n    // for jumping ahead and not triggering 25/50/75 all at once and preventing\n    // over reported percentages upstream\n    else if (newValue / this.max >= 0.75 && !this._bubbleProgress[\"75\"]) {\n      this.fire(\"node-percent-milestone\", { percentage: 75 });\n      this._bubbleProgress[\"75\"] = true;\n    } else if (newValue / this.max >= 0.5 && !this._bubbleProgress[\"50\"]) {\n      this.fire(\"node-percent-milestone\", { percentage: 50 });\n      this._bubbleProgress[\"50\"] = true;\n    } else if (newValue / this.max >= 0.25 && !this._bubbleProgress[\"25\"]) {\n      this.fire(\"node-percent-milestone\", { percentage: 25 });\n      this._bubbleProgress[\"25\"] = true;\n    }\n  },\n\n  /**\n   * Focus event for UX consistency.\n   */\n  focusEvent: function(e) {\n    // see if it has hover classes\n    if (!this.disabled && this.status != \"loading\") {\n      // focus shows focus\n      if (this.focusState) {\n        // force icon to be set to real one and class added\n        this.$.icon.icon = this.icon;\n        this.$.icon.classList.add(\"activeIcon\");\n      } else {\n        // if complete set it back to what it was\n        if (this.status == \"complete\" || this.status == \"finished\") {\n          this.$.icon.icon = this.activeIcon;\n        }\n        // drop the class for active step\n        this.$.icon.classList.remove(\"activeIcon\");\n      }\n      this.focusState = !this.focusState;\n    }\n  },\n\n  /**\n   * Focus event for UX consistency.\n   */\n  focusOn: function(e) {\n    // see if it has hover classes\n    if (!this.disabled && this.status != \"loading\") {\n      // force icon to be set to real one and class added\n      this.$.icon.icon = this.icon;\n      this.$.icon.classList.add(\"activeIcon\");\n    }\n  },\n\n  /**\n   * Focus event for UX consistency.\n   */\n  focusOff: function(e) {\n    // see if it has hover classes\n    if (!this.disabled && this.status != \"loading\") {\n      // if complete set it back to what it was\n      if (this.status == \"complete\" || this.status == \"finished\") {\n        this.$.icon.icon = this.activeIcon;\n      }\n      // drop the class for active step\n      this.$.icon.classList.remove(\"activeIcon\");\n    }\n  },\n\n  /**\n   * Tapped on the item.\n   */\n  tapEventOn: function(e) {\n    this.fire(\"node-is-active\", { node: e });\n  },\n\n  /**\n   * Calculate which icon to present.\n   */\n  _getActiveIcon: function(icon, iconComplete, status) {\n    if (typeof icon !== typeof undefined) {\n      var tmp = icon;\n      // support for a loading icon while loading\n      if (status == \"loading\") {\n        tmp = this.loadingIcon;\n        this.$.icon.classList.add(\"transition\");\n      } else if (status == \"finished\") {\n        tmp = this.finishedIcon;\n      } else if (\n        status == \"complete\" &&\n        typeof iconComplete !== typeof undefined\n      ) {\n        if (this.playSound && !this.__chimed) {\n          this._playSound();\n        }\n        tmp = iconComplete;\n      } else {\n        this.$.icon.classList.remove(\"transition\");\n      }\n      return tmp;\n    }\n    return false;\n  },\n\n  /**\n   * Play the sound effect.\n   */\n  _playSound: function() {\n    // calculate sound to use and ensure it only ever happens once\n    // via the __chimed flag\n    if (this.status == \"complete\") {\n      window.audio = new Audio(this.completeSound);\n      this.__chimed = true;\n    } else if (this.status == \"finished\") {\n      window.audio = new Audio(this.finishedSound);\n      this.__finishchimed = true;\n    } else {\n      // shouldn't be possible\n      window.audio = new Audio();\n    }\n    window.audio.play();\n  },\n\n  /**\n   * Calculate loading based on the status of the item.\n   */\n  _loadingStatus: function(status) {\n    if (status == \"loading\") {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * Calculate loading based on the status of the item.\n   */\n  _finishedStatus: function(status) {\n    if (status == \"finished\") {\n      if (this.playFinishSound && !this.__finishchimed) {\n        this._playSound();\n      }\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * Notice when state changes to fire up an event for others to respond to.\n   */\n  _statusChange: function(newValue, oldValue) {\n    // verify this isn't loading up\n    if (typeof oldValue !== typeof undefined && newValue !== oldValue) {\n      this.fire(\"node-status-change\", { status: newValue });\n    }\n  },\n\n  /**\n   * Calculate disable based on the status of the item.\n   */\n  _disableStatus: function(status) {\n    if (status == \"disabled\") {\n      return true;\n    }\n    return false;\n  }\n});\n","import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport \"@polymer/paper-progress/paper-progress.js\";\nimport \"./lib/lrnsys-progress-circle.js\";\n/**\n`lrnsys-progress`\nA LRN element\n\n@demo demo/index.html\n\n@microcopy\n  node / circle - A progress circle on the line\n  nodes / items - the list of items in the progress bar\n  bubble - reserved for when events fire out of an element or value is tracking events\n  percentage - amount complete either in the bar or the nodes themselves\n  bar - the underlayed bar that's tracking overall progression\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        margin-top: 1.5em;\n      }\n      :host([size=\"tiny\"]) {\n        font-size: .8em;\n      }\n      :host([size=\"small\"]) {\n        font-size: 1.2em;\n      }\n      :host([size=\"medium\"]) {\n        font-size: 1.6em;\n      }\n      :host([size=\"large\"]) {\n        font-size: 2.8em;\n      }\n      :host([size=\"x-large\"]) {\n        font-size: 4em;\n      }\n      :host([size=\"epic\"]) {\n        font-size: 6em;\n      }\n      #circle-container {\n        display: flex;\n        justify-content:space-between;\n        margin: -1.5em 0 0 0;\n        padding: 0;\n        list-style: none;\n      }\n      .progress-title {\n        position: absolute !important;\n        clip: rect(1px 1px 1px 1px); /* IE6, IE7 */\n        clip: rect(1px, 1px, 1px, 1px);\n        overflow: hidden;\n        height: 1px;\n      }\n      paper-progress {\n        --paper-progress-height: .5em;\n        --paper-progress-transition-duration: 0.5s;\n        --paper-progress-transition-timing-function: ease;\n        --paper-progress-transition-delay: .4s;\n        width: 100%;\n      }\n      /* required to get the box shadow above the progress bar */\n      .circle-node {\n        z-index: 1;\n      }\n      ul#circle-container li.circle-node {\n        list-style-type: none;\n      }\n\n      :host([vertical]) {\n        width: max-content;\n      }\n      :host([vertical]) #circle-container {\n        display: block;\n      }\n      :host([vertical]) paper-progress {\n        display: none !important;\n      }\n      :host([vertical]) lrnsys-progress-circle {\n        margin: 1em 0;\n        padding: 0;\n        width: 100%;\n      }\n\n      lrnsys-progress-circle {\n        width: 2.5em;\n        height: 2.5em;\n        --lrnsys-progress-circle-size: 2.5em;\n        --lrnsys-progress-spinner-size: 2em;\n        --lrnsys-progress-icon-size: 1.5em;\n        --paper-spinner-stroke-width: .1em;\n      }\n\n    </style>\n    <iron-ajax id=\"ajax\" url=\"[[activeNodeURL]]\" handle-as=\"json\" last-response=\"{{nodeData}}\" last-error=\"{{nodeDataError}}\" on-response=\"handleNodeResponse\"></iron-ajax>\n    <h3 class=\"progress-title\">[[title]]</h3>\n    <paper-progress id=\"progress\" value=\"[[overallPercentage]]\"></paper-progress>\n    <ul id=\"circle-container\">\n      <template is=\"dom-repeat\" items=\"[[items]]\" as=\"item\">\n        <li class=\"circle-node\">\n          <lrnsys-progress-circle play-finish-sound=\"[[soundFinish]]\" play-sound=\"[[sound]]\" complete-sound=\"[[completeSound]]\" finished-sound=\"[[finishedSound]]\" active=\"[[_isActive(index, active)]]\" step=\"[[index]]\" label=\"[[item.title]]\" icon=\"[[item.icon]]\" icon-complete=\"[[item.iconComplete]]\" data-url=\"[[item.dataUrl]]\" url=\"[[item.url]]\" status=\"[[item.status]]\" value=\"[[item.value]]\" max=\"[[item.max]]\" stroke-width=\"[[strokeWidth]]\" tool-tip=\"[[!vertical]]\" list-view=\"[[vertical]]\" class\\$=\"[[size]]\">\n            <span slot=\"description\">[[item.description]]</span>\n          </lrnsys-progress-circle>\n        </li>\n      </template>\n    </ul>\n`,\n\n  is: \"lrnsys-progress\",\n\n  listeners: {\n    \"node-is-active\": \"_bubbleUpChangeActive\",\n    \"node-status-change\": \"_statusChanged\"\n  },\n\n  properties: {\n    /**\n     * Disable internal ajax calls as something is handling them above.\n     */\n    disableAjaxCalls: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Items to display to visualize the progression.\n     */\n    items: {\n      type: Array,\n      value: [],\n      notify: true,\n      observer: \"_itemsChanged\"\n    },\n    /**\n     * Play sounds whenever an item is complete.\n     * This can get pretty annoying though unless the items\n     * won't be completed for awhile.\n     */\n    sound: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Play sound when the user finishes the progression. This\n     * could also be annoying but far less so :)\n     */\n    soundFinish: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Play sound on complete.\n     */\n    completeSound: {\n      type: String,\n      value: \"assets/complete.mp3\",\n      reflectToAttribute: true\n    },\n    /**\n     * Play sound on complete.\n     */\n    finishedSound: {\n      type: String,\n      value: \"assets/finished.mp3\",\n      reflectToAttribute: true\n    },\n    /**\n     * Title of this progression, primarily for accessibility.\n     */\n    title: {\n      type: String,\n      value: \"Steps to completion\",\n      reflectToAttribute: true\n    },\n    /**\n     * Items displayed at specific points on the progression.\n     * These aren't filled up but place points along the progression\n     * which can help people see where they are relative to other\n     * factors such as % complete as a tick mark or icon.\n     */\n    keyItems: {\n      type: Array,\n      value: [],\n      notify: true\n    },\n    /**\n     * ID of the active item.\n     */\n    active: {\n      type: Number,\n      value: 0,\n      notify: true,\n      reflectToAttribute: true,\n      observer: \"_activeChanged\"\n    },\n    /**\n     * Whether to automatically make disabled items available\n     * or not when the previous one was just complete.\n     */\n    progressiveUnlock: {\n      type: Boolean,\n      value: true,\n      reflectToAttribute: true,\n      notify: true\n    },\n    /**\n     * State of progress in the current progression\n     */\n    state: {\n      type: String,\n      value: null,\n      reflectToAttribute: true,\n      observer: \"_reportState\"\n    },\n    /**\n     * How far is the user through this series of items.\n     */\n    overallPercentage: {\n      type: Number,\n      computed: \"_overallPercentageCompute(items, active)\",\n      reflectToAttribute: true\n    },\n    /**\n     * Responses for each item.\n     */\n    _responseList: {\n      type: Array,\n      value: []\n    },\n    /**\n     * Active response from the node selected.\n     */\n    activeNodeResponse: {\n      type: String,\n      value: \"\",\n      observer: \"_activeResponseChange\"\n    },\n    /**\n     * Active response from the node selected.\n     */\n    nodeData: {\n      type: Object,\n      value: []\n    },\n    /**\n     * Error.\n     */\n    nodeDataError: {\n      type: Object,\n      value: [],\n      observer: \"_handleNodeError\"\n    },\n    /**\n     * Flag to be vertical instead of horizontal.\n     */\n    vertical: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Size to make everything, small, medium, large, and epic\n     * are available class names; default medium.\n     */\n    size: {\n      type: String,\n      value: \"medium\",\n      notify: true,\n      reflectToAttribute: true\n    },\n    /**\n     * Calculate width based on the size since we have to convert em to px.\n     */\n    strokeWidth: {\n      type: Number,\n      computed: \"_getStrokeWidth(size)\"\n    }\n  },\n\n  /**\n   * Set an appropriate stroke width based on size of the element.\n   * This is because it's a hard pixel value when the rest of our\n   * sizing is based on em's\n   */\n  _getStrokeWidth: function(size) {\n    var width = 4;\n    if (size == \"tiny\") {\n      width = 3;\n    } else if (size == \"small\") {\n      width = 4;\n    } else if (size == \"medium\") {\n      width = 5;\n    } else if (size == \"large\") {\n      width = 6;\n    } else if (size == \"x-large\") {\n      width = 7;\n    } else if (size == \"epic\") {\n      width = 8;\n    }\n\n    return width;\n  },\n\n  /**\n   * Fire event that state has changed with what the statement is.\n   * This gives a readable name to what the state is of the progress bar\n   * as well as access to the full item that triggered the state change.\n   */\n  _reportState: function(newValue, oldValue) {\n    // help avoid initial ready state being null\n    if (typeof newValue !== typeof null) {\n      this.fire(\"progress-state-change\", {\n        state: this.state,\n        active: this.items[this.active]\n      });\n    }\n  },\n\n  /**\n   * Notice items have changed; only worry about if the count changes\n   * though since other oberservers handle downstream mutation\n   */\n  _itemsChanged: function(newValue, oldValue) {\n    // strange but this is effectively the same as \"ready\" except the ready\n    // state invokes potentially without items while this one will only\n    // match a case where there was no values and now we have one\n    if (\n      typeof oldValue !== typeof undefined &&\n      newValue.length != oldValue.length &&\n      typeof this._responseList[this.active] === typeof undefined\n    ) {\n      newValue[this.active].status = \"loading\";\n      this.set(\"items.\" + this.active + \".status\", \"loading\");\n      // becasue this is so early in bootstrap of the element we\n      // won't be able to detect the initial loading event\n      if (\n        typeof newValue[this.active].dataUrl !== typeof undefined &&\n        !this.disableAjaxCalls\n      ) {\n        this.$.ajax.url = newValue[this.active].dataUrl;\n        this.$.ajax.generateRequest();\n      } else {\n        setTimeout(() => {\n          newValue[this.active].status = \"available\";\n          this.set(\"items.\" + this.active + \".status\", \"available\");\n          this._responseList[this.active] = {};\n          this.activeNodeResponse = this._responseList[this.active];\n        }, 1200);\n      }\n    }\n  },\n\n  /**\n   * Simple boolean for whatever is active currently.\n   */\n  _isActive: function(index, active) {\n    return index === active;\n  },\n\n  /**\n   * Active Response changed; bubble it up.\n   */\n  _activeResponseChange: function(value) {\n    this.fire(\"progress-response-loaded\", { response: value });\n  },\n\n  /**\n   * Notice event from the nodes themselves\n   * and set active based on a node bubbling up an event\n   * that says \"Hey I am active now!\"\n   */\n  _bubbleUpChangeActive: function(e) {\n    // changing active will kick off events internally\n    this.active = e.target.step;\n  },\n\n  /**\n   * Active item has changed, set the rest of the data to match.\n   */\n  _activeChanged: function(newValue, oldValue) {\n    // bubble up event from state being set\n    this.state = \"active item is \" + this.active;\n    this.items.forEach((element, index, array) => {\n      // if the current item is disabled, check the 1 prior to it if we can\n      if (this.items[index].status == \"disabled\") {\n        // do nothing, it's disabled unless....\n        if (\n          index != 0 &&\n          this.progressiveUnlock &&\n          this.items[index - 1].status == \"complete\"\n        ) {\n          this.items[index].status = \"loading\";\n          this.set(\"items.\" + index + \".status\", \"loading\");\n        }\n      }\n      // or if our value is at max AND it's the last item in the list\n      else if (\n        this.items[index].value >= this.items[index].max &&\n        index == this.items.length - 1\n      ) {\n        this.items[index].status = \"finished\";\n        this.set(\"items.\" + index + \".status\", \"finished\");\n      }\n      // or if we're just at max then mark us complete\n      else if (this.items[index].value >= this.items[index].max) {\n        this.items[index].status = \"complete\";\n        this.set(\"items.\" + index + \".status\", \"complete\");\n      }\n      // or if the index is the currently active item\n      else if (index == this.active) {\n        // see if we have the data for it already otherwise trigger loading\n        if (typeof this._responseList[index] === typeof undefined) {\n          this.items[index].status = \"loading\";\n          this.set(\"items.\" + index + \".status\", \"loading\");\n        }\n        // if we already had a response, then mark available\n        else {\n          this.activeNodeResponse = this._responseList[index];\n          this.items[index].status = \"available\";\n          this.set(\"items.\" + index + \".status\", \"available\");\n        }\n      } else {\n        // we didn't match any cases, just leave it active\n        this.items[index].status = \"available\";\n        this.set(\"items.\" + index + \".status\", \"available\");\n      }\n    });\n  },\n\n  /**\n   * Listen for the state of anything below to change.\n   */\n  _statusChanged: function(e) {\n    // we are in loading state so go load data and let the response\n    // dictate what state we reach after that\n    if (e.target.status == \"loading\") {\n      if (\n        typeof this.items[this.active].dataUrl !== typeof undefined &&\n        !this.disableAjaxCalls\n      ) {\n        this.$.ajax.url = this.items[this.active].dataUrl;\n        this.$.ajax.generateRequest();\n      } else {\n        setTimeout(() => {\n          this.items[this.active].status = \"available\";\n          this.set(\"items.\" + this.active + \".status\", \"available\");\n          this._responseList[this.active] = {};\n          this.activeNodeResponse = this._responseList[this.active];\n        }, 1500);\n      }\n    } else if (\n      e.target.status == \"complete\" &&\n      this.items.length === this.active + 1\n    ) {\n      setTimeout(() => {\n        this.items[this.active].status = \"finished\";\n        this.set(\"items.\" + this.active + \".status\", \"finished\");\n      }, 100);\n    }\n  },\n\n  /**\n   * Response returned from triggering the Node's URL to fire to get a response.\n   */\n  handleNodeResponse: function(e) {\n    const detail = e.detail;\n    // this means that it was an internal path, fake \"loading\"\n    if (typeof detail.response === typeof null) {\n      setTimeout(() => {\n        this.items[this.active].status = \"available\";\n        this.set(\"items.\" + this.active + \".status\", \"available\");\n        this._responseList[this.active] = detail.response;\n        this.activeNodeResponse = this._responseList[this.active];\n      }, 1500);\n    }\n    // valid response, pass it along for other things to use\n    else {\n      this.items[this.active].status = \"available\";\n      this.set(\"items.\" + this.active + \".status\", \"available\");\n      this._responseList[this.active] = detail.response;\n      this.activeNodeResponse = this._responseList[this.active];\n    }\n  },\n\n  /**\n   * Weak support for error code being found\n   */\n  _handleNodeError: function(newValue, oldValue) {\n    if (\n      typeof oldValue !== typeof undefined &&\n      newValue != null &&\n      newValue.length != 0\n    ) {\n      // @todo, need support for a failed to load state; could be useful\n      // if we go into an offline capability in the future\n      this._responseList[this.active] = newValue;\n      this.activeNodeResponse = this._responseList[this.active];\n      // set available because we don't have a failed state\n      this.items[this.active].status = \"available\";\n      this.set(\"items.\" + this.active + \".status\", \"available\");\n      // fire an event that this isn't really available so we know an issue occured\n      this.fire(\"node-load-failed\", {\n        message: newValue,\n        node: this.items[this.active]\n      });\n    }\n  },\n\n  /**\n   * Calculate the overall percentage competed.\n   * This forms the line that's connecting the steps.\n   */\n  _overallPercentageCompute: function(items, active) {\n    this.$.progress.classList.add(\"transiting\");\n    return (active / (items.length - 1)) * 100;\n  },\n\n  /**\n   * Change the percentage for the active item.\n   */\n  changePercentage: function(percentage, mode) {\n    var newp = 0;\n    // support for adding and removing percentage as well as setting\n    if (mode == \"add\") {\n      newp = this.items[this.active].value + percentage;\n    } else if (mode == \"subtract\") {\n      newp = this.items[this.active].value - percentage;\n    } else {\n      newp = percentage;\n    }\n    // after establishing the new percentage, make sure it's less then max\n    // if it's at or over max then we need to trigger events and state to change\n    if (newp >= this.items[this.active].max) {\n      if (this.items.length == this.active + 1) {\n        // fire an event change to indicate that this happened\n        this.state = \"finished\";\n        this.items[this.active].status = \"finished\";\n        this.set(\"items.\" + this.active + \".status\", \"finished\");\n        // need to make sure finished happens prior to value set to 100\n        // otherwise this will kick off the circle to complete itself\n        this.items[this.active].value = this.items[this.active].max;\n        this.set(\n          \"items.\" + this.active + \".value\",\n          this.items[this.active].max\n        );\n      } else {\n        // set value = max which will automatically trigger complete in the circle\n        this.items[this.active].value = this.items[this.active].max;\n        this.set(\n          \"items.\" + this.active + \".value\",\n          this.items[this.active].max\n        );\n      }\n      // ensure we still have more items to go in the list\n      if (this.items.length > this.active + 1) {\n        // if we have progressive unlocking then set the next thing available\n        // assuming that the next thing is currently disabled and that we're not\n        // on the first item. OR, if we don't have a response for the current\n        // item in local storage then let's mark loading to kick off the calls\n        if (\n          (this.progressiveUnlock &&\n            this.items[this.active].status == \"complete\" &&\n            this.items[this.active + 1].status == \"disabled\") ||\n          typeof this._responseList[this.active + 1] === typeof undefined\n        ) {\n          this.items[this.active + 1].status = \"loading\";\n          this.set(\"items.\" + (this.active + 1) + \".status\", \"loading\");\n        }\n        // set state so it gets reported upstream in events\n        this.state = \"active item is \" + (this.active + 1);\n        // bump active ahead 1 because we still have more items in the list\n        this.active = this.active + 1;\n      }\n    } else {\n      this.items[this.active].value = newp;\n      this.set(\"items.\" + this.active + \".value\", newp);\n    }\n  },\n\n  /**\n   * Modify items and update template binding correctly.\n   */\n  updateItems: function(op, item) {\n    var response = false;\n    if (op == \"push\") {\n      this.push(\"items\", item);\n      response = true;\n    } else if (op == \"pop\") {\n      response = this.pop(\"items\");\n    } else if (op == \"splice\") {\n      this.splice(\"items\", this.items.length, 0, item);\n      response = true;\n    }\n    // force active to reprocess\n    const active = this.active;\n    this.set(\"active\", 0);\n    this.set(\"active\", active);\n    return response;\n  }\n});\n"],"names":["_template","html","is","listeners","properties","value","type","String","reflectToAttribute","observer","toolTip","Boolean","listView","icon","iconComplete","loadingIcon","finishedIcon","activeIcon","notify","computed","step","Number","active","status","disabled","loading","finished","max","__chimed","__finishchimed","url","dataUrl","strokeWidth","focusState","playSound","playFinishSound","completeSound","finishedSound","_bubbleProgress","Object","ready","e","_testValueComplete","newValue","oldValue","this","fire","percentage","focusEvent","$","classList","add","remove","focusOn","focusOff","tapEventOn","node","_getActiveIcon","_typeof","tmp","_playSound","window","audio","Audio","play","_loadingStatus","_finishedStatus","_statusChange","_disableStatus","disableAjaxCalls","items","Array","sound","soundFinish","title","keyItems","progressiveUnlock","state","overallPercentage","_responseList","activeNodeResponse","nodeData","nodeDataError","vertical","size","_getStrokeWidth","width","_reportState","_itemsChanged","length","set","setTimeout","_this","ajax","generateRequest","_isActive","index","_activeResponseChange","response","_bubbleUpChangeActive","target","_activeChanged","forEach","element","array","_this2","_statusChanged","_this3","handleNodeResponse","detail","_this4","_handleNodeError","message","_overallPercentageCompute","progress","changePercentage","mode","newp","updateItems","op","item","push","pop","splice"],"mappings":"+wmBAOQ,CACNA,UAAWC,YA6KXC,GAAI,yBAEJC,UAAW,cACK,gCACM,4BACD,oCACO,cAG5BC,WAAY,CAIVC,MAAO,CACLC,KAAMC,OACNF,MAAO,EACPG,oBAAoB,EACpBC,SAAU,sBAKZC,QAAS,CACPJ,KAAMK,QACNN,OAAO,EACPG,oBAAoB,GAKtBI,SAAU,CACRN,KAAMK,QACNN,OAAO,EACPG,oBAAoB,GAKtBK,KAAM,CACJP,KAAMC,OACNF,MAAO,EACPG,oBAAoB,GAKtBM,aAAc,CACZR,KAAMC,OACNF,MAAO,EACPG,oBAAoB,GAKtBO,YAAa,CACXT,KAAMC,OACNF,MAAO,iBACPG,oBAAoB,GAKtBQ,aAAc,CACZV,KAAMC,OACNF,MAAO,WACPG,oBAAoB,GAKtBS,WAAY,CACVX,KAAMC,OACNW,QAAQ,EACRC,SAAU,8CAKZC,KAAM,CACJd,KAAMe,OACNhB,MAAO,EACPG,oBAAoB,GAKtBc,OAAQ,CACNhB,KAAMK,QACNN,OAAO,EACPG,oBAAoB,EACpBU,QAAQ,GAMVK,OAAQ,CACNjB,KAAMC,OACNF,MAAO,YACPG,oBAAoB,EACpBU,QAAQ,EACRT,SAAU,iBAKZe,SAAU,CACRlB,KAAMK,QACNQ,SAAU,0BAKZM,QAAS,CACPnB,KAAMK,QACNQ,SAAU,0BAMZO,SAAU,CACRpB,KAAMK,QACNQ,SAAU,2BAKZQ,IAAK,CACHrB,KAAMC,OACNC,oBAAoB,GAKtBoB,SAAU,CACRtB,KAAMK,QACNN,OAAO,GAKTwB,eAAgB,CACdvB,KAAMK,QACNN,OAAO,GAKTyB,IAAK,CACHxB,KAAMC,OACNF,MAAO,IACPG,oBAAoB,GAKtBuB,QAAS,CACPzB,KAAMC,OACNF,OAAO,EACPG,oBAAoB,GAKtBwB,YAAa,CACX1B,KAAMe,OACNhB,MAAO,GAMT4B,WAAY,CACV3B,KAAMK,QACNN,OAAO,GAMT6B,UAAW,CACT5B,KAAMK,QACNN,OAAO,EACPG,oBAAoB,GAMtB2B,gBAAiB,CACf7B,KAAMK,QACNN,OAAO,EACPG,oBAAoB,GAKtB4B,cAAe,CACb9B,KAAMC,OACNF,MAAO,sBACPG,oBAAoB,GAKtB6B,cAAe,CACb/B,KAAMC,OACNF,MAAO,sBACPG,oBAAoB,GAKtB8B,gBAAiB,CACfhC,KAAMiC,SAOVC,MAAO,SAASC,QAITH,gBAAkB,KACf,MACA,MACA,IAOVI,mBAAoB,SAASC,EAAUC,GAKjCD,GAAYE,KAAKlB,KAAsB,aAAfkB,KAAKtB,YAC1BA,OAAS,WAMPoB,EAAWE,KAAKlB,KAAO,MAASkB,KAAKP,gBAAgB,UACvDQ,KAAK,yBAA0B,CAAEC,WAAY,UAC7CT,gBAAgB,KAAQ,GACpBK,EAAWE,KAAKlB,KAAO,KAAQkB,KAAKP,gBAAgB,UACxDQ,KAAK,yBAA0B,CAAEC,WAAY,UAC7CT,gBAAgB,KAAQ,GACpBK,EAAWE,KAAKlB,KAAO,MAASkB,KAAKP,gBAAgB,WACzDQ,KAAK,yBAA0B,CAAEC,WAAY,UAC7CT,gBAAgB,KAAQ,IAOjCU,WAAY,SAASP,GAEdI,KAAKrB,UAA2B,WAAfqB,KAAKtB,SAErBsB,KAAKZ,iBAEFgB,EAAEpC,KAAKA,KAAOgC,KAAKhC,UACnBoC,EAAEpC,KAAKqC,UAAUC,IAAI,gBAGP,YAAfN,KAAKtB,QAAuC,YAAfsB,KAAKtB,cAC/B0B,EAAEpC,KAAKA,KAAOgC,KAAK5B,iBAGrBgC,EAAEpC,KAAKqC,UAAUE,OAAO,oBAE1BnB,YAAcY,KAAKZ,aAO5BoB,QAAS,SAASZ,GAEXI,KAAKrB,UAA2B,WAAfqB,KAAKtB,cAEpB0B,EAAEpC,KAAKA,KAAOgC,KAAKhC,UACnBoC,EAAEpC,KAAKqC,UAAUC,IAAI,gBAO9BG,SAAU,SAASb,GAEZI,KAAKrB,UAA2B,WAAfqB,KAAKtB,SAEN,YAAfsB,KAAKtB,QAAuC,YAAfsB,KAAKtB,cAC/B0B,EAAEpC,KAAKA,KAAOgC,KAAK5B,iBAGrBgC,EAAEpC,KAAKqC,UAAUE,OAAO,gBAOjCG,WAAY,SAASd,QACdK,KAAK,iBAAkB,CAAEU,KAAMf,KAMtCgB,eAAgB,SAAS5C,EAAMC,EAAcS,oBACvCmC,EAAO7C,GAA2B,KAChC8C,EAAM9C,QAEI,WAAVU,GACFoC,EAAMd,KAAK9B,iBACNkC,EAAEpC,KAAKqC,UAAUC,IAAI,eACP,YAAV5B,EACToC,EAAMd,KAAK7B,aAED,YAAVO,iBACAmC,EAAO5C,IAEH+B,KAAKX,YAAcW,KAAKjB,eACrBgC,aAEPD,EAAM7C,QAEDmC,EAAEpC,KAAKqC,UAAUE,OAAO,cAExBO,SAEF,GAMTC,WAAY,WAGS,YAAff,KAAKtB,QACPsC,OAAOC,MAAQ,IAAIC,MAAMlB,KAAKT,oBACzBR,UAAW,GACQ,YAAfiB,KAAKtB,QACdsC,OAAOC,MAAQ,IAAIC,MAAMlB,KAAKR,oBACzBR,gBAAiB,GAGtBgC,OAAOC,MAAQ,IAAIC,MAErBF,OAAOC,MAAME,QAMfC,eAAgB,SAAS1C,SACT,WAAVA,GASN2C,gBAAiB,SAAS3C,SACV,YAAVA,IACEsB,KAAKV,kBAAoBU,KAAKhB,qBAC3B+B,cAEA,IAQXO,cAAe,SAASxB,EAAUC,iBAE5Bc,EAAOd,IAAiCD,IAAaC,QAClDE,KAAK,qBAAsB,CAAEvB,OAAQoB,KAO9CyB,eAAgB,SAAS7C,SACT,YAAVA,eCtjBA,CACNvB,UAAWC,YA4FXC,GAAI,kBAEJC,UAAW,kBACS,6CACI,kBAGxBC,WAAY,CAIViE,iBAAkB,CAChB/D,KAAMK,QACNN,OAAO,EACPG,oBAAoB,GAKtB8D,MAAO,CACLhE,KAAMiE,MACNlE,MAAO,GACPa,QAAQ,EACRT,SAAU,iBAOZ+D,MAAO,CACLlE,KAAMK,QACNN,OAAO,EACPG,oBAAoB,GAMtBiE,YAAa,CACXnE,KAAMK,QACNN,OAAO,EACPG,oBAAoB,GAKtB4B,cAAe,CACb9B,KAAMC,OACNF,MAAO,sBACPG,oBAAoB,GAKtB6B,cAAe,CACb/B,KAAMC,OACNF,MAAO,sBACPG,oBAAoB,GAKtBkE,MAAO,CACLpE,KAAMC,OACNF,MAAO,sBACPG,oBAAoB,GAQtBmE,SAAU,CACRrE,KAAMiE,MACNlE,MAAO,GACPa,QAAQ,GAKVI,OAAQ,CACNhB,KAAMe,OACNhB,MAAO,EACPa,QAAQ,EACRV,oBAAoB,EACpBC,SAAU,kBAMZmE,kBAAmB,CACjBtE,KAAMK,QACNN,OAAO,EACPG,oBAAoB,EACpBU,QAAQ,GAKV2D,MAAO,CACLvE,KAAMC,OACNF,MAAO,KACPG,oBAAoB,EACpBC,SAAU,gBAKZqE,kBAAmB,CACjBxE,KAAMe,OACNF,SAAU,2CACVX,oBAAoB,GAKtBuE,cAAe,CACbzE,KAAMiE,MACNlE,MAAO,IAKT2E,mBAAoB,CAClB1E,KAAMC,OACNF,MAAO,GACPI,SAAU,yBAKZwE,SAAU,CACR3E,KAAMiC,OACNlC,MAAO,IAKT6E,cAAe,CACb5E,KAAMiC,OACNlC,MAAO,GACPI,SAAU,oBAKZ0E,SAAU,CACR7E,KAAMK,QACNN,OAAO,GAMT+E,KAAM,CACJ9E,KAAMC,OACNF,MAAO,SACPa,QAAQ,EACRV,oBAAoB,GAKtBwB,YAAa,CACX1B,KAAMe,OACNF,SAAU,0BASdkE,gBAAiB,SAASD,OACpBE,EAAQ,QACA,QAARF,EACFE,EAAQ,EACS,SAARF,EACTE,EAAQ,EACS,UAARF,EACTE,EAAQ,EACS,SAARF,EACTE,EAAQ,EACS,WAARF,EACTE,EAAQ,EACS,QAARF,IACTE,EAAQ,GAGHA,GAQTC,aAAc,SAAS5C,EAAUC,GAE3Bc,EAAOf,OAAoB,YACxBG,KAAK,wBAAyB,CACjC+B,MAAOhC,KAAKgC,MACZvD,OAAQuB,KAAKyB,MAAMzB,KAAKvB,WAS9BkE,cAAe,SAAS7C,EAAUC,4BAK9Bc,EAAOd,IACPD,EAAS8C,QAAU7C,EAAS6C,sBAC5B/B,EAAOb,KAAKkC,cAAclC,KAAKvB,WAE/BqB,EAASE,KAAKvB,QAAQC,OAAS,eAC1BmE,IAAI,SAAW7C,KAAKvB,OAAS,UAAW,yBAI3CoC,EAAOf,EAASE,KAAKvB,QAAQS,UAC5Bc,KAAKwB,iBAKNsB,WAAW,WACThD,EAASiD,EAAKtE,QAAQC,OAAS,YAC/BqE,EAAKF,IAAI,SAAWE,EAAKtE,OAAS,UAAW,aAC7CsE,EAAKb,cAAca,EAAKtE,QAAU,GAClCsE,EAAKZ,mBAAqBY,EAAKb,cAAca,EAAKtE,SACjD,YARE2B,EAAE4C,KAAK/D,IAAMa,EAASE,KAAKvB,QAAQS,aACnCkB,EAAE4C,KAAKC,qBAelBC,UAAW,SAASC,EAAO1E,UAClB0E,IAAU1E,GAMnB2E,sBAAuB,SAAS5F,QACzByC,KAAK,2BAA4B,CAAEoD,SAAU7F,KAQpD8F,sBAAuB,SAAS1D,QAEzBnB,OAASmB,EAAE2D,OAAOhF,MAMzBiF,eAAgB,SAAS1D,EAAUC,mBAE5BiC,MAAQ,kBAAoBhC,KAAKvB,YACjCgD,MAAMgC,QAAQ,SAACC,EAASP,EAAOQ,GAEF,YAA5BC,EAAKnC,MAAM0B,GAAOzE,OAGT,GAATyE,GACAS,EAAK7B,mBAC2B,YAAhC6B,EAAKnC,MAAM0B,EAAQ,GAAGzE,SAEtBkF,EAAKnC,MAAM0B,GAAOzE,OAAS,UAC3BkF,EAAKf,IAAI,SAAWM,EAAQ,UAAW,YAKzCS,EAAKnC,MAAM0B,GAAO3F,OAASoG,EAAKnC,MAAM0B,GAAOrE,KAC7CqE,GAASS,EAAKnC,MAAMmB,OAAS,GAE7BgB,EAAKnC,MAAM0B,GAAOzE,OAAS,WAC3BkF,EAAKf,IAAI,SAAWM,EAAQ,UAAW,aAGhCS,EAAKnC,MAAM0B,GAAO3F,OAASoG,EAAKnC,MAAM0B,GAAOrE,KACpD8E,EAAKnC,MAAM0B,GAAOzE,OAAS,WAC3BkF,EAAKf,IAAI,SAAWM,EAAQ,UAAW,aAGhCA,GAASS,EAAKnF,qBAEjBoC,EAAO+C,EAAK1B,cAAciB,KAC5BS,EAAKnC,MAAM0B,GAAOzE,OAAS,UAC3BkF,EAAKf,IAAI,SAAWM,EAAQ,UAAW,aAIvCS,EAAKzB,mBAAqByB,EAAK1B,cAAciB,GAC7CS,EAAKnC,MAAM0B,GAAOzE,OAAS,YAC3BkF,EAAKf,IAAI,SAAWM,EAAQ,UAAW,eAIzCS,EAAKnC,MAAM0B,GAAOzE,OAAS,YAC3BkF,EAAKf,IAAI,SAAWM,EAAQ,UAAW,iBAQ7CU,eAAgB,SAASjE,cAGA,WAAnBA,EAAE2D,OAAO7E,qBAETmC,EAAOb,KAAKyB,MAAMzB,KAAKvB,QAAQS,UAC9Bc,KAAKwB,iBAKNsB,WAAW,WACTgB,EAAKrC,MAAMqC,EAAKrF,QAAQC,OAAS,YACjCoF,EAAKjB,IAAI,SAAWiB,EAAKrF,OAAS,UAAW,aAC7CqF,EAAK5B,cAAc4B,EAAKrF,QAAU,GAClCqF,EAAK3B,mBAAqB2B,EAAK5B,cAAc4B,EAAKrF,SACjD,YARE2B,EAAE4C,KAAK/D,IAAMe,KAAKyB,MAAMzB,KAAKvB,QAAQS,aACrCkB,EAAE4C,KAAKC,mBAUK,YAAnBrD,EAAE2D,OAAO7E,QACTsB,KAAKyB,MAAMmB,SAAW5C,KAAKvB,OAAS,GAEpCqE,WAAW,WACTgB,EAAKrC,MAAMqC,EAAKrF,QAAQC,OAAS,WACjCoF,EAAKjB,IAAI,SAAWiB,EAAKrF,OAAS,UAAW,aAC5C,MAOPsF,mBAAoB,SAASnE,cACrBoE,EAASpE,EAAEoE,OAEbnD,EAAOmD,EAAOX,cAAoB,MACpCP,WAAW,WACTmB,EAAKxC,MAAMwC,EAAKxF,QAAQC,OAAS,YACjCuF,EAAKpB,IAAI,SAAWoB,EAAKxF,OAAS,UAAW,aAC7CwF,EAAK/B,cAAc+B,EAAKxF,QAAUuF,EAAOX,SACzCY,EAAK9B,mBAAqB8B,EAAK/B,cAAc+B,EAAKxF,SACjD,YAIEgD,MAAMzB,KAAKvB,QAAQC,OAAS,iBAC5BmE,IAAI,SAAW7C,KAAKvB,OAAS,UAAW,kBACxCyD,cAAclC,KAAKvB,QAAUuF,EAAOX,cACpClB,mBAAqBnC,KAAKkC,cAAclC,KAAKvB,UAOtDyF,iBAAkB,SAASpE,EAAUC,iBAEjCc,EAAOd,IACK,MAAZD,GACmB,GAAnBA,EAAS8C,cAIJV,cAAclC,KAAKvB,QAAUqB,OAC7BqC,mBAAqBnC,KAAKkC,cAAclC,KAAKvB,aAE7CgD,MAAMzB,KAAKvB,QAAQC,OAAS,iBAC5BmE,IAAI,SAAW7C,KAAKvB,OAAS,UAAW,kBAExCwB,KAAK,mBAAoB,CAC5BkE,QAASrE,EACTa,KAAMX,KAAKyB,MAAMzB,KAAKvB,YAS5B2F,0BAA2B,SAAS3C,EAAOhD,eACpC2B,EAAEiE,SAAShE,UAAUC,IAAI,cACtB7B,GAAUgD,EAAMmB,OAAS,GAAM,KAMzC0B,iBAAkB,SAASpE,EAAYqE,OACjCC,EAAO,GAGTA,EADU,OAARD,EACKvE,KAAKyB,MAAMzB,KAAKvB,QAAQjB,MAAQ0C,EACtB,YAARqE,EACFvE,KAAKyB,MAAMzB,KAAKvB,QAAQjB,MAAQ0C,EAEhCA,IAIGF,KAAKyB,MAAMzB,KAAKvB,QAAQK,KAC9BkB,KAAKyB,MAAMmB,QAAU5C,KAAKvB,OAAS,QAEhCuD,MAAQ,gBACRP,MAAMzB,KAAKvB,QAAQC,OAAS,gBAC5BmE,IAAI,SAAW7C,KAAKvB,OAAS,UAAW,iBAGxCgD,MAAMzB,KAAKvB,QAAQjB,MAAQwC,KAAKyB,MAAMzB,KAAKvB,QAAQK,SACnD+D,IACH,SAAW7C,KAAKvB,OAAS,SACzBuB,KAAKyB,MAAMzB,KAAKvB,QAAQK,YAIrB2C,MAAMzB,KAAKvB,QAAQjB,MAAQwC,KAAKyB,MAAMzB,KAAKvB,QAAQK,SACnD+D,IACH,SAAW7C,KAAKvB,OAAS,SACzBuB,KAAKyB,MAAMzB,KAAKvB,QAAQK,MAIxBkB,KAAKyB,MAAMmB,OAAS5C,KAAKvB,OAAS,KAMjCuB,KAAK+B,mBAC8B,YAAlC/B,KAAKyB,MAAMzB,KAAKvB,QAAQC,QACc,YAAtCsB,KAAKyB,MAAMzB,KAAKvB,OAAS,GAAGC,sBAC9BmC,EAAOb,KAAKkC,cAAclC,KAAKvB,OAAS,YAEnCgD,MAAMzB,KAAKvB,OAAS,GAAGC,OAAS,eAChCmE,IAAI,UAAY7C,KAAKvB,OAAS,GAAK,UAAW,iBAGhDuD,MAAQ,mBAAqBhC,KAAKvB,OAAS,QAE3CA,OAASuB,KAAKvB,OAAS,UAGzBgD,MAAMzB,KAAKvB,QAAQjB,MAAQgH,OAC3B3B,IAAI,SAAW7C,KAAKvB,OAAS,SAAU+F,KAOhDC,YAAa,SAASC,EAAIC,OACpBtB,GAAW,EACL,QAANqB,QACGE,KAAK,QAASD,GACnBtB,GAAW,GACI,OAANqB,EACTrB,EAAWrD,KAAK6E,IAAI,SACL,UAANH,SACJI,OAAO,QAAS9E,KAAKyB,MAAMmB,OAAQ,EAAG+B,GAC3CtB,GAAW,OAGP5E,EAASuB,KAAKvB,mBACfoE,IAAI,SAAU,QACdA,IAAI,SAAUpE,GACZ4E"}