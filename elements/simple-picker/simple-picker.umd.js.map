{"version":3,"file":"simple-picker.umd.js","sources":["lib/simple-picker-option.js","simple-picker.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@polymer/iron-icon/iron-icon.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"@lrnwebcomponents/lrn-shared-styles/lrn-shared-styles.js\";\nexport { SimplePickerOption };\n/**\n * `simple-picker-option`\n * `a simple picker for options, icons, etc.`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @see ../simple-picker.js\n * @see ../simple-color-picker-row.js\n */\nclass SimplePickerOption extends PolymerElement {\n  // render function\n  static get template() {\n    return html`\n      <style is=\"custom-style\" include=\"lrn-shared-styles\">\n        :host .label {\n          padding: 5px 10px;\n          @apply --simple-picker-option-label;\n        }\n      </style>\n      <iron-icon\n        aria-hidden=\"true\"\n        hidden$=\"[[_hideIcon(icon)]]\"\n        icon$=\"[[icon]]\"\n      ></iron-icon>\n      <span class$=\"[[_getSrOnly(hideOptionLabels)]]\">[[title]]</span>\n    `;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * Is the option active?\n       */\n      active: {\n        name: \"active\",\n        type: \"Boolean\",\n        value: null,\n        reflectToAttribute: true,\n        observer: false\n      },\n\n      /**\n       * Optional. If option is an iron icon, the iconset:name of the icon\n       */\n      icon: {\n        name: \"icon\",\n        type: \"String\",\n        value: null,\n        reflectToAttribute: false,\n        observer: false\n      },\n\n      /**\n       * Hide option labels? As color-picker or icon-picker, labels may be redundant.\n       * This option would move the labels off-screen so that only screen-readers will have them.\n       */\n      hideOptionLabels: {\n        name: \"hideOptionLabels\",\n        type: \"Boolean\",\n        value: false,\n        reflectToAttribute: true,\n        observer: false\n      },\n\n      /**\n       * The id of the option\n       */\n      id: {\n        name: \"order\",\n        type: \"String\",\n        value: null,\n        reflectToAttribute: true,\n        observer: false\n      },\n\n      /**\n       * Is the option selected?\n       */\n      selected: {\n        name: \"selected\",\n        type: \"Boolean\",\n        value: false,\n        reflectToAttribute: true,\n        observer: false\n      },\n\n      /**\n       * The text of the option. (Required for accessibility.)\n       */\n      title: {\n        name: \"title\",\n        type: \"String\",\n        value: null,\n        reflectToAttribute: true,\n        observer: false\n      },\n\n      /**\n       * The value of the option.\n       */\n      value: {\n        name: \"label\",\n        type: \"Object\",\n        value: null,\n        reflectToAttribute: false,\n        observer: false\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"simple-picker-option\";\n  }\n\n  /**\n   * If the option is not an iron-icon, hide the iron-icon.\n   *\n   * @param {string} the icon property\n   * @returns {boolean} whether or not the iron iron should be hidden\n   */\n  _hideIcon(icon) {\n    return this.icon === null;\n  }\n\n  /**\n   * On keyboard focus, fires an event to the picker so that active descendant can be set.\n   */\n  _handleFocus() {\n    this.dispatchEvent(new CustomEvent(\"option-focus\", { detail: this }));\n  }\n\n  /**\n   * On mouse hover, fires an event to the picker so that active descendant can be set.\n   */\n  _handleHover() {\n    this.dispatchEvent(new CustomEvent(\"option-focus\", { detail: this }));\n  }\n\n  /**\n   * determines if a label should visible on screen\n   *\n   * @param {boolean} hideOptionLabels property\n   * @returns {string} the sr-only (screenreader-only) class\n   */\n  _getSrOnly(hideOptionLabels) {\n    return hideOptionLabels === false ? \"label\" : \"label sr-only\";\n  }\n\n  /**\n   * Set event listeners\n   */\n  ready() {\n    super.ready();\n    let root = this;\n    this.addEventListener(\"focus\", function(e) {\n      root._handleFocus();\n    });\n    this.addEventListener(\"mouseover\", function(e) {\n      root._handleHover();\n    });\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n  }\n  /**\n   * life cycle, element is removed from the DOM\n   */\n  //disconnectedCallback() {}\n}\nwindow.customElements.define(SimplePickerOption.tag, SimplePickerOption);\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@polymer/iron-icon/iron-icon.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"./lib/simple-picker-option.js\";\nexport { SimplePicker };\n/**\n * `simple-picker`\n * `a simple picker for options, icons, etc.`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass SimplePicker extends PolymerElement {\n  \n  // render function\n  static get template() {\n    return html`\n<style>:host {\n  display: inline-block;\n  position: relative;\n  @apply --simple-picker;\n}\n:host, \n:host #sample, \n:host .rows {\n  margin: 0;\n  padding: 0;\n}\n\n:host([disabled]) {\n  cursor: not-allowed;\n}\n\n:host([hidden]) {\n  display: none;\n}\n:host #sample {\n  display: inline-flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 2px;\n  border-radius: 2px;\n  background-color: var(--simple-picker-background-color,#ddd);\n  border: 1px solid var(--simple-picker-border-color,black);\n}\n\n:host #icon {\n  transform: rotate(-90deg);\n  transition: transform 0.25s;\n}\n\n:host([expanded]) #icon {\n  transform: rotate(0deg);\n  transition: transform 0.25s;\n}\n\n:host #collapse {\n  display: none;\n  position: absolute;\n  top: calc(var(--simple-picker-swatch-size, 20px)+12px);\n  background-color: var(--simple-picker-background-color,#ddd);\n}\n\n:host([expanded]:not([disabled])) #collapse {\n  display: block;\n} \n\n:host .rows {\n  display: table;\n  border-collapse: collapse;\n  position: absolute;\n  z-index: 1000;\n  outline: 1px solid var(--simple-picker-border-color,black);\n}\n\n:host .row {\n  display: table-row;\n  align-items: stretch;\n}\n\n:host simple-picker-option {\n  z-index: 1;\n  display: table-cell;\n  overflow: hidden;\n  max-height: unset;\n  height: var(--simple-picker-option-size, 24px);\n  min-width: var(--simple-picker-option-size, 24px);\n  line-height: var(--simple-picker-option-size, 24px);\n  color: var(--simple-picker-option-color, black);\n  background-color: var(--simple-picker-option-background-color, white);\n  outline: var(--simple-picker-option-outline, none);\n  transition: max-height 2s;\n}\n\n:host simple-picker-option[selected] {\n  z-index: 50;\n  color: var(--simple-picker-selected-option-color, white);\n  background-color: var(--simple-picker-selected-option-background-color, black);\n  outline: var(--simple-picker-selected-option-outline, none);\n}\n\n:host simple-picker-option[active] {\n  z-index: 100;\n  cursor: pointer;\n  color: var(--simple-picker-active-option-color, white);\n  background-color: var(--simple-picker-active-option-background-color, #0088ff);\n  outline: var(--simple-picker-active-option-outline, none);\n}\n\n:host #sample simple-picker-option {\n  background-color: var(--simple-picker-sample-background-color, transparent);\n  border: none;\n}\n\n:host(:not([expanded])) #collapse simple-picker-option {\n  max-height: 0;\n  transition: max-height 1.5s;\n}\n\n@media screen and (max-width: 600px) {\n  :host {\n    position: static;\n  }\n  :host #collapse {\n    top: 0;\n    margin-top: 0;\n    position: relative;\n  } \n  :host .rows {\n    position: sticky;\n  }  \n}\n</style>\n<div id=\"listbox\"\n  aria-activedescendant$=\"[[__activeDesc]]\" \n  aria-labelledby$=\"[[ariaLabelledby]]\" \n  disabled$=\"[[disabled]]\"\n  label$=\"[[label]]\" \n  role=\"listbox\" \n  tabindex=\"0\">\n  <div id=\"sample\">\n    <simple-picker-option \n      aria-hidden=\"true\" \n      hide-option-labels$=\"[[hideOptionLabels]]\"\n      icon$=\"[[__selectedOption.icon]]\"\n      style$=\"[[__selectedOption.style]]\" \n      title$=\"[[__selectedOption.alt]]\">\n    </simple-picker-option>\n    <span id=\"icon\"><iron-icon aria-hidden=\"true\" icon=\"arrow-drop-down\"></iron-icon></span>\n  </div>\n  <div id=\"collapse\">\n    <div class=\"rows\">\n      <template is=\"dom-repeat\" items=\"[[options]]\" as=\"row\" index-as=\"rownum\">\n        <div class=\"row\">\n          <template is=\"dom-repeat\" items=[[row]] as=\"option\" index-as=\"colnum\">\n            <simple-picker-option \n              active$=\"[[_isMatch(__activeDesc,rownum,colnum)]]\"\n              aria-selected$=\"[[option.selected]]\" \n              hide-option-labels$=\"[[hideOptionLabels]]\"\n              icon$=\"[[option.icon]]\"\n              id$=\"[[_getOptionId(rownum,colnum)]]\"\n              role=\"option\"\n              selected$=\"[[_isMatch(__selectedDesc,rownum,colnum)]]\"\n              on-option-focus=\"_handleOptionFocus\"\n              on-set-selected-option=\"_handleSetSelectedOption\"\n              style$=\"[[option.style]]\" \n              tabindex=\"-1\"\n              title$=\"[[option.alt]]\"\n              value$=\"[[option]]\">\n            </simple-picker-option>\n          </template>\n        </div>\n      </template>\n    </div>\n  </div>\n</div>`;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n  /**\n   * Optional. Sets the aria-labelledby attribute\n   */\n  \"ariaLabelledby\": {\n    \"name\": \"ariaLabelledby\",\n    \"type\": \"String\",\n    \"value\": null,\n    \"reflectToAttribute\": false,\n    \"observer\": false\n  },\n\n  /**\n   * Is the picker disabled?\n   */\n  \"disabled\": {\n    \"name\": \"disabled\",\n    \"type\": \"Boolean\",\n    \"value\": false,\n    \"reflectToAttribute\": false,\n    \"observer\": false\n  },\n\n  /**\n   * Is it expanded?\n   */\n  \"expanded\": {\n    \"name\": \"expanded\",\n    \"type\": \"Boolean\",\n    \"value\": false,\n    \"reflectToAttribute\": true,\n    \"observer\": false\n  },\n\n  /**\n   * Optional. The label for the picker input\n   */\n  \"label\": {\n    \"name\": \"label\",\n    \"type\": \"String\",\n    \"value\": null,\n    \"reflectToAttribute\": false,\n    \"observer\": false\n  },\n\n  /**\n   * An array of options for the picker, eg.: `\n[\n  {\n    \"icon\": \"editor:format-paint\",      //Optional. Used if the picker is used as an icon picker.\n    \"alt\": \"Blue\",                      //Required for accessibility. Alt text description of the choice.\n    \"style\": \"background-color: blue;\", //Optional. Used to set an option's style.\n    ...                                 //Optional. Any other properties that should be captured as part of the selected option's value\n  },...\n]`\n   */\n  \"options\": {\n    \"name\": \"options\",\n    \"type\": \"Array\",\n    \"value\": [],\n    \"reflectToAttribute\": false,\n    \"observer\": false\n  },\n\n  /**\n   * Hide option labels? As color-picker or icon-picker, labels may be redundant.\n   * This option would move the labels off-screen so that only screen-readers will have them.\n   */\n  \"hideOptionLabels\": {\n    \"name\": \"hideOptionLabels\",\n    \"type\": \"Boolean\",\n    \"value\": false,\n    \"reflectToAttribute\": false,\n    \"observer\": false\n  },\n\n  /**\n   * An string that stores the current value for the picker\n   */\n  \"value\": {\n    \"name\": \"value\",\n    \"type\": \"String\",\n    \"value\": \"_getValue(__selectedDesc)\",\n    \"reflectToAttribute\": false,\n    \"read-only\": true,\n    \"observer\": false\n  },\n\n  /**\n   * The aria-activedescendant attribute (active option's ID)\n   */\n  \"__activeDesc\": {\n    \"name\": \"__activeDesc\",\n    \"type\": \"String\",\n    \"value\": \"option-0-0\",\n    \"reflectToAttribute\": false,\n    \"observer\": false\n  },\n\n  /**\n   * The ID of the selected option\n   */\n  \"__selectedDesc\": {\n    \"name\": \"__selectedDesc\",\n    \"type\": \"String\",\n    \"value\": \"option-0-0\",\n    \"reflectToAttribute\": false,\n    \"observer\": false\n  },\n\n  /**\n   * The ID of the selected option\n   */\n  \"__selectedOption\": {\n    \"name\": \"__selectedOption\",\n    \"type\": \"Object\",\n    \"computed\": \"_getOption(__selectedDesc)\",\n    \"reflectToAttribute\": false,\n    \"observer\": false\n  }\n}\n;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"simple-picker\";\n  }\n\n  /**\n   * returns the value of the selected option\n   *\n   * @param {options} the options array\n   * @returns {object} the selected option value\n   */\n  _getValue(options) {\n    let option = null;\n    for (let i = 0; i < this.options.length; i++) {\n      let row = this.options[i];\n      for (let j = 0; j < row.length; j++) {\n        if (row[j].selected === true) option = row[j];\n      }\n    }\n    this.$.texture.style.display = option !== null ? \"none\" : \"block\";\n    return option !== null ? option.value : null;\n  }\n\n  /**\n   * returns a unique id for the option based on its row and column.\n   *\n   * @param {number} the row number\n   * @param {number} the column number\n   * @returns {string} a unique id\n   */\n  _getOptionId(rownum, colnum) {\n    return \"option-\" + rownum + \"-\" + colnum;\n  }\n\n  /**\n   * returns the value of the selected option.\n   *\n   * @param {string} the selected option's id\n   * @returns {object} the selected option's value\n   */\n  _getValue(__selectedDesc) {\n    return this._getOption(__selectedDesc).value;\n  }\n\n  /**\n   * returns the value of the selected option.\n   *\n   * @param {string} the selected option's id\n   * @returns {object} the selected option\n   */\n  _getOption(optionId) {\n    let coords = this.__selectedDesc.split(\"-\");\n    return this.options[coords[1]][coords[2]];\n  }\n\n  /**\n   * determines if an option is at a given row and column\n   *\n   * @param {string} an option's id\n   * @param {number} the row number to be tested\n   * @param {number} the column number to be tested\n   * @returns {boolean} whether or not the option is at the given row and column\n   */\n  _isMatch(match, rownum, colnum) {\n    return match === this._getOptionId(rownum, colnum);\n  }\n\n  /**\n   * handles listbox click event\n   */\n  _handleListboxClick(e) {\n    this._toggleListbox(!this.expanded);\n  }\n\n  /**\n   * handles listbox keyboard events\n   */\n  _handleListboxKeydown(e) {\n    let coords = this.__activeDesc.split(\"-\"),\n      rownum = parseInt(coords[1]),\n      colnum = parseInt(coords[2]);\n    if (e.keyCode === 32) {\n      //spacebar\n      e.preventDefault();\n      this._toggleListbox(!this.expanded);\n    } else if (this.expanded && [9, 35, 36, 38, 40].includes(e.keyCode)) {\n      e.preventDefault();\n      if (e.keyCode === 35) {\n        //end\n        let lastrow = this.options.length - 1,\n          lastcol = this.options[lastrow].length - 1;\n        this._goToOption(lastrow, lastcol); //move to last option\n      } else if (e.keyCode === 36) {\n        //home\n        this._goToOption(0, 0); //move to first option\n      } else if (e.keyCode === 38) {\n        //previous (up arrow)\n        if (colnum > 0) {\n          this._goToOption(rownum, colnum - 1); //move up to previous column\n        } else if (rownum > 0) {\n          this._goToOption(rownum - 1, this.options[rownum - 1].length - 1); //move up to end of previous row\n        }\n      } else if (e.keyCode === 40) {\n        //next (down arrow)\n        if (colnum < this.options[rownum].length - 1) {\n          //move down to next column\n          this._goToOption(rownum, colnum + 1);\n        } else if (rownum < this.options.length - 1) {\n          //move down to beginning of next row\n          this._goToOption(rownum + 1, [0]);\n        }\n      }\n    }\n  }\n\n  /**\n   * handles option focus event and sets the active descendant\n   */\n  _handleOptionFocus(e) {\n    this._setActiveOption(e.detail.id);\n  }\n\n  /**\n   * sets a new active descendant and sets focus on it\n   *\n   * @param {number} the row number to be tested\n   * @param {number} the column number to be tested\n   */\n  _goToOption(rownum, colnum) {\n    let targetId = this._getOptionId(rownum, colnum),\n      target = this.shadowRoot.querySelector(\"#\" + targetId),\n      active = this.shadowRoot.querySelector(\"#\" + this.__activeDesc);\n    if (target !== null) {\n      target.tabindex = 0; //allow the item to be focusable.\n      target.focus();\n      active.tabindex = -1; //prevent tabbing between options.\n    }\n  }\n\n  /**\n   * sets the  active descendant to a given option's id\n   *\n   * @param {string} the option id\n   */\n  _setActiveOption(optionId) {\n    this.__activeDesc = optionId;\n  }\n\n  /**\n   * sets the selected option to a given option's id\n   *\n   * @param {string} the option id\n   */\n  _setSelectedOption(optionId) {\n    this.__selectedDesc = optionId;\n  }\n\n  /**\n   * toggles the listbox\n   *\n   * @param {boolean} expand the listbox?\n   */\n  _toggleListbox(expanded) {\n    this.expanded = expanded;\n    if (expanded) {\n      let active = this.shadowRoot.querySelector(\"#\" + this.__activeDesc);\n      if (active !== null) active.focus();\n    } else {\n      this._setSelectedOption(this.__activeDesc);\n    }\n  }\n\n  /**\n   * Set event listeners\n   */\n  ready() {\n    super.ready();\n    let root = this;\n    for (let i = 0; i < this.options.length; i++) {\n      for (let j = 0; j < this.options[i].length; j++) {\n        let option = this.options[i][j];\n        if (option.selected) {\n          this.__activeDesc = this._getOptionId(i, j);\n          this.__selectedDesc = this._getOptionId(i, j);\n        }\n      }\n    }\n    console.log(this.__activeDesc);\n    this.$.listbox.addEventListener(\"click\", function(e) {\n      root._handleListboxClick(e);\n    });\n    this.$.listbox.addEventListener(\"keydown\", function(e) {\n      root._handleListboxKeydown(e);\n    });\n  }\n\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n  }\n  /**\n   * life cycle, element is removed from the DOM\n   */\n  //disconnectedCallback() {}\n}\nwindow.customElements.define(SimplePicker.tag, SimplePicker);\n"],"names":["SimplePickerOption","PolymerElement","icon","this","dispatchEvent","CustomEvent","detail","hideOptionLabels","root","addEventListener","e","_handleFocus","_handleHover","html","active","name","type","value","reflectToAttribute","observer","id","selected","title","window","customElements","define","tag","SimplePicker","options","option","i","length","row","j","$","texture","style","display","rownum","colnum","__selectedDesc","_getOption","optionId","coords","split","match","_getOptionId","_toggleListbox","expanded","__activeDesc","parseInt","keyCode","preventDefault","includes","lastrow","lastcol","_goToOption","_setActiveOption","targetId","target","shadowRoot","querySelector","tabindex","focus","_setSelectedOption","console","log","listbox","_handleListboxClick","_handleListboxKeydown"],"mappings":"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"}