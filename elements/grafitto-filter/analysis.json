{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`grafitto-filter` is a Polymer reusable web component providing a solution for filtering a list of items before displaying them.\nThis component also supports use of custom filter functions using the `f` property. \n\nInstall:\n```bash\nbower install --save grafitto/grafitto-filter\n```\n\n`array`:\n```javascript\nvar array = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"];\n```\n```html\n<grafitto-filter item=[[array]] like=\"o\" as=\"vitu\">\n  <template>\n    <iron-list items=[[vitu]] as=\"item\">\n      <template>\n        <div>{{item}}</div>\n      </template>\n    </iron-list>\n  </template> </grafitto-filter>\n```\n_Note_: When a simple array is provided, the `where` attribute is ignored and filtering done on the array items themselves.\nAlso an array of numbers behave like an array of strings when filtering.\n\n### Arrays of Objects   \n`data`:\n```javascript\nvar data = [\n  {\n    name:\"John\",\n    home: \"Thika\"\n  },\n  {\n    name: \"Doe\",\n    home: \"Nairobi\"\n  }\n]\n```\nExample using `dom-repeat`:\n\n```html\n<grafitto-filter items='[[data]]' where=\"name\" like=\"Doe\" as=\"vitu\">\n  <template>\n    <template is=\"dom-repeat\" items=[[vitu]] as=\"item\">\n      <div>{{item.name}}</div>\n    </template>\n  </template>\n</grafitto-filter>\n```\n\nExample using `iron-list`:\n\n```html\n<grafitto-filter items=[[data]] where=\"name\" like=\"Doe\" as=\"vitu\">\n  <template>\n    <iron-list items=[[vitu]] as=\"item\">\n      <template>\n        <div>{{item.name}}</div>\n      </template>\n    </iron-list>\n  </template>\n</grafitto-filter>\n```\nJust incase you are wondering, `vitu` means `items` in Swahili :-)\n\n_Note_: When a simple array E.g `[\"one\",\"two\",\"three\",\"four\"]` is provided, the `where` attribute is ignored and filtering done on the array items themselves.\n\n`grafitto-filter` also supports complex objects. consider:\n\n\n```javascript\nvar complexObj = [\n  {\n    name: {\n      first: \"Thomas\",\n      second: \"Kimtu\"\n    },\n    home: \"Thika\"\n  },\n  {\n    name: {\n      first: \"John\",\n      second: \"Doe\"\n    },\n    home: \"Othaya\"\n  },\n  {\n    name: {\n      first: \"Clement\",\n      second: \"Wainaina\"\n    },\n    home: \"Nakuru\"\n  }\n]\n``` \n\nHere is an example using the `complexObj` object above\n\n```html\n<grafitto-filter items=[[complexObj]] where=\"name.first\" like=\"tho\" as=\"vitu\">\n  <template>\n    <iron-list items=[[vitu]] as=\"item\">\n      <template>\n        <div>{{item.name.first}} {{item.name.second}}, {{item.home}}</div>\n      </template>\n    </iron-list>\n  </template>\n</grafitto-filter>\n```\n\nYou can also use your custom function to filter the items provided.\nThe function receives a single `item` of the items provided and should return a `boolean` \n\n```html\n<dom-module id=\"your-element\">\n  <template>\n    <grafitto-filter items=[[data]] id=\"filter\" as=\"vitu\">\n      <template>\n        <iron-list items=[[vitu]] as=\"item\">\n          <template>\n            <div>{{item.name}}, {{item.home}}</div>\n          </template>\n        </iron-list>\n      </template>\n    </grafitto-filter>\n    <script>\n      Polymer({\n        is: \"your-element\",\n        properties: {\n          data: {\n            type: Array,\n            value: [\n                    {\n                      \"name\":\"John\",\n                      \"home\": \"Thika\"\n                    },\n                    {\n                      \"name\": \"Doe\",\n                      \"home\": \"Nairobi\"\n                    }\n                  ]\n          }\n        },\n        ready: function(){\n          this.$.filter.f = function(item){\n            return item.name == \"Doe\";\n          };\n        }\n       //Then you can call filter() function to trigger filter\n      })\n    </script>\n  </template>\n</dom-module>\n```\n\n### Rule of thumb   \n`like` is taken as a regular expression so remember to escape any characters that you don't want interpreted\nby the regular expression engine.",
      "summary": "",
      "path": "grafitto-filter.js",
      "properties": [
        {
          "name": "items",
          "type": "Array | null | undefined",
          "description": "These are the items to be filtered",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "like",
          "type": "string | null | undefined",
          "description": "Filter regular expression string",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 4
            },
            "end": {
              "line": 200,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "where",
          "type": "string | null | undefined",
          "description": "The filter-by field of your items array of objects",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"name\""
        },
        {
          "name": "caseSensitive",
          "type": "boolean | null | undefined",
          "description": "Enable case sensitivity when filtering",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 4
            },
            "end": {
              "line": 215,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "as",
          "type": "string | null | undefined",
          "description": "How the filtered items will be passed to the light-DOM. Default `items`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 4
            },
            "end": {
              "line": 222,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"items\""
        },
        {
          "name": "filtered",
          "type": "Array | null | undefined",
          "description": "Filtered items",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_onFilter\"",
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "f",
          "type": "Function | null | undefined",
          "description": "Custom filter function, if this is provided then 'where' and 'like' are ignored",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 4
            },
            "end": {
              "line": 237,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Function"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "templatize",
          "description": "Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\nfor the provided template.  This method should be called once per\ntemplate to prepare an element for stamping the template, followed\nby `stamp` to create new instances of the template.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/legacy/templatizer-behavior.js",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 108,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to prepare"
            },
            {
              "name": "mutableData",
              "type": "boolean=",
              "description": "When `true`, the generated class will skip\n  strict dirty-checking for objects and arrays (always consider them to\n  be \"dirty\"). Defaults to false."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Templatizer"
        },
        {
          "name": "stamp",
          "description": "Creates an instance of the template prepared by `templatize`.  The object\nreturned is an instance of the anonymous class generated by `templatize`\nwhose `root` property is a document fragment containing newly cloned\ntemplate content, and which has property accessors corresponding to\nproperties referenced in template bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/legacy/templatizer-behavior.js",
            "start": {
              "line": 123,
              "column": 2
            },
            "end": {
              "line": 125,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object=",
              "description": "Object containing initial property values to\n  populate into the template bindings."
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "Returns the created instance of\nthe template prepared by `templatize`."
          },
          "inheritedFrom": "Templatizer"
        },
        {
          "name": "modelForElement",
          "description": "Returns the template \"model\" (`TemplateInstance`) associated with\na given element, which serves as the binding scope for the template\ninstance the element is contained in.  A template model should be used\nto manipulate data associated with this template instance.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/legacy/templatizer-behavior.js",
            "start": {
              "line": 138,
              "column": 2
            },
            "end": {
              "line": 140,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "Element for which to return a template model."
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "Model representing the binding scope for\n  the element."
          },
          "inheritedFrom": "Templatizer"
        },
        {
          "name": "filter",
          "description": "Filters the items using the f function provided. Recommended when f function is provided",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 2
            },
            "end": {
              "line": 248,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeFiltered",
          "description": "This filters the items provided",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 259,
              "column": 2
            },
            "end": {
              "line": 301,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items",
              "type": "array",
              "description": "These are the items to be filtered."
            },
            {
              "name": "where",
              "type": "string",
              "description": "The filterby string."
            },
            {
              "name": "like",
              "type": "string",
              "description": "The filter string."
            },
            {
              "name": "caseSensitive"
            }
          ],
          "return": {
            "desc": "array} Filter results."
          }
        },
        {
          "name": "_populateUserTemplate",
          "description": "Populates user template, only template dom-repeate is supported for now",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 2
            },
            "end": {
              "line": 316,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filtered",
              "type": "array",
              "description": "the filtered array to be displayed"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_decomposeWhere",
          "description": "This decomposes `where` property to object attributes using . notation",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 321,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "where"
            },
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_onFilter",
          "description": "The `filter` event is fired whenever filtering is done before populating the dom.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 2
            },
            "end": {
              "line": 334,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 177,
          "column": 8
        },
        "end": {
          "line": 335,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "items",
          "description": "These are the items to be filtered",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "like",
          "description": "Filter regular expression string",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 4
            },
            "end": {
              "line": 200,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "where",
          "description": "The filter-by field of your items array of objects",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "case-sensitive",
          "description": "Enable case sensitivity when filtering",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 4
            },
            "end": {
              "line": 215,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "as",
          "description": "How the filtered items will be passed to the light-DOM. Default `items`",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 4
            },
            "end": {
              "line": 222,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "filtered",
          "description": "Filtered items",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "f",
          "description": "Custom filter function, if this is provided then 'where' and 'like' are ignored",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 4
            },
            "end": {
              "line": 237,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "filter",
          "description": "The `filter` event is fired whenever filtering is done before populating the dom.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "f-changed",
          "description": "Fired when the `f` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "grafitto-filter"
    }
  ]
}
